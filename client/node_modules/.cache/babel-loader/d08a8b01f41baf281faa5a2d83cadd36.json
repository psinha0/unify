{"ast":null,"code":"/**\r\n * Centralized topic definitions for behavior tracking\r\n * This file contains the mapping between topics and their related keywords\r\n * Import this file anywhere topic analysis is needed to ensure consistency\r\n */\n\nconst topicDefinitions = {\n  // Entertainment\n  'music': ['music', 'song', 'band', 'concert', 'playlist', 'album', 'singer', 'guitar', 'piano', 'melody', 'lyrics'],\n  'movies': ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director', 'scene', 'series', 'show', 'hollywood'],\n  'gaming': ['game', 'gaming', 'play', 'player', 'console', 'xbox', 'playstation', 'nintendo', 'steam', 'pc gaming'],\n  // Lifestyle\n  'travel': ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination', 'city', 'country', 'tour', 'backpacking'],\n  'food': ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal', 'delicious', 'taste', 'cuisine'],\n  'sports': ['sport', 'team', 'match', 'win', 'workout', 'exercise', 'athlete', 'competition', 'fitness', 'football', 'basketball'],\n  // Professional\n  'tech': ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device', 'internet', 'digital', 'online', 'code'],\n  'education': ['learn', 'study', 'school', 'college', 'university', 'degree', 'class', 'course', 'teacher', 'student', 'knowledge'],\n  'work': ['work', 'job', 'career', 'office', 'business', 'meeting', 'project', 'company', 'manager', 'deadline', 'presentation'],\n  // Arts & Culture\n  'art': ['art', 'painting', 'drawing', 'design', 'creative', 'artist', 'gallery', 'museum', 'exhibit', 'sculpture', 'aesthetic'],\n  'books': ['book', 'read', 'author', 'novel', 'story', 'literature', 'chapter', 'character', 'fiction', 'nonfiction', 'genre'],\n  'fashion': ['fashion', 'clothes', 'style', 'wear', 'outfit', 'dress', 'designer', 'trend', 'shopping', 'brand', 'accessory'],\n  // Personal\n  'health': ['health', 'doctor', 'medical', 'wellness', 'diet', 'sleep', 'healthy', 'hospital', 'medicine', 'therapy', 'mental health'],\n  'family': ['family', 'parent', 'child', 'mom', 'dad', 'brother', 'sister', 'relative', 'grandparent', 'kid', 'home'],\n  'pets': ['pet', 'dog', 'cat', 'animal', 'puppy', 'kitten', 'walk', 'vet', 'veterinarian', 'adopt', 'rescue']\n};\n\n/**\r\n * Get a list of all available topics\r\n * @returns {string[]} Array of all topic names\r\n */\nconst getAllTopics = () => {\n  return Object.keys(topicDefinitions);\n};\n\n/**\r\n * Get keywords for a specific topic\r\n * @param {string} topic - The topic to get keywords for\r\n * @returns {string[]} Array of keywords or empty array if topic doesn't exist\r\n */\nconst getKeywordsForTopic = topic => {\n  return topicDefinitions[topic] || [];\n};\n\n/**\r\n * Check if a text contains keywords related to a specific topic\r\n * @param {string} text - The text to analyze\r\n * @param {string} topic - The topic to check for\r\n * @returns {boolean} True if the text contains keywords related to the topic\r\n */\nconst textContainsTopic = (text, topic) => {\n  if (!text || !topic || !topicDefinitions[topic]) return false;\n  const lowerText = text.toLowerCase();\n  return topicDefinitions[topic].some(keyword => lowerText.includes(keyword));\n};\n\n/**\r\n * Analyze text to find all matching topics\r\n * @param {string} text - The text to analyze\r\n * @returns {Object} Map of topic names to boolean (true if topic was found)\r\n */\nconst analyzeTextForTopics = text => {\n  if (!text) return {};\n  const lowerText = text.toLowerCase();\n  const matches = {};\n  Object.keys(topicDefinitions).forEach(topic => {\n    if (topicDefinitions[topic].some(keyword => lowerText.includes(keyword))) {\n      matches[topic] = true;\n    }\n  });\n  return matches;\n};\nexport { topicDefinitions, getAllTopics, getKeywordsForTopic, textContainsTopic, analyzeTextForTopics };","map":{"version":3,"names":["topicDefinitions","getAllTopics","Object","keys","getKeywordsForTopic","topic","textContainsTopic","text","lowerText","toLowerCase","some","keyword","includes","analyzeTextForTopics","matches","forEach"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/topicDefinitions.js"],"sourcesContent":["/**\r\n * Centralized topic definitions for behavior tracking\r\n * This file contains the mapping between topics and their related keywords\r\n * Import this file anywhere topic analysis is needed to ensure consistency\r\n */\r\n\r\nconst topicDefinitions = {\r\n  // Entertainment\r\n  'music': ['music', 'song', 'band', 'concert', 'playlist', 'album', 'singer', 'guitar', 'piano', 'melody', 'lyrics'],\r\n  'movies': ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director', 'scene', 'series', 'show', 'hollywood'],\r\n  'gaming': ['game', 'gaming', 'play', 'player', 'console', 'xbox', 'playstation', 'nintendo', 'steam', 'pc gaming'],\r\n  \r\n  // Lifestyle\r\n  'travel': ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination', 'city', 'country', 'tour', 'backpacking'],\r\n  'food': ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal', 'delicious', 'taste', 'cuisine'],\r\n  'sports': ['sport', 'team', 'match', 'win', 'workout', 'exercise', 'athlete', 'competition', 'fitness', 'football', 'basketball'],\r\n  \r\n  // Professional\r\n  'tech': ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device', 'internet', 'digital', 'online', 'code'],\r\n  'education': ['learn', 'study', 'school', 'college', 'university', 'degree', 'class', 'course', 'teacher', 'student', 'knowledge'],\r\n  'work': ['work', 'job', 'career', 'office', 'business', 'meeting', 'project', 'company', 'manager', 'deadline', 'presentation'],\r\n  \r\n  // Arts & Culture\r\n  'art': ['art', 'painting', 'drawing', 'design', 'creative', 'artist', 'gallery', 'museum', 'exhibit', 'sculpture', 'aesthetic'],\r\n  'books': ['book', 'read', 'author', 'novel', 'story', 'literature', 'chapter', 'character', 'fiction', 'nonfiction', 'genre'],\r\n  'fashion': ['fashion', 'clothes', 'style', 'wear', 'outfit', 'dress', 'designer', 'trend', 'shopping', 'brand', 'accessory'],\r\n  \r\n  // Personal\r\n  'health': ['health', 'doctor', 'medical', 'wellness', 'diet', 'sleep', 'healthy', 'hospital', 'medicine', 'therapy', 'mental health'],\r\n  'family': ['family', 'parent', 'child', 'mom', 'dad', 'brother', 'sister', 'relative', 'grandparent', 'kid', 'home'],\r\n  'pets': ['pet', 'dog', 'cat', 'animal', 'puppy', 'kitten', 'walk', 'vet', 'veterinarian', 'adopt', 'rescue']\r\n};\r\n\r\n/**\r\n * Get a list of all available topics\r\n * @returns {string[]} Array of all topic names\r\n */\r\nconst getAllTopics = () => {\r\n  return Object.keys(topicDefinitions);\r\n};\r\n\r\n/**\r\n * Get keywords for a specific topic\r\n * @param {string} topic - The topic to get keywords for\r\n * @returns {string[]} Array of keywords or empty array if topic doesn't exist\r\n */\r\nconst getKeywordsForTopic = (topic) => {\r\n  return topicDefinitions[topic] || [];\r\n};\r\n\r\n/**\r\n * Check if a text contains keywords related to a specific topic\r\n * @param {string} text - The text to analyze\r\n * @param {string} topic - The topic to check for\r\n * @returns {boolean} True if the text contains keywords related to the topic\r\n */\r\nconst textContainsTopic = (text, topic) => {\r\n  if (!text || !topic || !topicDefinitions[topic]) return false;\r\n  \r\n  const lowerText = text.toLowerCase();\r\n  return topicDefinitions[topic].some(keyword => lowerText.includes(keyword));\r\n};\r\n\r\n/**\r\n * Analyze text to find all matching topics\r\n * @param {string} text - The text to analyze\r\n * @returns {Object} Map of topic names to boolean (true if topic was found)\r\n */\r\nconst analyzeTextForTopics = (text) => {\r\n  if (!text) return {};\r\n  \r\n  const lowerText = text.toLowerCase();\r\n  const matches = {};\r\n  \r\n  Object.keys(topicDefinitions).forEach(topic => {\r\n    if (topicDefinitions[topic].some(keyword => lowerText.includes(keyword))) {\r\n      matches[topic] = true;\r\n    }\r\n  });\r\n  \r\n  return matches;\r\n};\r\n\r\nexport {\r\n  topicDefinitions,\r\n  getAllTopics,\r\n  getKeywordsForTopic,\r\n  textContainsTopic,\r\n  analyzeTextForTopics\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}