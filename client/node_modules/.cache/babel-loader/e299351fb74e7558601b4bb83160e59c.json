{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Profile\\\\ProfilePromptsEnhanced.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { updateUserProfile } from '../../services/api';\nimport '../../styles/profile.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProfilePrompts = ({\n  forNewUser,\n  onComplete\n}) => {\n  _s();\n  const {\n    user,\n    setUser,\n    setIsNewUser\n  } = useAuth();\n  const [currentPrompt, setCurrentPrompt] = useState(null);\n  const [response, setResponse] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [promptIndex, setPromptIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [matchImprovementData, setMatchImprovementData] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // Expanded question pool for new users (20+ questions, will select 10 randomly)\n  const allNewUserPrompts = useMemo(() => [{\n    id: 'communication_style',\n    question: 'How do you prefer to communicate with friends?',\n    options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups', 'Social media'],\n    category: 'socialPreferences',\n    field: 'communicationStyle',\n    mapping: {\n      'Text messaging': 'Text-heavy',\n      'Voice calls': 'Voice calls',\n      'Video chats': 'Video calls',\n      'In-person meetups': 'In-person meetups',\n      'Social media': 'Text-heavy'\n    },\n    importance: 'high',\n    explanation: 'This helps us match you with friends who communicate in similar ways.'\n  }, {\n    id: 'social_energy',\n    question: 'After socializing, do you typically feel:',\n    options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\n    category: 'socialPreferences',\n    field: 'socialEnergy',\n    mapping: {\n      'Energized and ready for more': 'Extrovert',\n      'It depends on the people': 'Ambivert',\n      'Drained and needing alone time': 'Introvert'\n    },\n    importance: 'high',\n    explanation: 'Understanding your social energy helps us find compatible friends.'\n  }, {\n    id: 'weekend_activity',\n    question: 'What\\'s your ideal weekend activity?',\n    options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports', 'Creative projects'],\n    category: 'lifestyle',\n    field: 'weekendPlans',\n    importance: 'high',\n    explanation: 'Shared weekend preferences lead to better friendships.'\n  }, {\n    id: 'friendship_value',\n    question: 'What do you value most in a friendship?',\n    options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support', 'Fun and humor'],\n    category: 'values',\n    field: null,\n    importance: 'high',\n    explanation: 'Core values alignment is crucial for lasting friendships.'\n  }, {\n    id: 'activity_level',\n    question: 'How would you describe your activity level?',\n    options: ['Very active (daily exercise)', 'Moderately active (few times a week)', 'Occasionally active', 'Prefer low-activity'],\n    category: 'lifestyle',\n    field: 'activityLevel',\n    mapping: {\n      'Very active (daily exercise)': 'Very active',\n      'Moderately active (few times a week)': 'Moderately active',\n      'Occasionally active': 'Low activity',\n      'Prefer low-activity': 'Low activity'\n    },\n    importance: 'high',\n    explanation: 'Activity level compatibility helps with shared activities.'\n  }, {\n    id: 'time_availability',\n    question: 'When are you usually available to hang out?',\n    options: ['Weekday evenings', 'Weekend days', 'Weekend evenings', 'Flexible schedule', 'Lunch breaks'],\n    category: 'lifestyle',\n    field: 'availability',\n    importance: 'medium',\n    explanation: 'Matching schedules makes it easier to spend time together.'\n  }, {\n    id: 'group_size_preference',\n    question: 'Do you prefer hanging out:',\n    options: ['One-on-one', 'Small groups (2-4 people)', 'Medium groups (5-8 people)', 'Large groups (9+ people)', 'No preference'],\n    category: 'socialPreferences',\n    field: 'groupSizePreference',\n    importance: 'medium',\n    explanation: 'Group size preferences help us suggest the right social settings.'\n  }, {\n    id: 'conversation_topics',\n    question: 'What topics do you enjoy discussing most?',\n    options: ['Current events', 'Personal growth', 'Hobbies & interests', 'Work & career', 'Pop culture', 'Deep philosophical topics'],\n    category: 'socialPreferences',\n    field: 'conversationTopics',\n    importance: 'medium',\n    explanation: 'Shared conversation interests lead to more engaging interactions.'\n  }, {\n    id: 'music_preference',\n    question: 'What role does music play in your life?',\n    options: ['Essential part of my day', 'Background noise', 'Special occasions only', 'Love discovering new music', 'Not really into music'],\n    category: 'interests',\n    field: 'musicPreference',\n    importance: 'low',\n    explanation: 'Music preferences can be a great conversation starter.'\n  }, {\n    id: 'food_adventure',\n    question: 'How adventurous are you with food?',\n    options: ['Love trying new cuisines', 'Somewhat adventurous', 'Stick to what I know', 'Very picky eater', 'Dietary restrictions limit me'],\n    category: 'lifestyle',\n    field: 'foodAdventure',\n    importance: 'low',\n    explanation: 'Food preferences matter for social outings.'\n  }, {\n    id: 'humor_style',\n    question: 'What kind of humor do you appreciate?',\n    options: ['Witty and clever', 'Silly and goofy', 'Dark humor', 'Sarcastic', 'Wholesome and clean', 'Puns and wordplay'],\n    category: 'socialPreferences',\n    field: 'humorStyle',\n    importance: 'medium',\n    explanation: 'Shared sense of humor strengthens friendships.'\n  }, {\n    id: 'conflict_resolution',\n    question: 'When there\\'s a disagreement, you prefer to:',\n    options: ['Talk it out immediately', 'Take time to cool down first', 'Avoid confrontation', 'Seek compromise', 'Agree to disagree'],\n    category: 'socialPreferences',\n    field: 'conflictStyle',\n    importance: 'high',\n    explanation: 'Understanding conflict styles helps maintain healthy friendships.'\n  }, {\n    id: 'spontaneity',\n    question: 'How spontaneous are you?',\n    options: ['Love last-minute plans', 'Okay with some spontaneity', 'Prefer advance notice', 'Need to plan everything', 'Depends on my mood'],\n    category: 'lifestyle',\n    field: 'spontaneity',\n    importance: 'medium',\n    explanation: 'Planning preferences affect how you socialize.'\n  }, {\n    id: 'pet_preference',\n    question: 'How do you feel about pets?',\n    options: ['Can\\'t live without them', 'Love them but don\\'t have any', 'They\\'re okay', 'Not a fan', 'Allergic or can\\'t have them'],\n    category: 'lifestyle',\n    field: 'petPreference',\n    importance: 'low',\n    explanation: 'Pet preferences can influence hangout locations.'\n  }, {\n    id: 'learning_style',\n    question: 'What\\'s your favorite way to learn new things?',\n    options: ['Hands-on experience', 'Reading and research', 'Video tutorials', 'Taking classes', 'Learning from others'],\n    category: 'interests',\n    field: 'learningStyle',\n    importance: 'low',\n    explanation: 'Learning preferences can lead to shared activities.'\n  }, {\n    id: 'morning_night',\n    question: 'Are you a morning person or night owl?',\n    options: ['Early bird (up before 7am)', 'Morning person (7-9am)', 'Midday person', 'Night owl (active after 10pm)', 'Varies by day'],\n    category: 'lifestyle',\n    field: 'schedule',\n    mapping: {\n      'Early bird (up before 7am)': 'Morning person',\n      'Morning person (7-9am)': 'Morning person',\n      'Midday person': 'Flexible',\n      'Night owl (active after 10pm)': 'Night owl',\n      'Varies by day': 'Flexible'\n    },\n    importance: 'medium',\n    explanation: 'Schedule alignment makes planning easier.'\n  }, {\n    id: 'stress_relief',\n    question: 'How do you prefer to de-stress?',\n    options: ['Exercise', 'Talking with friends', 'Alone time', 'Creative activities', 'Entertainment (TV/games)', 'Nature and outdoors'],\n    category: 'lifestyle',\n    field: 'stressRelief',\n    importance: 'medium',\n    explanation: 'Understanding stress relief helps in supporting each other.'\n  }, {\n    id: 'social_media_use',\n    question: 'How active are you on social media?',\n    options: ['Very active (multiple posts/day)', 'Regularly active', 'Occasional lurker', 'Rarely use it', 'Don\\'t have social media'],\n    category: 'socialPreferences',\n    field: 'socialMediaUse',\n    importance: 'low',\n    explanation: 'Social media habits affect how you stay connected.'\n  }, {\n    id: 'travel_interest',\n    question: 'How interested are you in travel?',\n    options: ['Love traveling (always planning trips)', 'Enjoy occasional trips', 'Prefer staycations', 'Not really into travel', 'Want to but can\\'t currently'],\n    category: 'interests',\n    field: 'travelInterest',\n    importance: 'medium',\n    explanation: 'Travel interests can lead to shared adventures.'\n  }, {\n    id: 'support_style',\n    question: 'When a friend is going through a tough time, you:',\n    options: ['Offer practical solutions', 'Listen and empathize', 'Try to cheer them up', 'Give them space', 'Share similar experiences'],\n    category: 'socialPreferences',\n    field: 'supportStyle',\n    importance: 'high',\n    explanation: 'Support styles affect how friendships deepen.'\n  }], []);\n\n  // Randomly select 10 questions from the pool for new users\n  const newUserPrompts = useMemo(() => {\n    if (!forNewUser) return [];\n\n    // Shuffle the array using Fisher-Yates algorithm\n    const shuffled = [...allNewUserPrompts];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n\n    // Return first 10 questions\n    return shuffled.slice(0, 10);\n  }, [allNewUserPrompts, forNewUser]);\n\n  // Shorter questionnaire for existing users (2-3 questions)\n  const existingUserPrompts = useMemo(() => [{\n    id: 'recent_interests',\n    question: 'What new interests have you developed lately?',\n    options: ['Fitness & wellness', 'Creative arts', 'Technology', 'Travel planning', 'Cooking', 'Gaming', 'Reading', 'None recently'],\n    category: 'interests',\n    field: 'recentInterests',\n    importance: 'medium',\n    explanation: 'New interests help us find fresh connections.'\n  }, {\n    id: 'friendship_goals',\n    question: 'What are you looking for in new friendships right now?',\n    options: ['Activity partners', 'Deep conversations', 'Casual hangouts', 'Professional networking', 'Study/work buddies'],\n    category: 'socialPreferences',\n    field: 'friendshipGoals',\n    importance: 'high',\n    explanation: 'Understanding your current friendship goals helps us make better matches.'\n  }, {\n    id: 'communication_frequency',\n    question: 'How often do you like to stay in touch with friends?',\n    options: ['Daily check-ins', 'Few times a week', 'Weekly catch-ups', 'Bi-weekly', 'Monthly or less'],\n    category: 'socialPreferences',\n    field: 'communicationFrequency',\n    importance: 'medium',\n    explanation: 'Communication frequency preferences prevent mismatched expectations.'\n  }], []);\n\n  // Memoize the prompts array based on user type\n  const prompts = useMemo(() => {\n    return forNewUser ? newUserPrompts : existingUserPrompts;\n  }, [forNewUser, newUserPrompts, existingUserPrompts]);\n\n  // Calculate progress for new users\n  useEffect(() => {\n    if (forNewUser) {\n      setProgress(Math.round(promptIndex / prompts.length * 100));\n    }\n  }, [promptIndex, prompts.length, forNewUser]);\n\n  // Define handleComplete before it's used in useEffect\n  const handleComplete = useCallback(async () => {\n    // Mark questionnaire as complete in the database\n    try {\n      await updateUserProfile({\n        questionnaireComplete: true\n      });\n      console.log('Questionnaire marked as complete');\n    } catch (error) {\n      console.error('Error marking questionnaire complete:', error);\n    }\n    if (setIsNewUser) {\n      setIsNewUser(false);\n    }\n    // Also update user context to reflect questionnaire completion\n    if (setUser) {\n      setUser(prev => ({\n        ...prev,\n        lastQuestionnaireDate: new Date()\n      }));\n    }\n    if (onComplete) {\n      onComplete();\n    }\n\n    // Show match improvement data\n    const improvementData = {\n      questionsAnswered: forNewUser ? prompts.length : 1,\n      matchQualityIncrease: forNewUser ? 45 : 15,\n      newPotentialMatches: forNewUser ? 12 : 3,\n      profileCompleteness: forNewUser ? 85 : (user.profileCompleteness || 60) + 10\n    };\n    setMatchImprovementData(improvementData);\n  }, [setIsNewUser, onComplete, forNewUser, prompts.length, user, setUser]);\n\n  // Initialize prompt for user\n  useEffect(() => {\n    if (!user) return;\n    if (forNewUser) {\n      if (promptIndex < prompts.length) {\n        setCurrentPrompt(prompts[promptIndex]);\n        setResponse('');\n      } else {\n        // All prompts completed for new user\n        handleComplete();\n      }\n      return;\n    }\n\n    // For existing users, show prompts occasionally\n    const shouldShowPrompt = () => {\n      const lastPromptTime = localStorage.getItem('lastPromptTime');\n      if (lastPromptTime) {\n        const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\n        const oneDayInMs = 24 * 60 * 60 * 1000;\n        if (timeSinceLastPrompt < oneDayInMs) {\n          return false;\n        }\n      }\n      return Math.random() < 0.3;\n    };\n    if (shouldShowPrompt()) {\n      const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      const eligiblePrompts = prompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\n      if (eligiblePrompts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\n        setCurrentPrompt(eligiblePrompts[randomIndex]);\n        setResponse('');\n      }\n    }\n  }, [user, promptIndex, forNewUser, prompts, handleComplete]);\n  const handleSubmit = useCallback(async (selectedOption = null) => {\n    const responseToUse = selectedOption || response;\n    if (!responseToUse || !currentPrompt) return;\n    try {\n      const updateData = {};\n\n      // Special handling for values array (when field is null)\n      if (currentPrompt.category === 'values' && currentPrompt.field === null) {\n        // Add to values array if not already present\n        const currentValues = user.values || [];\n        if (!currentValues.includes(responseToUse)) {\n          updateData.values = [...currentValues, responseToUse];\n        } else {\n          updateData.values = currentValues; // No change needed\n        }\n      } else if (currentPrompt.category === 'interests' && currentPrompt.field) {\n        var _currentPrompt$mappin;\n        // Special handling for interests - field goes to root level, not nested\n        const mappedValue = ((_currentPrompt$mappin = currentPrompt.mapping) === null || _currentPrompt$mappin === void 0 ? void 0 : _currentPrompt$mappin[responseToUse]) || responseToUse;\n        updateData[currentPrompt.field] = mappedValue;\n      } else {\n        var _user$currentPrompt$c;\n        // Create nested structure if needed\n        if (!user[currentPrompt.category]) {\n          updateData[currentPrompt.category] = {};\n        } else {\n          updateData[currentPrompt.category] = {\n            ...user[currentPrompt.category]\n          };\n        }\n\n        // Handle mapped values\n        if (currentPrompt.mapping && currentPrompt.mapping[responseToUse]) {\n          updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[responseToUse];\n        } else if (Array.isArray((_user$currentPrompt$c = user[currentPrompt.category]) === null || _user$currentPrompt$c === void 0 ? void 0 : _user$currentPrompt$c[currentPrompt.field])) {\n          updateData[currentPrompt.category][currentPrompt.field] = [...(user[currentPrompt.category][currentPrompt.field] || []), responseToUse];\n        } else {\n          updateData[currentPrompt.category][currentPrompt.field] = responseToUse;\n        }\n      }\n\n      // Update user context immediately for responsiveness\n      if (setUser) {\n        if (currentPrompt.category === 'values' && currentPrompt.field === null) {\n          setUser(prev => ({\n            ...prev,\n            values: updateData.values\n          }));\n        } else if (currentPrompt.category === 'interests' && currentPrompt.field) {\n          // For interests with fields, update root-level field\n          setUser(prev => ({\n            ...prev,\n            [currentPrompt.field]: updateData[currentPrompt.field]\n          }));\n        } else {\n          setUser(prev => ({\n            ...prev,\n            [currentPrompt.category]: {\n              ...(prev[currentPrompt.category] || {}),\n              [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\n            }\n          }));\n        }\n      }\n\n      // API call happens in background - DON'T update user context to avoid re-renders\n      await updateUserProfile(updateData);\n\n      // Record answered prompt\n      const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      answeredPrompts.push(currentPrompt.id);\n      localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\n      localStorage.setItem('lastPromptTime', Date.now().toString());\n\n      // Short delay before moving to next question for smooth transition\n      setTimeout(() => {\n        if (forNewUser) {\n          setPromptIndex(prev => prev + 1);\n        } else {\n          handleComplete();\n        }\n        // Reset states for next question\n        setIsProcessing(false);\n        setResponse('');\n      }, 300);\n    } catch (err) {\n      console.error('Error updating profile with prompt response:', err);\n      // Reset processing state on error with a delay to prevent flashing\n      setTimeout(() => {\n        setIsProcessing(false);\n      }, 200);\n    }\n  }, [response, currentPrompt, user, setUser, forNewUser, handleComplete]);\n  const handleOptionSelect = useCallback(option => {\n    if (isProcessing) return; // Prevent multiple selections\n\n    setResponse(option);\n    setIsProcessing(true);\n\n    // Add a smooth visual feedback delay before processing\n    setTimeout(() => {\n      handleSubmit(option); // Pass the option directly\n    }, 500); // Visual feedback for 0.5 seconds\n  }, [isProcessing, handleSubmit]);\n  const handleSkip = useCallback(() => {\n    if (forNewUser) {\n      setPromptIndex(prev => prev + 1);\n    } else {\n      setCurrentPrompt(null);\n    }\n  }, [forNewUser]);\n\n  // Show match improvement results\n  if (matchImprovementData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-improvement-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDF89 Great! Your profile just got better!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Here's how your responses are helping us find better matches:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [\"+\", matchImprovementData.matchQualityIncrease, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Match Quality Increase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [\"+\", matchImprovementData.newPotentialMatches]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"New Potential Matches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [matchImprovementData.profileCompleteness, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Profile Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-explanation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCCA Your answers help our algorithm understand your preferences better. The more you tell us, the better matches we can find!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"continue-button\",\n        onClick: () => setMatchImprovementData(null),\n        children: \"Continue to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentPrompt || !user) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-prompt-container enhanced\",\n    children: [forNewUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionnaire-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", promptIndex + 1, \" of \", prompts.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [progress, \"% complete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-prompt-card enhanced\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: forNewUser ? '👋 Let\\'s get to know you!' : '💡 Quick Question'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"importance-indicator\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `importance-badge ${currentPrompt.importance}`,\n              children: currentPrompt.importance === 'high' ? '⭐ Important' : '📈 Helpful'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-question\",\n          children: currentPrompt.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 21\n        }, this), currentPrompt.explanation && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-explanation\",\n          children: currentPrompt.explanation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-options enhanced\",\n          children: currentPrompt.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `prompt-option enhanced \n                                    ${response === option ? 'selected' : ''} \n                                    ${isProcessing ? 'processing' : ''}\n                                    ${isProcessing && response !== option ? 'disabled' : ''}\n                                `,\n            onClick: () => handleOptionSelect(option),\n            disabled: isProcessing,\n            children: [option, response === option && isProcessing && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-check\",\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-actions enhanced\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prompt-skip enhanced\",\n            onClick: handleSkip,\n            disabled: isProcessing,\n            children: \"Skip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 21\n        }, this), forNewUser && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-note enhanced\",\n          children: \"\\uD83D\\uDCA1 Each answer helps us find friends who truly match your personality and preferences.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfilePrompts, \"Fis//voClmoIpzJzmz8b/UMVxCk=\", false, function () {\n  return [useAuth];\n});\n_c = ProfilePrompts;\nexport default ProfilePrompts;\nvar _c;\n$RefreshReg$(_c, \"ProfilePrompts\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useAuth","updateUserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfilePrompts","forNewUser","onComplete","_s","user","setUser","setIsNewUser","currentPrompt","setCurrentPrompt","response","setResponse","submitted","setSubmitted","promptIndex","setPromptIndex","loading","setLoading","progress","setProgress","matchImprovementData","setMatchImprovementData","isProcessing","setIsProcessing","isTransitioning","setIsTransitioning","allNewUserPrompts","id","question","options","category","field","mapping","importance","explanation","newUserPrompts","shuffled","i","length","j","Math","floor","random","slice","existingUserPrompts","prompts","round","handleComplete","questionnaireComplete","console","log","error","prev","lastQuestionnaireDate","Date","improvementData","questionsAnswered","matchQualityIncrease","newPotentialMatches","profileCompleteness","shouldShowPrompt","lastPromptTime","localStorage","getItem","timeSinceLastPrompt","now","parseInt","oneDayInMs","answeredPromptIds","JSON","parse","eligiblePrompts","filter","prompt","includes","randomIndex","handleSubmit","selectedOption","responseToUse","updateData","currentValues","values","_currentPrompt$mappin","mappedValue","_user$currentPrompt$c","Array","isArray","answeredPrompts","push","setItem","stringify","toString","setTimeout","err","handleOptionSelect","option","handleSkip","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","map","index","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Profile/ProfilePromptsEnhanced.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { updateUserProfile } from '../../services/api';\r\nimport '../../styles/profile.css';\r\n\r\nconst ProfilePrompts = ({ forNewUser, onComplete }) => {\r\n    const { user, setUser, setIsNewUser } = useAuth();\r\n    const [currentPrompt, setCurrentPrompt] = useState(null);\r\n    const [response, setResponse] = useState('');\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [promptIndex, setPromptIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [matchImprovementData, setMatchImprovementData] = useState(null);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isTransitioning, setIsTransitioning] = useState(false);\r\n\r\n    // Expanded question pool for new users (20+ questions, will select 10 randomly)\r\n    const allNewUserPrompts = useMemo(() => [\r\n        {\r\n            id: 'communication_style',\r\n            question: 'How do you prefer to communicate with friends?',\r\n            options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups', 'Social media'],\r\n            category: 'socialPreferences',\r\n            field: 'communicationStyle',\r\n            mapping: {\r\n                'Text messaging': 'Text-heavy',\r\n                'Voice calls': 'Voice calls',\r\n                'Video chats': 'Video calls',\r\n                'In-person meetups': 'In-person meetups',\r\n                'Social media': 'Text-heavy'\r\n            },\r\n            importance: 'high',\r\n            explanation: 'This helps us match you with friends who communicate in similar ways.'\r\n        },\r\n        {\r\n            id: 'social_energy',\r\n            question: 'After socializing, do you typically feel:',\r\n            options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\r\n            category: 'socialPreferences',\r\n            field: 'socialEnergy',\r\n            mapping: {\r\n                'Energized and ready for more': 'Extrovert',\r\n                'It depends on the people': 'Ambivert',\r\n                'Drained and needing alone time': 'Introvert'\r\n            },\r\n            importance: 'high',\r\n            explanation: 'Understanding your social energy helps us find compatible friends.'\r\n        },\r\n        {\r\n            id: 'weekend_activity',\r\n            question: 'What\\'s your ideal weekend activity?',\r\n            options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports', 'Creative projects'],\r\n            category: 'lifestyle',\r\n            field: 'weekendPlans',\r\n            importance: 'high',\r\n            explanation: 'Shared weekend preferences lead to better friendships.'\r\n        },\r\n        {\r\n            id: 'friendship_value',\r\n            question: 'What do you value most in a friendship?',\r\n            options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support', 'Fun and humor'],\r\n            category: 'values',\r\n            field: null,\r\n            importance: 'high',\r\n            explanation: 'Core values alignment is crucial for lasting friendships.'\r\n        },\r\n        {\r\n            id: 'activity_level',\r\n            question: 'How would you describe your activity level?',\r\n            options: ['Very active (daily exercise)', 'Moderately active (few times a week)', 'Occasionally active', 'Prefer low-activity'],\r\n            category: 'lifestyle',\r\n            field: 'activityLevel',\r\n            mapping: {\r\n                'Very active (daily exercise)': 'Very active',\r\n                'Moderately active (few times a week)': 'Moderately active',\r\n                'Occasionally active': 'Low activity',\r\n                'Prefer low-activity': 'Low activity'\r\n            },\r\n            importance: 'high',\r\n            explanation: 'Activity level compatibility helps with shared activities.'\r\n        },\r\n        {\r\n            id: 'time_availability',\r\n            question: 'When are you usually available to hang out?',\r\n            options: ['Weekday evenings', 'Weekend days', 'Weekend evenings', 'Flexible schedule', 'Lunch breaks'],\r\n            category: 'lifestyle',\r\n            field: 'availability',\r\n            importance: 'medium',\r\n            explanation: 'Matching schedules makes it easier to spend time together.'\r\n        },\r\n        {\r\n            id: 'group_size_preference',\r\n            question: 'Do you prefer hanging out:',\r\n            options: ['One-on-one', 'Small groups (2-4 people)', 'Medium groups (5-8 people)', 'Large groups (9+ people)', 'No preference'],\r\n            category: 'socialPreferences',\r\n            field: 'groupSizePreference',\r\n            importance: 'medium',\r\n            explanation: 'Group size preferences help us suggest the right social settings.'\r\n        },\r\n        {\r\n            id: 'conversation_topics',\r\n            question: 'What topics do you enjoy discussing most?',\r\n            options: ['Current events', 'Personal growth', 'Hobbies & interests', 'Work & career', 'Pop culture', 'Deep philosophical topics'],\r\n            category: 'socialPreferences',\r\n            field: 'conversationTopics',\r\n            importance: 'medium',\r\n            explanation: 'Shared conversation interests lead to more engaging interactions.'\r\n        },\r\n        {\r\n            id: 'music_preference',\r\n            question: 'What role does music play in your life?',\r\n            options: ['Essential part of my day', 'Background noise', 'Special occasions only', 'Love discovering new music', 'Not really into music'],\r\n            category: 'interests',\r\n            field: 'musicPreference',\r\n            importance: 'low',\r\n            explanation: 'Music preferences can be a great conversation starter.'\r\n        },\r\n        {\r\n            id: 'food_adventure',\r\n            question: 'How adventurous are you with food?',\r\n            options: ['Love trying new cuisines', 'Somewhat adventurous', 'Stick to what I know', 'Very picky eater', 'Dietary restrictions limit me'],\r\n            category: 'lifestyle',\r\n            field: 'foodAdventure',\r\n            importance: 'low',\r\n            explanation: 'Food preferences matter for social outings.'\r\n        },\r\n        {\r\n            id: 'humor_style',\r\n            question: 'What kind of humor do you appreciate?',\r\n            options: ['Witty and clever', 'Silly and goofy', 'Dark humor', 'Sarcastic', 'Wholesome and clean', 'Puns and wordplay'],\r\n            category: 'socialPreferences',\r\n            field: 'humorStyle',\r\n            importance: 'medium',\r\n            explanation: 'Shared sense of humor strengthens friendships.'\r\n        },\r\n        {\r\n            id: 'conflict_resolution',\r\n            question: 'When there\\'s a disagreement, you prefer to:',\r\n            options: ['Talk it out immediately', 'Take time to cool down first', 'Avoid confrontation', 'Seek compromise', 'Agree to disagree'],\r\n            category: 'socialPreferences',\r\n            field: 'conflictStyle',\r\n            importance: 'high',\r\n            explanation: 'Understanding conflict styles helps maintain healthy friendships.'\r\n        },\r\n        {\r\n            id: 'spontaneity',\r\n            question: 'How spontaneous are you?',\r\n            options: ['Love last-minute plans', 'Okay with some spontaneity', 'Prefer advance notice', 'Need to plan everything', 'Depends on my mood'],\r\n            category: 'lifestyle',\r\n            field: 'spontaneity',\r\n            importance: 'medium',\r\n            explanation: 'Planning preferences affect how you socialize.'\r\n        },\r\n        {\r\n            id: 'pet_preference',\r\n            question: 'How do you feel about pets?',\r\n            options: ['Can\\'t live without them', 'Love them but don\\'t have any', 'They\\'re okay', 'Not a fan', 'Allergic or can\\'t have them'],\r\n            category: 'lifestyle',\r\n            field: 'petPreference',\r\n            importance: 'low',\r\n            explanation: 'Pet preferences can influence hangout locations.'\r\n        },\r\n        {\r\n            id: 'learning_style',\r\n            question: 'What\\'s your favorite way to learn new things?',\r\n            options: ['Hands-on experience', 'Reading and research', 'Video tutorials', 'Taking classes', 'Learning from others'],\r\n            category: 'interests',\r\n            field: 'learningStyle',\r\n            importance: 'low',\r\n            explanation: 'Learning preferences can lead to shared activities.'\r\n        },\r\n        {\r\n            id: 'morning_night',\r\n            question: 'Are you a morning person or night owl?',\r\n            options: ['Early bird (up before 7am)', 'Morning person (7-9am)', 'Midday person', 'Night owl (active after 10pm)', 'Varies by day'],\r\n            category: 'lifestyle',\r\n            field: 'schedule',\r\n            mapping: {\r\n                'Early bird (up before 7am)': 'Morning person',\r\n                'Morning person (7-9am)': 'Morning person',\r\n                'Midday person': 'Flexible',\r\n                'Night owl (active after 10pm)': 'Night owl',\r\n                'Varies by day': 'Flexible'\r\n            },\r\n            importance: 'medium',\r\n            explanation: 'Schedule alignment makes planning easier.'\r\n        },\r\n        {\r\n            id: 'stress_relief',\r\n            question: 'How do you prefer to de-stress?',\r\n            options: ['Exercise', 'Talking with friends', 'Alone time', 'Creative activities', 'Entertainment (TV/games)', 'Nature and outdoors'],\r\n            category: 'lifestyle',\r\n            field: 'stressRelief',\r\n            importance: 'medium',\r\n            explanation: 'Understanding stress relief helps in supporting each other.'\r\n        },\r\n        {\r\n            id: 'social_media_use',\r\n            question: 'How active are you on social media?',\r\n            options: ['Very active (multiple posts/day)', 'Regularly active', 'Occasional lurker', 'Rarely use it', 'Don\\'t have social media'],\r\n            category: 'socialPreferences',\r\n            field: 'socialMediaUse',\r\n            importance: 'low',\r\n            explanation: 'Social media habits affect how you stay connected.'\r\n        },\r\n        {\r\n            id: 'travel_interest',\r\n            question: 'How interested are you in travel?',\r\n            options: ['Love traveling (always planning trips)', 'Enjoy occasional trips', 'Prefer staycations', 'Not really into travel', 'Want to but can\\'t currently'],\r\n            category: 'interests',\r\n            field: 'travelInterest',\r\n            importance: 'medium',\r\n            explanation: 'Travel interests can lead to shared adventures.'\r\n        },\r\n        {\r\n            id: 'support_style',\r\n            question: 'When a friend is going through a tough time, you:',\r\n            options: ['Offer practical solutions', 'Listen and empathize', 'Try to cheer them up', 'Give them space', 'Share similar experiences'],\r\n            category: 'socialPreferences',\r\n            field: 'supportStyle',\r\n            importance: 'high',\r\n            explanation: 'Support styles affect how friendships deepen.'\r\n        }\r\n    ], []);\r\n\r\n    // Randomly select 10 questions from the pool for new users\r\n    const newUserPrompts = useMemo(() => {\r\n        if (!forNewUser) return [];\r\n        \r\n        // Shuffle the array using Fisher-Yates algorithm\r\n        const shuffled = [...allNewUserPrompts];\r\n        for (let i = shuffled.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n        }\r\n        \r\n        // Return first 10 questions\r\n        return shuffled.slice(0, 10);\r\n    }, [allNewUserPrompts, forNewUser]);\r\n\r\n    // Shorter questionnaire for existing users (2-3 questions)\r\n    const existingUserPrompts = useMemo(() => [\r\n        {\r\n            id: 'recent_interests',\r\n            question: 'What new interests have you developed lately?',\r\n            options: ['Fitness & wellness', 'Creative arts', 'Technology', 'Travel planning', 'Cooking', 'Gaming', 'Reading', 'None recently'],\r\n            category: 'interests',\r\n            field: 'recentInterests',\r\n            importance: 'medium',\r\n            explanation: 'New interests help us find fresh connections.'\r\n        },\r\n        {\r\n            id: 'friendship_goals',\r\n            question: 'What are you looking for in new friendships right now?',\r\n            options: ['Activity partners', 'Deep conversations', 'Casual hangouts', 'Professional networking', 'Study/work buddies'],\r\n            category: 'socialPreferences',\r\n            field: 'friendshipGoals',\r\n            importance: 'high',\r\n            explanation: 'Understanding your current friendship goals helps us make better matches.'\r\n        },\r\n        {\r\n            id: 'communication_frequency',\r\n            question: 'How often do you like to stay in touch with friends?',\r\n            options: ['Daily check-ins', 'Few times a week', 'Weekly catch-ups', 'Bi-weekly', 'Monthly or less'],\r\n            category: 'socialPreferences',\r\n            field: 'communicationFrequency',\r\n            importance: 'medium',\r\n            explanation: 'Communication frequency preferences prevent mismatched expectations.'\r\n        }\r\n    ], []);\r\n\r\n    // Memoize the prompts array based on user type\r\n    const prompts = useMemo(() => {\r\n        return forNewUser ? newUserPrompts : existingUserPrompts;\r\n    }, [forNewUser, newUserPrompts, existingUserPrompts]);\r\n\r\n    // Calculate progress for new users\r\n    useEffect(() => {\r\n        if (forNewUser) {\r\n            setProgress(Math.round((promptIndex / prompts.length) * 100));\r\n        }\r\n    }, [promptIndex, prompts.length, forNewUser]);\r\n\r\n    // Define handleComplete before it's used in useEffect\r\n    const handleComplete = useCallback(async () => {\r\n        // Mark questionnaire as complete in the database\r\n        try {\r\n            await updateUserProfile({ questionnaireComplete: true });\r\n            console.log('Questionnaire marked as complete');\r\n        } catch (error) {\r\n            console.error('Error marking questionnaire complete:', error);\r\n        }\r\n        \r\n        if (setIsNewUser) {\r\n            setIsNewUser(false);\r\n        }\r\n        // Also update user context to reflect questionnaire completion\r\n        if (setUser) {\r\n            setUser(prev => ({\r\n                ...prev,\r\n                lastQuestionnaireDate: new Date()\r\n            }));\r\n        }\r\n        if (onComplete) {\r\n            onComplete();\r\n        }\r\n        \r\n        // Show match improvement data\r\n        const improvementData = {\r\n            questionsAnswered: forNewUser ? prompts.length : 1,\r\n            matchQualityIncrease: forNewUser ? 45 : 15,\r\n            newPotentialMatches: forNewUser ? 12 : 3,\r\n            profileCompleteness: forNewUser ? 85 : (user.profileCompleteness || 60) + 10\r\n        };\r\n        setMatchImprovementData(improvementData);\r\n    }, [setIsNewUser, onComplete, forNewUser, prompts.length, user, setUser]);\r\n\r\n    // Initialize prompt for user\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        \r\n        if (forNewUser) {\r\n            if (promptIndex < prompts.length) {\r\n                setCurrentPrompt(prompts[promptIndex]);\r\n                setResponse('');\r\n            } else {\r\n                // All prompts completed for new user\r\n                handleComplete();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // For existing users, show prompts occasionally\r\n        const shouldShowPrompt = () => {\r\n            const lastPromptTime = localStorage.getItem('lastPromptTime');\r\n            if (lastPromptTime) {\r\n                const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\r\n                const oneDayInMs = 24 * 60 * 60 * 1000;\r\n                if (timeSinceLastPrompt < oneDayInMs) {\r\n                    return false;\r\n                }\r\n            }\r\n            return Math.random() < 0.3;\r\n        };\r\n\r\n        if (shouldShowPrompt()) {\r\n            const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            const eligiblePrompts = prompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\r\n            \r\n            if (eligiblePrompts.length > 0) {\r\n                const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\r\n                setCurrentPrompt(eligiblePrompts[randomIndex]);\r\n                setResponse('');\r\n            }\r\n        }\r\n    }, [user, promptIndex, forNewUser, prompts, handleComplete]);\r\n\r\n    const handleSubmit = useCallback(async (selectedOption = null) => {\r\n        const responseToUse = selectedOption || response;\r\n        if (!responseToUse || !currentPrompt) return;\r\n        \r\n        try {\r\n            const updateData = {};\r\n            \r\n            // Special handling for values array (when field is null)\r\n            if (currentPrompt.category === 'values' && currentPrompt.field === null) {\r\n                // Add to values array if not already present\r\n                const currentValues = user.values || [];\r\n                if (!currentValues.includes(responseToUse)) {\r\n                    updateData.values = [...currentValues, responseToUse];\r\n                } else {\r\n                    updateData.values = currentValues; // No change needed\r\n                }\r\n            } else if (currentPrompt.category === 'interests' && currentPrompt.field) {\r\n                // Special handling for interests - field goes to root level, not nested\r\n                const mappedValue = currentPrompt.mapping?.[responseToUse] || responseToUse;\r\n                updateData[currentPrompt.field] = mappedValue;\r\n            } else {\r\n                // Create nested structure if needed\r\n                if (!user[currentPrompt.category]) {\r\n                    updateData[currentPrompt.category] = {};\r\n                } else {\r\n                    updateData[currentPrompt.category] = { ...user[currentPrompt.category] };\r\n                }\r\n                \r\n                // Handle mapped values\r\n                if (currentPrompt.mapping && currentPrompt.mapping[responseToUse]) {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[responseToUse];\r\n                } else if (Array.isArray(user[currentPrompt.category]?.[currentPrompt.field])) {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = [\r\n                        ...(user[currentPrompt.category][currentPrompt.field] || []),\r\n                        responseToUse\r\n                    ];\r\n                } else {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = responseToUse;\r\n                }\r\n            }\r\n            \r\n            // Update user context immediately for responsiveness\r\n            if (setUser) {\r\n                if (currentPrompt.category === 'values' && currentPrompt.field === null) {\r\n                    setUser(prev => ({\r\n                        ...prev,\r\n                        values: updateData.values\r\n                    }));\r\n                } else if (currentPrompt.category === 'interests' && currentPrompt.field) {\r\n                    // For interests with fields, update root-level field\r\n                    setUser(prev => ({\r\n                        ...prev,\r\n                        [currentPrompt.field]: updateData[currentPrompt.field]\r\n                    }));\r\n                } else {\r\n                    setUser(prev => ({\r\n                        ...prev,\r\n                        [currentPrompt.category]: {\r\n                            ...(prev[currentPrompt.category] || {}),\r\n                            [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n            \r\n            // API call happens in background - DON'T update user context to avoid re-renders\r\n            await updateUserProfile(updateData);\r\n            \r\n            // Record answered prompt\r\n            const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            answeredPrompts.push(currentPrompt.id);\r\n            localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\r\n            localStorage.setItem('lastPromptTime', Date.now().toString());\r\n            \r\n            // Short delay before moving to next question for smooth transition\r\n            setTimeout(() => {\r\n                if (forNewUser) {\r\n                    setPromptIndex(prev => prev + 1);\r\n                } else {\r\n                    handleComplete();\r\n                }\r\n                // Reset states for next question\r\n                setIsProcessing(false);\r\n                setResponse('');\r\n            }, 300);\r\n            \r\n        } catch (err) {\r\n            console.error('Error updating profile with prompt response:', err);\r\n            // Reset processing state on error with a delay to prevent flashing\r\n            setTimeout(() => {\r\n                setIsProcessing(false);\r\n            }, 200);\r\n        }\r\n    }, [response, currentPrompt, user, setUser, forNewUser, handleComplete]);\r\n\r\n    const handleOptionSelect = useCallback((option) => {\r\n        if (isProcessing) return; // Prevent multiple selections\r\n        \r\n        setResponse(option);\r\n        setIsProcessing(true);\r\n        \r\n        // Add a smooth visual feedback delay before processing\r\n        setTimeout(() => {\r\n            handleSubmit(option); // Pass the option directly\r\n        }, 500); // Visual feedback for 0.5 seconds\r\n    }, [isProcessing, handleSubmit]);\r\n\r\n    const handleSkip = useCallback(() => {\r\n        if (forNewUser) {\r\n            setPromptIndex(prev => prev + 1);\r\n        } else {\r\n            setCurrentPrompt(null);\r\n        }\r\n    }, [forNewUser]);\r\n\r\n    // Show match improvement results\r\n    if (matchImprovementData) {\r\n        return (\r\n            <div className=\"match-improvement-results\">\r\n                <div className=\"improvement-header\">\r\n                    <h3>🎉 Great! Your profile just got better!</h3>\r\n                    <p>Here's how your responses are helping us find better matches:</p>\r\n                </div>\r\n                \r\n                <div className=\"improvement-stats\">\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">+{matchImprovementData.matchQualityIncrease}%</div>\r\n                        <div className=\"stat-label\">Match Quality Increase</div>\r\n                    </div>\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">+{matchImprovementData.newPotentialMatches}</div>\r\n                        <div className=\"stat-label\">New Potential Matches</div>\r\n                    </div>\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">{matchImprovementData.profileCompleteness}%</div>\r\n                        <div className=\"stat-label\">Profile Complete</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"improvement-explanation\">\r\n                    <p>\r\n                        📊 Your answers help our algorithm understand your preferences better. \r\n                        The more you tell us, the better matches we can find!\r\n                    </p>\r\n                </div>\r\n                \r\n                <button \r\n                    className=\"continue-button\"\r\n                    onClick={() => setMatchImprovementData(null)}\r\n                >\r\n                    Continue to Dashboard\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!currentPrompt || !user) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"profile-prompt-container enhanced\">\r\n            {/* Progress bar for new users */}\r\n            {forNewUser && (\r\n                <div className=\"questionnaire-progress\">\r\n                    <div className=\"progress-header\">\r\n                        <span>Question {promptIndex + 1} of {prompts.length}</span>\r\n                        <span>{progress}% complete</span>\r\n                    </div>\r\n                    <div className=\"progress-bar\">\r\n                        <div \r\n                            className=\"progress-fill\" \r\n                            style={{ width: `${progress}%` }}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            \r\n            <div className=\"profile-prompt-card enhanced\">\r\n                <>\r\n                    <div className=\"prompt-header\">\r\n                        <h3>{forNewUser ? '👋 Let\\'s get to know you!' : '💡 Quick Question'}</h3>\r\n                        <div className=\"importance-indicator\">\r\n                            <span className={`importance-badge ${currentPrompt.importance}`}>\r\n                                {currentPrompt.importance === 'high' ? '⭐ Important' : '📈 Helpful'}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p className=\"prompt-question\">{currentPrompt.question}</p>\r\n                    \r\n                    {currentPrompt.explanation && (\r\n                        <p className=\"prompt-explanation\">{currentPrompt.explanation}</p>\r\n                    )}\r\n                    \r\n                    <div className=\"prompt-options enhanced\">\r\n                        {currentPrompt.options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className={`prompt-option enhanced \r\n                                    ${response === option ? 'selected' : ''} \r\n                                    ${isProcessing ? 'processing' : ''}\r\n                                    ${isProcessing && response !== option ? 'disabled' : ''}\r\n                                `}\r\n                                onClick={() => handleOptionSelect(option)}\r\n                                disabled={isProcessing}\r\n                            >\r\n                                {option}\r\n                                {response === option && isProcessing && (\r\n                                    <span className=\"option-check\">✓</span>\r\n                                )}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div className=\"prompt-actions enhanced\">\r\n                        <button \r\n                            className=\"prompt-skip enhanced\"\r\n                            onClick={handleSkip}\r\n                            disabled={isProcessing}\r\n                        >\r\n                            Skip\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    {forNewUser && (\r\n                        <p className=\"prompt-note enhanced\">\r\n                            💡 Each answer helps us find friends who truly match your personality and preferences.\r\n                        </p>\r\n                    )}\r\n                </>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePrompts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}