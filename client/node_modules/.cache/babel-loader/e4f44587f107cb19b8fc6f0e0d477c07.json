{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Messaging\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sendMessage, receiveMessages, connectSocket, disconnectSocket, markMessagesAsRead, onMessagesRead, onMessageSent, onMessageError, sendTypingIndicator, onUserTyping, notifyChatOpened, onReadStatusSync, getSocket, createConversationId } from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport { trackMessageSent, trackMessageReceived } from '../../services/behaviorTracking';\nimport '../../styles/chat.css';\n\n// Safe time formatter utility function\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formatTime = dateObj => {\n  try {\n    if (!dateObj) return '';\n\n    // If it's not a Date object, try to convert it\n    const date = dateObj instanceof Date ? dateObj : new Date(dateObj);\n\n    // Check if it's a valid date\n    if (isNaN(date.getTime())) return '';\n\n    // Format the time\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    console.warn('Error formatting time:', error);\n    return '';\n  }\n};\nconst ChatInterface = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    friendId\n  } = useParams();\n  const history = useHistory();\n  const [friend, setFriend] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Setup socket connection and handlers\n  useEffect(() => {\n    // Connect to socket when component mounts\n    connectSocket();\n    const handleReceiveMessage = message => {\n      console.log('Received message:', message);\n\n      // Format the timestamp correctly with error handling\n      let formattedMessage = {\n        ...message\n      };\n      try {\n        // Try to format timestamp as Date\n        if (message.timestamp) {\n          formattedMessage.timestamp = new Date(message.timestamp);\n          if (isNaN(formattedMessage.timestamp.getTime())) {\n            console.warn('Invalid timestamp, using current time instead');\n            formattedMessage.timestamp = new Date();\n          }\n        } else {\n          formattedMessage.timestamp = new Date();\n        }\n\n        // Try to format readAt as Date if it exists\n        if (message.readAt) {\n          formattedMessage.readAt = new Date(message.readAt);\n          if (isNaN(formattedMessage.readAt.getTime())) {\n            formattedMessage.readAt = null;\n          }\n        } else {\n          formattedMessage.readAt = null;\n        }\n      } catch (error) {\n        console.error('Error formatting message dates:', error);\n        formattedMessage.timestamp = new Date();\n        formattedMessage.readAt = null;\n      }\n      setMessages(prevMessages => [...prevMessages, formattedMessage]);\n\n      // Track received message for behavioral learning\n      if (message.sender === friendId) {\n        try {\n          trackMessageReceived(formattedMessage, friendId);\n\n          // Update debug info for received messages too\n          const messageText = formattedMessage.content.toLowerCase();\n          const topics = [{\n            name: 'music',\n            keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album']\n          }, {\n            name: 'movies',\n            keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director']\n          }, {\n            name: 'travel',\n            keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination']\n          }, {\n            name: 'food',\n            keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal']\n          }, {\n            name: 'tech',\n            keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device']\n          }, {\n            name: 'sports',\n            keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise']\n          }];\n          const matchedTopics = {};\n          topics.forEach(topic => {\n            if (topic.keywords.some(keyword => messageText.includes(keyword))) {\n              matchedTopics[topic.name] = true;\n            }\n          });\n          setDebugInfo(prev => ({\n            ...prev,\n            topicMatches: {\n              ...prev.topicMatches,\n              ...matchedTopics\n            },\n            lastTrackedMessage: formattedMessage.content,\n            trackedConversations: prev.trackedConversations + 1\n          }));\n        } catch (error) {\n          console.error('Error tracking received message:', error);\n        }\n      }\n\n      // If we receive a message from the friend we're chatting with, mark it as read\n      if (message.sender === friendId && user !== null && user !== void 0 && user.id) {\n        console.log('Marking message as read');\n        markMessagesAsRead({\n          userId: user.id,\n          friendId\n        });\n      }\n    };\n    const handleMessageSent = confirmation => {\n      console.log('Message sent confirmation:', confirmation);\n      // Update the message in our state with the server-generated ID\n      setMessages(prevMessages => prevMessages.map(msg => {\n        // Match by timestamp if no _id, using getTime for accurate comparison\n        const msgTime = msg.timestamp.getTime();\n        const confTime = new Date(confirmation.timestamp).getTime();\n        // Allow for small time differences (within 1 second)\n        const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n        if (msg.isSent && !msg._id && isTimeMatch) {\n          return {\n            ...msg,\n            _id: confirmation._id,\n            timestamp: new Date(confirmation.timestamp),\n            read: confirmation.read || false,\n            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n          };\n        }\n        return msg;\n      }));\n    };\n    const handleMessageError = error => {\n      setError(`Error sending message: ${error.message}`);\n      setTimeout(() => setError(null), 5000);\n    };\n    const handleMessagesRead = data => {\n      if (data.by === friendId) {\n        console.log('Messages read by friend:', data);\n\n        // Ensure readAt is properly formatted as a Date\n        let readAtDate;\n        try {\n          // If readAt exists, try to convert it to a Date\n          readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n\n          // Check if it's a valid date\n          if (isNaN(readAtDate.getTime())) {\n            console.warn('Invalid readAt date received:', data.readAt);\n            readAtDate = new Date();\n          }\n        } catch (error) {\n          console.error('Error parsing readAt date:', error);\n          readAtDate = new Date();\n        }\n\n        // Update read status of messages in state\n        setMessages(prevMessages => {\n          // Create a map of updated messages for quick lookup\n          const updatedMsgs = new Map();\n\n          // If we have detailed message data from the server, use it\n          if (data.messages && Array.isArray(data.messages)) {\n            data.messages.forEach(serverMsg => {\n              try {\n                // Parse the timestamps safely\n                let msgTimestamp = new Date();\n                let msgReadAt = readAtDate;\n                if (serverMsg.timestamp) {\n                  try {\n                    msgTimestamp = new Date(serverMsg.timestamp);\n                    if (isNaN(msgTimestamp.getTime())) msgTimestamp = new Date();\n                  } catch (e) {\n                    console.warn('Error parsing timestamp:', e);\n                  }\n                }\n                if (serverMsg.readAt) {\n                  try {\n                    msgReadAt = new Date(serverMsg.readAt);\n                    if (isNaN(msgReadAt.getTime())) msgReadAt = readAtDate;\n                  } catch (e) {\n                    console.warn('Error parsing readAt:', e);\n                  }\n                }\n                updatedMsgs.set(serverMsg._id, {\n                  ...serverMsg,\n                  read: true,\n                  readAt: msgReadAt,\n                  timestamp: msgTimestamp\n                });\n              } catch (e) {\n                console.error('Error processing message:', e);\n              }\n            });\n          }\n\n          // Handle resync operations more aggressively\n          if (data.isResync) {\n            console.log('Handling resync of read messages');\n            // For resyncs, force update all sender's messages as read\n            return prevMessages.map(msg => {\n              // If we have detailed data for this message, use it\n              if (msg._id && updatedMsgs.has(msg._id)) {\n                return updatedMsgs.get(msg._id);\n              }\n\n              // For resyncs, be more aggressive in marking sender's messages as read\n              if (msg.sender === (user === null || user === void 0 ? void 0 : user.id)) {\n                return {\n                  ...msg,\n                  read: true,\n                  readAt: readAtDate\n                };\n              }\n              return msg;\n            });\n          }\n\n          // Regular update for normal read receipts\n          return prevMessages.map(msg => {\n            // If we have detailed data for this message, use it\n            if (msg._id && updatedMsgs.has(msg._id)) {\n              return updatedMsgs.get(msg._id);\n            }\n\n            // Otherwise use the message ID list or just update based on sender\n            if (msg.sender === (user === null || user === void 0 ? void 0 : user.id) && !msg.read || data.messageIds && data.messageIds.includes(msg._id)) {\n              return {\n                ...msg,\n                read: true,\n                readAt: readAtDate\n              };\n            }\n            return msg;\n          });\n        });\n\n        // Force scroll to bottom to show the read status updates\n        scrollToBottom();\n      }\n    };\n    const handleUserTyping = data => {\n      if (data.sender === friendId) {\n        setIsTyping(true);\n\n        // Clear any existing timeout\n        if (typingTimeout) {\n          clearTimeout(typingTimeout);\n        }\n\n        // Set a timeout to clear the typing indicator after 3 seconds\n        const timeout = setTimeout(() => {\n          setIsTyping(false);\n        }, 3000);\n        setTypingTimeout(timeout);\n      }\n    };\n\n    // Handle read status sync events\n    const handleReadStatusSync = data => {\n      console.log('Received read status sync:', data);\n      if (data.messages && data.messages.length > 0) {\n        // Update messages with synced read statuses\n        setMessages(prevMessages => {\n          // Create a map of message IDs from the sync data\n          const syncedMessageMap = new Map();\n          data.messages.forEach(syncedMsg => {\n            syncedMessageMap.set(syncedMsg._id, {\n              ...syncedMsg,\n              timestamp: new Date(syncedMsg.timestamp),\n              readAt: syncedMsg.readAt ? new Date(syncedMsg.readAt) : null\n            });\n          });\n\n          // Update local messages with synced read statuses\n          return prevMessages.map(msg => {\n            if (msg._id && syncedMessageMap.has(msg._id)) {\n              const syncedMsg = syncedMessageMap.get(msg._id);\n              return {\n                ...msg,\n                read: syncedMsg.read,\n                readAt: syncedMsg.readAt\n              };\n            }\n            return msg;\n          });\n        });\n      }\n    };\n\n    // Register socket event handlers\n    receiveMessages(handleReceiveMessage);\n    onMessageSent(handleMessageSent);\n    onMessageError(handleMessageError);\n    onMessagesRead(handleMessagesRead);\n    onUserTyping(handleUserTyping);\n    onReadStatusSync(handleReadStatusSync);\n\n    // Notify server that user is online if we have a user ID\n    if (user && user.id) {\n      const socket = getSocket();\n      socket.emit('user_login', user.id);\n    }\n    return () => {\n      // Cleanup the socket connection when component unmounts\n      disconnectSocket();\n\n      // Clear any existing typing timeout to prevent memory leaks\n      if (typingTimeout) {\n        clearTimeout(typingTimeout);\n      }\n    };\n  }, [user, friendId, typingTimeout]);\n\n  // Load friend details and chat history\n  useEffect(() => {\n    const loadFriendAndChat = async () => {\n      if (!friendId || !user) return;\n      setLoading(true);\n      try {\n        // Import this function at the top of the file\n        const {\n          getFriendById\n        } = await import('../../services/api');\n\n        // Get friend details\n        const friendData = await getFriendById(friendId);\n        setFriend(friendData);\n\n        // Get chat history\n        const chatHistory = await getChatHistory(friendId);\n\n        // Notify server that chat is opened and sync read statuses\n        if (user.id) {\n          try {\n            console.log('Notifying chat opened and syncing read statuses');\n\n            // This will trigger the server to mark messages as read AND sync read statuses\n            notifyChatOpened(user.id, friendId);\n\n            // Also emit the socket event for immediate sync\n            const socket = getSocket();\n            if (socket && socket.connected) {\n              socket.emit('chatOpened', {\n                conversationId: createConversationId(user.id, friendId),\n                userId: user.id,\n                friendId: friendId\n              });\n            }\n\n            // Also use the traditional method as backup\n            markMessagesAsRead({\n              userId: user.id,\n              friendId\n            });\n          } catch (err) {\n            console.error('Error with initial read marking:', err);\n          }\n        }\n\n        // Format the timestamps as Date objects with error handling\n        const formattedHistory = chatHistory.map(msg => {\n          let timestamp, readAt;\n          try {\n            timestamp = msg.timestamp ? new Date(msg.timestamp) : new Date();\n            if (isNaN(timestamp.getTime())) {\n              timestamp = new Date();\n            }\n          } catch (err) {\n            console.warn('Invalid timestamp for message:', msg);\n            timestamp = new Date();\n          }\n          try {\n            readAt = msg.readAt ? new Date(msg.readAt) : null;\n            if (readAt && isNaN(readAt.getTime())) {\n              readAt = null;\n            }\n          } catch (err) {\n            console.warn('Invalid readAt for message:', msg);\n            readAt = null;\n          }\n          return {\n            ...msg,\n            timestamp,\n            readAt\n          };\n        });\n        setMessages(formattedHistory);\n\n        // Mark messages as read when chat is opened\n        if (user.id) {\n          console.log('Marking messages as read on chat open');\n          try {\n            // First update via socket for real-time update to other user\n            markMessagesAsRead({\n              userId: user.id,\n              friendId\n            });\n\n            // Then update via API to ensure database is updated\n            await apiMarkMessagesAsRead(friendId);\n          } catch (err) {\n            console.error('Error marking messages as read:', err);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading chat data:', error);\n        setError('Failed to load chat data. Please try again.');\n        setTimeout(() => setError(null), 5000);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadFriendAndChat();\n  }, [friendId, user]);\n\n  // Create scrollToBottom function as a ref so we can call it from multiple places\n  const scrollToBottom = useCallback(() => {\n    // Try both methods to ensure scrolling works properly\n    setTimeout(() => {\n      // Method 1: Use messagesEndRef\n      if (messagesEndRef.current) {\n        messagesEndRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n\n      // Method 2: Use direct container scrolling (as backup)\n      const chatContainer = document.querySelector('.chat-messages');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    }, 100); // Small delay to ensure DOM updates have completed\n  }, []);\n\n  // Scroll to bottom of messages when they update or typing status changes\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping, scrollToBottom]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() && user && user.id && friendId) {\n      try {\n        const messageData = {\n          sender: user.id,\n          recipient: friendId,\n          content: newMessage\n        };\n        console.log('Sending message:', messageData);\n\n        // Send via socket\n        sendMessage(messageData);\n\n        // Add message to local state with a unique client-side ID\n        const clientMessageId = `temp-${Date.now()}`;\n        const newMsg = {\n          _id: null,\n          // Will be updated when server confirms\n          clientMessageId,\n          // Temporary client-side ID to help with matching\n          sender: user.id,\n          receiver: friendId,\n          content: newMessage,\n          timestamp: new Date(),\n          read: false,\n          readAt: null,\n          isSent: true\n        };\n\n        // Track this message for behavioral learning\n        try {\n          trackMessageSent(newMsg, friendId);\n        } catch (error) {\n          console.error('Error tracking sent message:', error);\n        }\n        setMessages(prevMessages => [...prevMessages, newMsg]);\n        setNewMessage('');\n\n        // Scroll to bottom\n        scrollToBottom();\n      } catch (error) {\n        console.error('Error sending message:', error);\n        setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n        setTimeout(() => setError(null), 5000);\n      }\n    }\n  };\n\n  // Handle back button to return to dashboard\n  const handleBack = () => {\n    history.push('/dashboard');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }, this), friend && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-friend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: friend.profilePicture || 'https://via.placeholder.com/40',\n          alt: friend.username,\n          className: \"chat-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: friend.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: friend.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 25\n        }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"debug-toggle\",\n          onClick: () => setShowDebugInfo(!showDebugInfo),\n          style: {\n            marginLeft: '10px',\n            background: '#f0f0f0',\n            border: '1px solid #ddd',\n            borderRadius: '4px',\n            padding: '2px 8px',\n            fontSize: '10px'\n          },\n          children: showDebugInfo ? 'Hide Debug' : 'Show Debug'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 13\n    }, this), process.env.NODE_ENV === 'development' && showDebugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-panel\",\n      style: {\n        position: 'absolute',\n        top: '60px',\n        right: '20px',\n        width: '300px',\n        padding: '10px',\n        background: 'rgba(0,0,0,0.8)',\n        color: '#00ff00',\n        fontFamily: 'monospace',\n        fontSize: '12px',\n        zIndex: 100,\n        borderRadius: '4px',\n        maxHeight: '400px',\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: '0 0 10px',\n          color: '#fff'\n        },\n        children: \"Behavior Tracking Debug\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Topics Detected:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            paddingLeft: '20px'\n          },\n          children: Object.keys(debugInfo.topicMatches).length > 0 ? Object.keys(debugInfo.topicMatches).map((topic, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: topic\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No topics detected yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Messages Tracked:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 28\n          }, this), \" \", debugInfo.trackedConversations]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 25\n        }, this), debugInfo.lastTrackedMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Last Tracked:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              wordBreak: 'break-word'\n            },\n            children: debugInfo.lastTrackedMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Live Topic Analysis:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: (() => {\n            try {\n              const localData = localStorage.getItem('devUserTracking');\n              if (!localData) return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No tracking data found\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 60\n              }, this);\n              const data = JSON.parse(localData);\n              if (!data.conversationTopics || Object.keys(data.conversationTopics).length === 0) {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No topics tracked yet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 48\n                }, this);\n              }\n              const topTopics = Object.entries(data.conversationTopics).sort((a, b) => b[1].count - a[1].count).slice(0, 5); // Show top 5 topics\n\n              return /*#__PURE__*/_jsxDEV(\"ul\", {\n                style: {\n                  paddingLeft: '20px',\n                  marginTop: '5px'\n                },\n                children: topTopics.map(([topic, details], idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    margin: '5px 0'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: topic\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 53\n                  }, this), \": \", details.count, \" mentions\", details.examples && details.examples.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      fontSize: '10px',\n                      color: '#aaa',\n                      marginLeft: '10px'\n                    },\n                    children: [\"e.g. \\\"\", details.examples[0].snippet, \"\\\"\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 643,\n                    columnNumber: 57\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 41\n              }, this);\n            } catch (error) {\n              console.error('Error displaying topics:', error);\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Error displaying topics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 44\n              }, this);\n            }\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '10px',\n            display: 'flex',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (window.inspectTrackingData) {\n                window.inspectTrackingData();\n                alert('Tracking data logged to console. Press F12 to view.');\n              } else {\n                alert('Debug utilities not loaded. Are you in development mode?');\n              }\n            },\n            style: {\n              background: '#444',\n              color: '#fff',\n              border: 'none',\n              padding: '5px 10px',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              flex: 1\n            },\n            children: \"Analyze Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (window.resetTrackingData) {\n                if (confirm('Are you sure you want to reset tracking data?')) {\n                  window.resetTrackingData();\n                  setDebugInfo({\n                    topicMatches: {},\n                    lastTrackedMessage: null,\n                    trackedConversations: 0\n                  });\n                  alert('Tracking data has been reset.');\n                }\n              } else {\n                alert('Debug utilities not loaded. Are you in development mode?');\n              }\n            },\n            style: {\n              background: '#f44336',\n              color: '#fff',\n              border: 'none',\n              padding: '5px 10px',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              flex: 1\n            },\n            children: \"Reset Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 27\n      }, this), messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Start the conversation!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 21\n      }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === user.id ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: formatTime(msg.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 33\n          }, this), msg.sender === user.id && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-status\",\n            children: msg.read ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-read\",\n              title: `Read at ${formatTime(msg.readAt) || 'unknown time'}`,\n              children: \"\\u2713\\u2713 Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-sent\",\n              children: \"\\u2713 Sent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 25\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(friend === null || friend === void 0 ? void 0 : friend.username) || 'Friend', \" is typing\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => {\n          setNewMessage(e.target.value);\n          // Debounce typing indicator to reduce socket traffic\n          if (user !== null && user !== void 0 && user.id && friendId) {\n            // Clear existing timeout if any\n            if (typingTimeout) {\n              clearTimeout(typingTimeout);\n            }\n\n            // Only send typing indicator every 1 second at most\n            const newTimeout = setTimeout(() => {\n              sendTypingIndicator(user.id, friendId);\n            }, 300);\n            setTypingTimeout(newTimeout);\n          }\n        },\n        placeholder: \"Type a message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !newMessage.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatInterface, \"0siy8Cz23S7b7vpZcrFmzXDyNnY=\", false, function () {\n  return [useAuth, useParams, useHistory];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useAuth","useParams","useHistory","sendMessage","receiveMessages","connectSocket","disconnectSocket","markMessagesAsRead","onMessagesRead","onMessageSent","onMessageError","sendTypingIndicator","onUserTyping","notifyChatOpened","onReadStatusSync","getSocket","createConversationId","getChatHistory","apiMarkMessagesAsRead","trackMessageSent","trackMessageReceived","jsxDEV","_jsxDEV","Fragment","_Fragment","formatTime","dateObj","date","Date","isNaN","getTime","toLocaleTimeString","hour","minute","error","console","warn","ChatInterface","_s","user","friendId","history","friend","setFriend","messages","setMessages","newMessage","setNewMessage","loading","setLoading","setError","isTyping","setIsTyping","typingTimeout","setTypingTimeout","messagesEndRef","handleReceiveMessage","message","log","formattedMessage","timestamp","readAt","prevMessages","sender","messageText","content","toLowerCase","topics","name","keywords","matchedTopics","forEach","topic","some","keyword","includes","setDebugInfo","prev","topicMatches","lastTrackedMessage","trackedConversations","id","userId","handleMessageSent","confirmation","map","msg","msgTime","confTime","isTimeMatch","Math","abs","isSent","_id","read","handleMessageError","setTimeout","handleMessagesRead","data","by","readAtDate","updatedMsgs","Map","Array","isArray","serverMsg","msgTimestamp","msgReadAt","e","set","isResync","has","get","messageIds","scrollToBottom","handleUserTyping","clearTimeout","timeout","handleReadStatusSync","length","syncedMessageMap","syncedMsg","socket","emit","loadFriendAndChat","getFriendById","friendData","chatHistory","connected","conversationId","err","formattedHistory","current","scrollIntoView","behavior","chatContainer","document","querySelector","scrollTop","scrollHeight","handleSendMessage","trim","messageData","recipient","clientMessageId","now","newMsg","receiver","handleBack","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","profilePicture","alt","username","location","process","env","NODE_ENV","setShowDebugInfo","showDebugInfo","style","marginLeft","background","border","borderRadius","padding","fontSize","position","top","right","width","color","fontFamily","zIndex","maxHeight","overflowY","margin","paddingLeft","Object","keys","debugInfo","i","marginTop","wordBreak","localData","localStorage","getItem","JSON","parse","conversationTopics","topTopics","entries","sort","a","b","count","slice","details","idx","examples","snippet","display","gap","window","inspectTrackingData","alert","cursor","flex","resetTrackingData","confirm","index","title","ref","type","value","onChange","target","newTimeout","placeholder","onKeyPress","key","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Messaging/ChatInterface.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { \n    sendMessage, \n    receiveMessages, \n    connectSocket, \n    disconnectSocket, \n    markMessagesAsRead,\n    onMessagesRead,\n    onMessageSent,\n    onMessageError,\n    sendTypingIndicator,\n    onUserTyping,\n    notifyChatOpened,\n    onReadStatusSync,\n    getSocket,\n    createConversationId\n} from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport { trackMessageSent, trackMessageReceived } from '../../services/behaviorTracking';\nimport '../../styles/chat.css';\n\n// Safe time formatter utility function\nconst formatTime = (dateObj) => {\n    try {\n        if (!dateObj) return '';\n        \n        // If it's not a Date object, try to convert it\n        const date = dateObj instanceof Date ? dateObj : new Date(dateObj);\n        \n        // Check if it's a valid date\n        if (isNaN(date.getTime())) return '';\n        \n        // Format the time\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } catch (error) {\n        console.warn('Error formatting time:', error);\n        return '';\n    }\n};\n\nconst ChatInterface = () => {\n    const { user } = useAuth();\n    const { friendId } = useParams();\n    const history = useHistory();\n    const [friend, setFriend] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingTimeout, setTypingTimeout] = useState(null);\n    const messagesEndRef = useRef(null);\n\n    // Setup socket connection and handlers\n    useEffect(() => {\n        // Connect to socket when component mounts\n        connectSocket();\n        \n        const handleReceiveMessage = (message) => {\n            console.log('Received message:', message);\n            \n            // Format the timestamp correctly with error handling\n            let formattedMessage = { ...message };\n            \n            try {\n                // Try to format timestamp as Date\n                if (message.timestamp) {\n                    formattedMessage.timestamp = new Date(message.timestamp);\n                    if (isNaN(formattedMessage.timestamp.getTime())) {\n                        console.warn('Invalid timestamp, using current time instead');\n                        formattedMessage.timestamp = new Date();\n                    }\n                } else {\n                    formattedMessage.timestamp = new Date();\n                }\n                \n                // Try to format readAt as Date if it exists\n                if (message.readAt) {\n                    formattedMessage.readAt = new Date(message.readAt);\n                    if (isNaN(formattedMessage.readAt.getTime())) {\n                        formattedMessage.readAt = null;\n                    }\n                } else {\n                    formattedMessage.readAt = null;\n                }\n            } catch (error) {\n                console.error('Error formatting message dates:', error);\n                formattedMessage.timestamp = new Date();\n                formattedMessage.readAt = null;\n            }\n            \n            setMessages((prevMessages) => [...prevMessages, formattedMessage]);\n            \n            // Track received message for behavioral learning\n            if (message.sender === friendId) {\n                try {\n                    trackMessageReceived(formattedMessage, friendId);\n                    \n                    // Update debug info for received messages too\n                    const messageText = formattedMessage.content.toLowerCase();\n                    const topics = [\n                        { name: 'music', keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album'] },\n                        { name: 'movies', keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director'] },\n                        { name: 'travel', keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination'] },\n                        { name: 'food', keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal'] },\n                        { name: 'tech', keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device'] },\n                        { name: 'sports', keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise'] }\n                    ];\n                    \n                    const matchedTopics = {};\n                    topics.forEach(topic => {\n                        if (topic.keywords.some(keyword => messageText.includes(keyword))) {\n                            matchedTopics[topic.name] = true;\n                        }\n                    });\n                    \n                    setDebugInfo(prev => ({\n                        ...prev,\n                        topicMatches: { ...prev.topicMatches, ...matchedTopics },\n                        lastTrackedMessage: formattedMessage.content,\n                        trackedConversations: prev.trackedConversations + 1\n                    }));\n                } catch (error) {\n                    console.error('Error tracking received message:', error);\n                }\n            }\n            \n            // If we receive a message from the friend we're chatting with, mark it as read\n            if (message.sender === friendId && user?.id) {\n                console.log('Marking message as read');\n                markMessagesAsRead({ userId: user.id, friendId });\n            }\n        };\n\n        const handleMessageSent = (confirmation) => {\n            console.log('Message sent confirmation:', confirmation);\n            // Update the message in our state with the server-generated ID\n            setMessages((prevMessages) => \n                prevMessages.map(msg => {\n                    // Match by timestamp if no _id, using getTime for accurate comparison\n                    const msgTime = msg.timestamp.getTime();\n                    const confTime = new Date(confirmation.timestamp).getTime();\n                    // Allow for small time differences (within 1 second)\n                    const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n                    \n                    if (msg.isSent && !msg._id && isTimeMatch) {\n                        return { \n                            ...msg, \n                            _id: confirmation._id, \n                            timestamp: new Date(confirmation.timestamp),\n                            read: confirmation.read || false,\n                            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n                        };\n                    }\n                    return msg;\n                })\n            );\n        };\n\n        const handleMessageError = (error) => {\n            setError(`Error sending message: ${error.message}`);\n            setTimeout(() => setError(null), 5000);\n        };\n\n        const handleMessagesRead = (data) => {\n            if (data.by === friendId) {\n                console.log('Messages read by friend:', data);\n                \n                // Ensure readAt is properly formatted as a Date\n                let readAtDate;\n                try {\n                    // If readAt exists, try to convert it to a Date\n                    readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n                    \n                    // Check if it's a valid date\n                    if (isNaN(readAtDate.getTime())) {\n                        console.warn('Invalid readAt date received:', data.readAt);\n                        readAtDate = new Date();\n                    }\n                } catch (error) {\n                    console.error('Error parsing readAt date:', error);\n                    readAtDate = new Date();\n                }\n                \n                // Update read status of messages in state\n                setMessages((prevMessages) => {\n                    // Create a map of updated messages for quick lookup\n                    const updatedMsgs = new Map();\n                    \n                    // If we have detailed message data from the server, use it\n                    if (data.messages && Array.isArray(data.messages)) {\n                        data.messages.forEach(serverMsg => {\n                            try {\n                                // Parse the timestamps safely\n                                let msgTimestamp = new Date();\n                                let msgReadAt = readAtDate;\n                                \n                                if (serverMsg.timestamp) {\n                                    try {\n                                        msgTimestamp = new Date(serverMsg.timestamp);\n                                        if (isNaN(msgTimestamp.getTime())) msgTimestamp = new Date();\n                                    } catch (e) {\n                                        console.warn('Error parsing timestamp:', e);\n                                    }\n                                }\n                                \n                                if (serverMsg.readAt) {\n                                    try {\n                                        msgReadAt = new Date(serverMsg.readAt);\n                                        if (isNaN(msgReadAt.getTime())) msgReadAt = readAtDate;\n                                    } catch (e) {\n                                        console.warn('Error parsing readAt:', e);\n                                    }\n                                }\n                                \n                                updatedMsgs.set(serverMsg._id, {\n                                    ...serverMsg,\n                                    read: true,\n                                    readAt: msgReadAt,\n                                    timestamp: msgTimestamp\n                                });\n                            } catch (e) {\n                                console.error('Error processing message:', e);\n                            }\n                        });\n                    }\n                    \n                    // Handle resync operations more aggressively\n                    if (data.isResync) {\n                        console.log('Handling resync of read messages');\n                        // For resyncs, force update all sender's messages as read\n                        return prevMessages.map(msg => {\n                            // If we have detailed data for this message, use it\n                            if (msg._id && updatedMsgs.has(msg._id)) {\n                                return updatedMsgs.get(msg._id);\n                            }\n                            \n                            // For resyncs, be more aggressive in marking sender's messages as read\n                            if (msg.sender === user?.id) {\n                                return { \n                                    ...msg, \n                                    read: true, \n                                    readAt: readAtDate\n                                };\n                            }\n                            return msg;\n                        });\n                    }\n                    \n                    // Regular update for normal read receipts\n                    return prevMessages.map(msg => {\n                        // If we have detailed data for this message, use it\n                        if (msg._id && updatedMsgs.has(msg._id)) {\n                            return updatedMsgs.get(msg._id);\n                        }\n                        \n                        // Otherwise use the message ID list or just update based on sender\n                        if ((msg.sender === user?.id && !msg.read) || \n                            (data.messageIds && data.messageIds.includes(msg._id))) {\n                            return { \n                                ...msg, \n                                read: true, \n                                readAt: readAtDate\n                            };\n                        }\n                        return msg;\n                    });\n                });\n                \n                // Force scroll to bottom to show the read status updates\n                scrollToBottom();\n            }\n        };\n        \n        const handleUserTyping = (data) => {\n            if (data.sender === friendId) {\n                setIsTyping(true);\n                \n                // Clear any existing timeout\n                if (typingTimeout) {\n                    clearTimeout(typingTimeout);\n                }\n                \n                // Set a timeout to clear the typing indicator after 3 seconds\n                const timeout = setTimeout(() => {\n                    setIsTyping(false);\n                }, 3000);\n                \n                setTypingTimeout(timeout);\n            }\n        };\n        \n        // Handle read status sync events\n        const handleReadStatusSync = (data) => {\n            console.log('Received read status sync:', data);\n            \n            if (data.messages && data.messages.length > 0) {\n                // Update messages with synced read statuses\n                setMessages(prevMessages => {\n                    // Create a map of message IDs from the sync data\n                    const syncedMessageMap = new Map();\n                    data.messages.forEach(syncedMsg => {\n                        syncedMessageMap.set(syncedMsg._id, {\n                            ...syncedMsg,\n                            timestamp: new Date(syncedMsg.timestamp),\n                            readAt: syncedMsg.readAt ? new Date(syncedMsg.readAt) : null\n                        });\n                    });\n                    \n                    // Update local messages with synced read statuses\n                    return prevMessages.map(msg => {\n                        if (msg._id && syncedMessageMap.has(msg._id)) {\n                            const syncedMsg = syncedMessageMap.get(msg._id);\n                            return {\n                                ...msg,\n                                read: syncedMsg.read,\n                                readAt: syncedMsg.readAt\n                            };\n                        }\n                        return msg;\n                    });\n                });\n            }\n        };\n\n        // Register socket event handlers\n        receiveMessages(handleReceiveMessage);\n        onMessageSent(handleMessageSent);\n        onMessageError(handleMessageError);\n        onMessagesRead(handleMessagesRead);\n        onUserTyping(handleUserTyping);\n        onReadStatusSync(handleReadStatusSync);\n\n        // Notify server that user is online if we have a user ID\n        if (user && user.id) {\n            const socket = getSocket();\n            socket.emit('user_login', user.id);\n        }\n\n        return () => {\n            // Cleanup the socket connection when component unmounts\n            disconnectSocket();\n            \n            // Clear any existing typing timeout to prevent memory leaks\n            if (typingTimeout) {\n                clearTimeout(typingTimeout);\n            }\n        };\n    }, [user, friendId, typingTimeout]);\n    \n    // Load friend details and chat history\n    useEffect(() => {\n        const loadFriendAndChat = async () => {\n            if (!friendId || !user) return;\n            \n            setLoading(true);\n            try {\n                // Import this function at the top of the file\n                const { getFriendById } = await import('../../services/api');\n                \n                // Get friend details\n                const friendData = await getFriendById(friendId);\n                setFriend(friendData);\n                \n                // Get chat history\n                const chatHistory = await getChatHistory(friendId);\n                \n                // Notify server that chat is opened and sync read statuses\n                if (user.id) {\n                    try {\n                        console.log('Notifying chat opened and syncing read statuses');\n                        \n                        // This will trigger the server to mark messages as read AND sync read statuses\n                        notifyChatOpened(user.id, friendId);\n                        \n                        // Also emit the socket event for immediate sync\n                        const socket = getSocket();\n                        if (socket && socket.connected) {\n                            socket.emit('chatOpened', { \n                                conversationId: createConversationId(user.id, friendId),\n                                userId: user.id,\n                                friendId: friendId\n                            });\n                        }\n                        \n                        // Also use the traditional method as backup\n                        markMessagesAsRead({ userId: user.id, friendId });\n                    } catch (err) {\n                        console.error('Error with initial read marking:', err);\n                    }\n                }\n                \n                // Format the timestamps as Date objects with error handling\n                const formattedHistory = chatHistory.map(msg => {\n                    let timestamp, readAt;\n                    \n                    try {\n                        timestamp = msg.timestamp ? new Date(msg.timestamp) : new Date();\n                        if (isNaN(timestamp.getTime())) {\n                            timestamp = new Date();\n                        }\n                    } catch (err) {\n                        console.warn('Invalid timestamp for message:', msg);\n                        timestamp = new Date();\n                    }\n                    \n                    try {\n                        readAt = msg.readAt ? new Date(msg.readAt) : null;\n                        if (readAt && isNaN(readAt.getTime())) {\n                            readAt = null;\n                        }\n                    } catch (err) {\n                        console.warn('Invalid readAt for message:', msg);\n                        readAt = null;\n                    }\n                    \n                    return {\n                        ...msg,\n                        timestamp,\n                        readAt\n                    };\n                });\n                \n                setMessages(formattedHistory);\n                \n                // Mark messages as read when chat is opened\n                if (user.id) {\n                    console.log('Marking messages as read on chat open');\n                    try {\n                        // First update via socket for real-time update to other user\n                        markMessagesAsRead({ userId: user.id, friendId });\n                        \n                        // Then update via API to ensure database is updated\n                        await apiMarkMessagesAsRead(friendId);\n                    } catch (err) {\n                        console.error('Error marking messages as read:', err);\n                    }\n                }\n            } catch (error) {\n                console.error('Error loading chat data:', error);\n                setError('Failed to load chat data. Please try again.');\n                setTimeout(() => setError(null), 5000);\n            } finally {\n                setLoading(false);\n            }\n        };\n        \n        loadFriendAndChat();\n    }, [friendId, user]);\n    \n    // Create scrollToBottom function as a ref so we can call it from multiple places\n    const scrollToBottom = useCallback(() => {\n        // Try both methods to ensure scrolling works properly\n        setTimeout(() => {\n            // Method 1: Use messagesEndRef\n            if (messagesEndRef.current) {\n                messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n            }\n            \n            // Method 2: Use direct container scrolling (as backup)\n            const chatContainer = document.querySelector('.chat-messages');\n            if (chatContainer) {\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n            }\n        }, 100); // Small delay to ensure DOM updates have completed\n    }, []);\n    \n    // Scroll to bottom of messages when they update or typing status changes\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages, isTyping, scrollToBottom]);\n\n    const handleSendMessage = () => {\n        if (newMessage.trim() && user && user.id && friendId) {\n            try {\n                const messageData = {\n                    sender: user.id,\n                    recipient: friendId,\n                    content: newMessage\n                };\n                \n                console.log('Sending message:', messageData);\n                \n                // Send via socket\n                sendMessage(messageData);\n                \n                // Add message to local state with a unique client-side ID\n                const clientMessageId = `temp-${Date.now()}`;\n                const newMsg = {\n                    _id: null, // Will be updated when server confirms\n                    clientMessageId, // Temporary client-side ID to help with matching\n                    sender: user.id,\n                    receiver: friendId,\n                    content: newMessage,\n                    timestamp: new Date(),\n                    read: false,\n                    readAt: null,\n                    isSent: true\n                };\n                \n                // Track this message for behavioral learning\n                try {\n                    trackMessageSent(newMsg, friendId);\n                } catch (error) {\n                    console.error('Error tracking sent message:', error);\n                }\n                \n                setMessages((prevMessages) => [...prevMessages, newMsg]);\n                setNewMessage('');\n                \n                // Scroll to bottom\n                scrollToBottom();\n            } catch (error) {\n                console.error('Error sending message:', error);\n                setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n                setTimeout(() => setError(null), 5000);\n            }\n        }\n    };\n\n    // Handle back button to return to dashboard\n    const handleBack = () => {\n        history.push('/dashboard');\n    };\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading chat...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-header\">\n                <button className=\"back-button\" onClick={handleBack}>\n                    &larr; Back\n                </button>\n                \n                {friend && (\n                    <div className=\"chat-friend-info\">\n                        <img \n                            src={friend.profilePicture || 'https://via.placeholder.com/40'} \n                            alt={friend.username} \n                            className=\"chat-avatar\"\n                        />\n                        <div className=\"chat-name\">\n                            <h3>{friend.username}</h3>\n                            <p>{friend.location}</p>\n                        </div>\n                        \n                        {/* Debug toggle button - only visible in development */}\n                        {process.env.NODE_ENV === 'development' && (\n                            <button \n                                className=\"debug-toggle\" \n                                onClick={() => setShowDebugInfo(!showDebugInfo)}\n                                style={{ \n                                    marginLeft: '10px', \n                                    background: '#f0f0f0', \n                                    border: '1px solid #ddd',\n                                    borderRadius: '4px',\n                                    padding: '2px 8px',\n                                    fontSize: '10px'\n                                }}\n                            >\n                                {showDebugInfo ? 'Hide Debug' : 'Show Debug'}\n                            </button>\n                        )}\n                    </div>\n                )}\n            </div>\n            \n            {/* Debug Panel - only visible in development when toggled */}\n            {process.env.NODE_ENV === 'development' && showDebugInfo && (\n                <div className=\"debug-panel\" style={{\n                    position: 'absolute',\n                    top: '60px',\n                    right: '20px',\n                    width: '300px',\n                    padding: '10px',\n                    background: 'rgba(0,0,0,0.8)',\n                    color: '#00ff00',\n                    fontFamily: 'monospace',\n                    fontSize: '12px',\n                    zIndex: 100,\n                    borderRadius: '4px',\n                    maxHeight: '400px',\n                    overflowY: 'auto'\n                }}>\n                    <h4 style={{ margin: '0 0 10px', color: '#fff' }}>Behavior Tracking Debug</h4>\n                    \n                    <div>\n                        <p><strong>Topics Detected:</strong></p>\n                        <ul style={{ paddingLeft: '20px' }}>\n                            {Object.keys(debugInfo.topicMatches).length > 0 ? (\n                                Object.keys(debugInfo.topicMatches).map((topic, i) => (\n                                    <li key={i}>{topic}</li>\n                                ))\n                            ) : (\n                                <li>No topics detected yet</li>\n                            )}\n                        </ul>\n                    </div>\n                    \n                    <div style={{ marginTop: '10px' }}>\n                        <p><strong>Messages Tracked:</strong> {debugInfo.trackedConversations}</p>\n                        {debugInfo.lastTrackedMessage && (\n                            <>\n                                <p><strong>Last Tracked:</strong></p>\n                                <p style={{ wordBreak: 'break-word' }}>{debugInfo.lastTrackedMessage}</p>\n                            </>\n                        )}\n                    </div>\n                    \n                    <div style={{ marginTop: '10px' }}>\n                        <p><strong>Live Topic Analysis:</strong></p>\n                        <div>\n                            {/* Get and display the tracked topics */}\n                            {(() => {\n                                try {\n                                    const localData = localStorage.getItem('devUserTracking');\n                                    if (!localData) return <p>No tracking data found</p>;\n                                    \n                                    const data = JSON.parse(localData);\n                                    if (!data.conversationTopics || Object.keys(data.conversationTopics).length === 0) {\n                                        return <p>No topics tracked yet</p>;\n                                    }\n                                    \n                                    const topTopics = Object.entries(data.conversationTopics)\n                                        .sort((a, b) => b[1].count - a[1].count)\n                                        .slice(0, 5); // Show top 5 topics\n                                        \n                                    return (\n                                        <ul style={{ paddingLeft: '20px', marginTop: '5px' }}>\n                                            {topTopics.map(([topic, details], idx) => (\n                                                <li key={idx} style={{ margin: '5px 0' }}>\n                                                    <strong>{topic}</strong>: {details.count} mentions\n                                                    {details.examples && details.examples.length > 0 && (\n                                                        <div style={{ fontSize: '10px', color: '#aaa', marginLeft: '10px' }}>\n                                                            e.g. \"{details.examples[0].snippet}\"\n                                                        </div>\n                                                    )}\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    );\n                                } catch (error) {\n                                    console.error('Error displaying topics:', error);\n                                    return <p>Error displaying topics</p>;\n                                }\n                            })()}\n                        </div>\n                        \n                        <div style={{ marginTop: '10px', display: 'flex', gap: '10px' }}>\n                            <button \n                                onClick={() => {\n                                    if (window.inspectTrackingData) {\n                                        window.inspectTrackingData();\n                                        alert('Tracking data logged to console. Press F12 to view.');\n                                    } else {\n                                        alert('Debug utilities not loaded. Are you in development mode?');\n                                    }\n                                }}\n                                style={{\n                                    background: '#444',\n                                    color: '#fff',\n                                    border: 'none',\n                                    padding: '5px 10px',\n                                    borderRadius: '4px',\n                                    cursor: 'pointer',\n                                    flex: 1\n                                }}\n                            >\n                                Analyze Data\n                            </button>\n                            \n                            <button \n                                onClick={() => {\n                                    if (window.resetTrackingData) {\n                                        if (confirm('Are you sure you want to reset tracking data?')) {\n                                            window.resetTrackingData();\n                                            setDebugInfo({\n                                                topicMatches: {},\n                                                lastTrackedMessage: null,\n                                                trackedConversations: 0\n                                            });\n                                            alert('Tracking data has been reset.');\n                                        }\n                                    } else {\n                                        alert('Debug utilities not loaded. Are you in development mode?');\n                                    }\n                                }}\n                                style={{\n                                    background: '#f44336',\n                                    color: '#fff',\n                                    border: 'none',\n                                    padding: '5px 10px',\n                                    borderRadius: '4px',\n                                    cursor: 'pointer',\n                                    flex: 1\n                                }}\n                            >\n                                Reset Data\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n            \n            <div className=\"chat-messages\">\n                {error && <div className=\"error-message\">{error}</div>}\n                \n                {messages.length === 0 ? (\n                    <div className=\"no-messages\">\n                        <p>No messages yet. Start the conversation!</p>\n                    </div>\n                ) : (\n                    messages.map((msg, index) => (\n                        <div \n                            key={index} \n                            className={`message ${msg.sender === user.id ? 'sent' : 'received'}`}\n                        >\n                            <div className=\"message-content\">{msg.content}</div>\n                            <div className=\"message-info\">\n                                <span className=\"message-time\">\n                                    {formatTime(msg.timestamp)}\n                                </span>\n                                {msg.sender === user.id && (\n                                    <span className=\"message-status\">\n                                        {msg.read ? (\n                                            <span className=\"status-read\" title={`Read at ${formatTime(msg.readAt) || 'unknown time'}`}>\n                                                ✓✓ Read\n                                            </span>\n                                        ) : (\n                                            <span className=\"status-sent\">\n                                                ✓ Sent\n                                            </span>\n                                        )}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                    ))\n                )}\n                {isTyping && (\n                    <div className=\"typing-indicator\">\n                        <span>{friend?.username || 'Friend'} is typing</span>\n                    </div>\n                )}\n                <div ref={messagesEndRef} />\n            </div>\n            \n            <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    value={newMessage}\n                    onChange={(e) => {\n                        setNewMessage(e.target.value);\n                        // Debounce typing indicator to reduce socket traffic\n                        if (user?.id && friendId) {\n                            // Clear existing timeout if any\n                            if (typingTimeout) {\n                                clearTimeout(typingTimeout);\n                            }\n                            \n                            // Only send typing indicator every 1 second at most\n                            const newTimeout = setTimeout(() => {\n                                sendTypingIndicator(user.id, friendId);\n                            }, 300);\n                            \n                            setTypingTimeout(newTimeout);\n                        }\n                    }}\n                    placeholder=\"Type a message...\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                />\n                <button onClick={handleSendMessage} disabled={!newMessage.trim()}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}