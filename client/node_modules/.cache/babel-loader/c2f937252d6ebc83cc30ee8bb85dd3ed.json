{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Messaging\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sendMessage, receiveMessages, connectSocket, disconnectSocket, markMessagesAsRead, onMessagesRead, onMessageSent, onMessageError, sendTypingIndicator, onUserTyping, notifyChatOpened, onReadStatusSync, getSocket, createConversationId } from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport { trackMessageSent, trackMessageReceived } from '../../services/behaviorTracking';\nimport '../../styles/chat.css';\n\n// Safe time formatter utility function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatTime = dateObj => {\n  try {\n    if (!dateObj) return '';\n\n    // If it's not a Date object, try to convert it\n    const date = dateObj instanceof Date ? dateObj : new Date(dateObj);\n\n    // Check if it's a valid date\n    if (isNaN(date.getTime())) return '';\n\n    // Format the time\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    console.warn('Error formatting time:', error);\n    return '';\n  }\n};\nconst ChatInterface = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    friendId\n  } = useParams();\n  const history = useHistory();\n  const [friend, setFriend] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Setup socket connection and handlers\n  useEffect(() => {\n    // Connect to socket when component mounts\n    connectSocket();\n    const handleReceiveMessage = message => {\n      console.log('Received message:', message);\n\n      // Format the timestamp correctly with error handling\n      let formattedMessage = {\n        ...message\n      };\n      try {\n        // Try to format timestamp as Date\n        if (message.timestamp) {\n          formattedMessage.timestamp = new Date(message.timestamp);\n          if (isNaN(formattedMessage.timestamp.getTime())) {\n            console.warn('Invalid timestamp, using current time instead');\n            formattedMessage.timestamp = new Date();\n          }\n        } else {\n          formattedMessage.timestamp = new Date();\n        }\n\n        // Try to format readAt as Date if it exists\n        if (message.readAt) {\n          formattedMessage.readAt = new Date(message.readAt);\n          if (isNaN(formattedMessage.readAt.getTime())) {\n            formattedMessage.readAt = null;\n          }\n        } else {\n          formattedMessage.readAt = null;\n        }\n      } catch (error) {\n        console.error('Error formatting message dates:', error);\n        formattedMessage.timestamp = new Date();\n        formattedMessage.readAt = null;\n      }\n      setMessages(prevMessages => [...prevMessages, formattedMessage]);\n\n      // Track received message for behavioral learning\n      if (message.sender === friendId) {\n        try {\n          trackMessageReceived(formattedMessage, friendId);\n        } catch (error) {\n          console.error('Error tracking received message:', error);\n        }\n      }\n\n      // If we receive a message from the friend we're chatting with, mark it as read\n      if (message.sender === friendId && user !== null && user !== void 0 && user.id) {\n        console.log('Marking message as read');\n        markMessagesAsRead({\n          userId: user.id,\n          friendId\n        });\n      }\n    };\n    const handleMessageSent = confirmation => {\n      console.log('Message sent confirmation:', confirmation);\n      // Update the message in our state with the server-generated ID\n      setMessages(prevMessages => prevMessages.map(msg => {\n        // Match by timestamp if no _id, using getTime for accurate comparison\n        const msgTime = msg.timestamp.getTime();\n        const confTime = new Date(confirmation.timestamp).getTime();\n        // Allow for small time differences (within 1 second)\n        const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n        if (msg.isSent && !msg._id && isTimeMatch) {\n          return {\n            ...msg,\n            _id: confirmation._id,\n            timestamp: new Date(confirmation.timestamp),\n            read: confirmation.read || false,\n            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n          };\n        }\n        return msg;\n      }));\n    };\n    const handleMessageError = error => {\n      setError(`Error sending message: ${error.message}`);\n      setTimeout(() => setError(null), 5000);\n    };\n    const handleMessagesRead = data => {\n      if (data.by === friendId) {\n        console.log('Messages read by friend:', data);\n\n        // Ensure readAt is properly formatted as a Date\n        let readAtDate;\n        try {\n          // If readAt exists, try to convert it to a Date\n          readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n\n          // Check if it's a valid date\n          if (isNaN(readAtDate.getTime())) {\n            console.warn('Invalid readAt date received:', data.readAt);\n            readAtDate = new Date();\n          }\n        } catch (error) {\n          console.error('Error parsing readAt date:', error);\n          readAtDate = new Date();\n        }\n\n        // Update read status of messages in state\n        setMessages(prevMessages => {\n          // Create a map of updated messages for quick lookup\n          const updatedMsgs = new Map();\n\n          // If we have detailed message data from the server, use it\n          if (data.messages && Array.isArray(data.messages)) {\n            data.messages.forEach(serverMsg => {\n              try {\n                // Parse the timestamps safely\n                let msgTimestamp = new Date();\n                let msgReadAt = readAtDate;\n                if (serverMsg.timestamp) {\n                  try {\n                    msgTimestamp = new Date(serverMsg.timestamp);\n                    if (isNaN(msgTimestamp.getTime())) msgTimestamp = new Date();\n                  } catch (e) {\n                    console.warn('Error parsing timestamp:', e);\n                  }\n                }\n                if (serverMsg.readAt) {\n                  try {\n                    msgReadAt = new Date(serverMsg.readAt);\n                    if (isNaN(msgReadAt.getTime())) msgReadAt = readAtDate;\n                  } catch (e) {\n                    console.warn('Error parsing readAt:', e);\n                  }\n                }\n                updatedMsgs.set(serverMsg._id, {\n                  ...serverMsg,\n                  read: true,\n                  readAt: msgReadAt,\n                  timestamp: msgTimestamp\n                });\n              } catch (e) {\n                console.error('Error processing message:', e);\n              }\n            });\n          }\n\n          // Handle resync operations more aggressively\n          if (data.isResync) {\n            console.log('Handling resync of read messages');\n            // For resyncs, force update all sender's messages as read\n            return prevMessages.map(msg => {\n              // If we have detailed data for this message, use it\n              if (msg._id && updatedMsgs.has(msg._id)) {\n                return updatedMsgs.get(msg._id);\n              }\n\n              // For resyncs, be more aggressive in marking sender's messages as read\n              if (msg.sender === (user === null || user === void 0 ? void 0 : user.id)) {\n                return {\n                  ...msg,\n                  read: true,\n                  readAt: readAtDate\n                };\n              }\n              return msg;\n            });\n          }\n\n          // Regular update for normal read receipts\n          return prevMessages.map(msg => {\n            // If we have detailed data for this message, use it\n            if (msg._id && updatedMsgs.has(msg._id)) {\n              return updatedMsgs.get(msg._id);\n            }\n\n            // Otherwise use the message ID list or just update based on sender\n            if (msg.sender === (user === null || user === void 0 ? void 0 : user.id) && !msg.read || data.messageIds && data.messageIds.includes(msg._id)) {\n              return {\n                ...msg,\n                read: true,\n                readAt: readAtDate\n              };\n            }\n            return msg;\n          });\n        });\n\n        // Force scroll to bottom to show the read status updates\n        scrollToBottom();\n      }\n    };\n    const handleUserTyping = data => {\n      if (data.sender === friendId) {\n        setIsTyping(true);\n\n        // Clear any existing timeout\n        if (typingTimeout) {\n          clearTimeout(typingTimeout);\n        }\n\n        // Set a timeout to clear the typing indicator after 3 seconds\n        const timeout = setTimeout(() => {\n          setIsTyping(false);\n        }, 3000);\n        setTypingTimeout(timeout);\n      }\n    };\n\n    // Handle read status sync events\n    const handleReadStatusSync = data => {\n      console.log('Received read status sync:', data);\n      if (data.messages && data.messages.length > 0) {\n        // Update messages with synced read statuses\n        setMessages(prevMessages => {\n          // Create a map of message IDs from the sync data\n          const syncedMessageMap = new Map();\n          data.messages.forEach(syncedMsg => {\n            syncedMessageMap.set(syncedMsg._id, {\n              ...syncedMsg,\n              timestamp: new Date(syncedMsg.timestamp),\n              readAt: syncedMsg.readAt ? new Date(syncedMsg.readAt) : null\n            });\n          });\n\n          // Update local messages with synced read statuses\n          return prevMessages.map(msg => {\n            if (msg._id && syncedMessageMap.has(msg._id)) {\n              const syncedMsg = syncedMessageMap.get(msg._id);\n              return {\n                ...msg,\n                read: syncedMsg.read,\n                readAt: syncedMsg.readAt\n              };\n            }\n            return msg;\n          });\n        });\n      }\n    };\n\n    // Register socket event handlers\n    receiveMessages(handleReceiveMessage);\n    onMessageSent(handleMessageSent);\n    onMessageError(handleMessageError);\n    onMessagesRead(handleMessagesRead);\n    onUserTyping(handleUserTyping);\n    onReadStatusSync(handleReadStatusSync);\n\n    // Notify server that user is online if we have a user ID\n    if (user && user.id) {\n      const socket = getSocket();\n      socket.emit('user_login', user.id);\n    }\n    return () => {\n      // Cleanup the socket connection when component unmounts\n      disconnectSocket();\n\n      // Clear any existing typing timeout to prevent memory leaks\n      if (typingTimeout) {\n        clearTimeout(typingTimeout);\n      }\n    };\n  }, [user, friendId, typingTimeout]);\n\n  // Load friend details and chat history\n  useEffect(() => {\n    const loadFriendAndChat = async () => {\n      if (!friendId || !user) return;\n      setLoading(true);\n      try {\n        // Import this function at the top of the file\n        const {\n          getFriendById\n        } = await import('../../services/api');\n\n        // Get friend details\n        const friendData = await getFriendById(friendId);\n        setFriend(friendData);\n\n        // Get chat history\n        const chatHistory = await getChatHistory(friendId);\n\n        // Notify server that chat is opened and sync read statuses\n        if (user.id) {\n          try {\n            console.log('Notifying chat opened and syncing read statuses');\n\n            // This will trigger the server to mark messages as read AND sync read statuses\n            notifyChatOpened(user.id, friendId);\n\n            // Also emit the socket event for immediate sync\n            const socket = getSocket();\n            if (socket && socket.connected) {\n              socket.emit('chatOpened', {\n                conversationId: createConversationId(user.id, friendId),\n                userId: user.id,\n                friendId: friendId\n              });\n            }\n\n            // Also use the traditional method as backup\n            markMessagesAsRead({\n              userId: user.id,\n              friendId\n            });\n          } catch (err) {\n            console.error('Error with initial read marking:', err);\n          }\n        }\n\n        // Format the timestamps as Date objects with error handling\n        const formattedHistory = chatHistory.map(msg => {\n          let timestamp, readAt;\n          try {\n            timestamp = msg.timestamp ? new Date(msg.timestamp) : new Date();\n            if (isNaN(timestamp.getTime())) {\n              timestamp = new Date();\n            }\n          } catch (err) {\n            console.warn('Invalid timestamp for message:', msg);\n            timestamp = new Date();\n          }\n          try {\n            readAt = msg.readAt ? new Date(msg.readAt) : null;\n            if (readAt && isNaN(readAt.getTime())) {\n              readAt = null;\n            }\n          } catch (err) {\n            console.warn('Invalid readAt for message:', msg);\n            readAt = null;\n          }\n          return {\n            ...msg,\n            timestamp,\n            readAt\n          };\n        });\n        setMessages(formattedHistory);\n\n        // Mark messages as read when chat is opened\n        if (user.id) {\n          console.log('Marking messages as read on chat open');\n          try {\n            // First update via socket for real-time update to other user\n            markMessagesAsRead({\n              userId: user.id,\n              friendId\n            });\n\n            // Then update via API to ensure database is updated\n            await apiMarkMessagesAsRead(friendId);\n          } catch (err) {\n            console.error('Error marking messages as read:', err);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading chat data:', error);\n        setError('Failed to load chat data. Please try again.');\n        setTimeout(() => setError(null), 5000);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadFriendAndChat();\n  }, [friendId, user]);\n\n  // Create scrollToBottom function as a ref so we can call it from multiple places\n  const scrollToBottom = useCallback(() => {\n    // Try both methods to ensure scrolling works properly\n    setTimeout(() => {\n      // Method 1: Use messagesEndRef\n      if (messagesEndRef.current) {\n        messagesEndRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n\n      // Method 2: Use direct container scrolling (as backup)\n      const chatContainer = document.querySelector('.chat-messages');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    }, 100); // Small delay to ensure DOM updates have completed\n  }, []);\n\n  // Scroll to bottom of messages when they update or typing status changes\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping, scrollToBottom]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() && user && user.id && friendId) {\n      try {\n        const messageData = {\n          sender: user.id,\n          recipient: friendId,\n          content: newMessage\n        };\n        console.log('Sending message:', messageData);\n\n        // Send via socket\n        sendMessage(messageData);\n\n        // Add message to local state with a unique client-side ID\n        const clientMessageId = `temp-${Date.now()}`;\n        const newMsg = {\n          _id: null,\n          // Will be updated when server confirms\n          clientMessageId,\n          // Temporary client-side ID to help with matching\n          sender: user.id,\n          receiver: friendId,\n          content: newMessage,\n          timestamp: new Date(),\n          read: false,\n          readAt: null,\n          isSent: true\n        };\n\n        // Track this message for behavioral learning\n        try {\n          trackMessageSent(newMsg, friendId);\n        } catch (error) {\n          console.error('Error tracking sent message:', error);\n        }\n        setMessages(prevMessages => [...prevMessages, newMsg]);\n        setNewMessage('');\n\n        // Scroll to bottom\n        scrollToBottom();\n      } catch (error) {\n        console.error('Error sending message:', error);\n        setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n        setTimeout(() => setError(null), 5000);\n      }\n    }\n  };\n\n  // Handle back button to return to dashboard\n  const handleBack = () => {\n    history.push('/dashboard');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 17\n      }, this), friend && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-friend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: friend.profilePicture || 'https://via.placeholder.com/40',\n          alt: friend.username,\n          className: \"chat-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: friend.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: friend.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 25\n        }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"debug-button\",\n          onClick: () => {\n            if (window.userInterestDebug) {\n              window.userInterestDebug.print();\n              window.userInterestDebug.save();\n              alert('User interest data has been logged to console and saved to file/localStorage.');\n            } else {\n              alert('Debug utilities not loaded. Are you in development mode?');\n            }\n          },\n          style: {\n            marginLeft: '10px',\n            background: '#f0f0f0',\n            border: '1px solid #ddd',\n            borderRadius: '4px',\n            padding: '2px 8px',\n            fontSize: '10px'\n          },\n          children: \"Track Interests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 27\n      }, this), messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Start the conversation!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 21\n      }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === user.id ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: formatTime(msg.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 33\n          }, this), msg.sender === user.id && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-status\",\n            children: msg.read ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-read\",\n              title: `Read at ${formatTime(msg.readAt) || 'unknown time'}`,\n              children: \"\\u2713\\u2713 Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-sent\",\n              children: \"\\u2713 Sent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 25\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(friend === null || friend === void 0 ? void 0 : friend.username) || 'Friend', \" is typing\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => {\n          setNewMessage(e.target.value);\n          // Debounce typing indicator to reduce socket traffic\n          if (user !== null && user !== void 0 && user.id && friendId) {\n            // Clear existing timeout if any\n            if (typingTimeout) {\n              clearTimeout(typingTimeout);\n            }\n\n            // Only send typing indicator every 1 second at most\n            const newTimeout = setTimeout(() => {\n              sendTypingIndicator(user.id, friendId);\n            }, 300);\n            setTypingTimeout(newTimeout);\n          }\n        },\n        placeholder: \"Type a message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !newMessage.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatInterface, \"0siy8Cz23S7b7vpZcrFmzXDyNnY=\", false, function () {\n  return [useAuth, useParams, useHistory];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useAuth","useParams","useHistory","sendMessage","receiveMessages","connectSocket","disconnectSocket","markMessagesAsRead","onMessagesRead","onMessageSent","onMessageError","sendTypingIndicator","onUserTyping","notifyChatOpened","onReadStatusSync","getSocket","createConversationId","getChatHistory","apiMarkMessagesAsRead","trackMessageSent","trackMessageReceived","jsxDEV","_jsxDEV","formatTime","dateObj","date","Date","isNaN","getTime","toLocaleTimeString","hour","minute","error","console","warn","ChatInterface","_s","user","friendId","history","friend","setFriend","messages","setMessages","newMessage","setNewMessage","loading","setLoading","setError","isTyping","setIsTyping","typingTimeout","setTypingTimeout","messagesEndRef","handleReceiveMessage","message","log","formattedMessage","timestamp","readAt","prevMessages","sender","id","userId","handleMessageSent","confirmation","map","msg","msgTime","confTime","isTimeMatch","Math","abs","isSent","_id","read","handleMessageError","setTimeout","handleMessagesRead","data","by","readAtDate","updatedMsgs","Map","Array","isArray","forEach","serverMsg","msgTimestamp","msgReadAt","e","set","isResync","has","get","messageIds","includes","scrollToBottom","handleUserTyping","clearTimeout","timeout","handleReadStatusSync","length","syncedMessageMap","syncedMsg","socket","emit","loadFriendAndChat","getFriendById","friendData","chatHistory","connected","conversationId","err","formattedHistory","current","scrollIntoView","behavior","chatContainer","document","querySelector","scrollTop","scrollHeight","handleSendMessage","trim","messageData","recipient","content","clientMessageId","now","newMsg","receiver","handleBack","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","profilePicture","alt","username","location","process","env","NODE_ENV","window","userInterestDebug","print","save","alert","style","marginLeft","background","border","borderRadius","padding","fontSize","index","title","ref","type","value","onChange","target","newTimeout","placeholder","onKeyPress","key","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Messaging/ChatInterface.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { \n    sendMessage, \n    receiveMessages, \n    connectSocket, \n    disconnectSocket, \n    markMessagesAsRead,\n    onMessagesRead,\n    onMessageSent,\n    onMessageError,\n    sendTypingIndicator,\n    onUserTyping,\n    notifyChatOpened,\n    onReadStatusSync,\n    getSocket,\n    createConversationId\n} from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport { trackMessageSent, trackMessageReceived } from '../../services/behaviorTracking';\nimport '../../styles/chat.css';\n\n// Safe time formatter utility function\nconst formatTime = (dateObj) => {\n    try {\n        if (!dateObj) return '';\n        \n        // If it's not a Date object, try to convert it\n        const date = dateObj instanceof Date ? dateObj : new Date(dateObj);\n        \n        // Check if it's a valid date\n        if (isNaN(date.getTime())) return '';\n        \n        // Format the time\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } catch (error) {\n        console.warn('Error formatting time:', error);\n        return '';\n    }\n};\n\nconst ChatInterface = () => {\n    const { user } = useAuth();\n    const { friendId } = useParams();\n    const history = useHistory();\n    const [friend, setFriend] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingTimeout, setTypingTimeout] = useState(null);\n    const messagesEndRef = useRef(null);\n\n    // Setup socket connection and handlers\n    useEffect(() => {\n        // Connect to socket when component mounts\n        connectSocket();\n        \n        const handleReceiveMessage = (message) => {\n            console.log('Received message:', message);\n            \n            // Format the timestamp correctly with error handling\n            let formattedMessage = { ...message };\n            \n            try {\n                // Try to format timestamp as Date\n                if (message.timestamp) {\n                    formattedMessage.timestamp = new Date(message.timestamp);\n                    if (isNaN(formattedMessage.timestamp.getTime())) {\n                        console.warn('Invalid timestamp, using current time instead');\n                        formattedMessage.timestamp = new Date();\n                    }\n                } else {\n                    formattedMessage.timestamp = new Date();\n                }\n                \n                // Try to format readAt as Date if it exists\n                if (message.readAt) {\n                    formattedMessage.readAt = new Date(message.readAt);\n                    if (isNaN(formattedMessage.readAt.getTime())) {\n                        formattedMessage.readAt = null;\n                    }\n                } else {\n                    formattedMessage.readAt = null;\n                }\n            } catch (error) {\n                console.error('Error formatting message dates:', error);\n                formattedMessage.timestamp = new Date();\n                formattedMessage.readAt = null;\n            }\n            \n            setMessages((prevMessages) => [...prevMessages, formattedMessage]);\n            \n            // Track received message for behavioral learning\n            if (message.sender === friendId) {\n                try {\n                    trackMessageReceived(formattedMessage, friendId);\n                } catch (error) {\n                    console.error('Error tracking received message:', error);\n                }\n            }\n            \n            // If we receive a message from the friend we're chatting with, mark it as read\n            if (message.sender === friendId && user?.id) {\n                console.log('Marking message as read');\n                markMessagesAsRead({ userId: user.id, friendId });\n            }\n        };\n\n        const handleMessageSent = (confirmation) => {\n            console.log('Message sent confirmation:', confirmation);\n            // Update the message in our state with the server-generated ID\n            setMessages((prevMessages) => \n                prevMessages.map(msg => {\n                    // Match by timestamp if no _id, using getTime for accurate comparison\n                    const msgTime = msg.timestamp.getTime();\n                    const confTime = new Date(confirmation.timestamp).getTime();\n                    // Allow for small time differences (within 1 second)\n                    const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n                    \n                    if (msg.isSent && !msg._id && isTimeMatch) {\n                        return { \n                            ...msg, \n                            _id: confirmation._id, \n                            timestamp: new Date(confirmation.timestamp),\n                            read: confirmation.read || false,\n                            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n                        };\n                    }\n                    return msg;\n                })\n            );\n        };\n\n        const handleMessageError = (error) => {\n            setError(`Error sending message: ${error.message}`);\n            setTimeout(() => setError(null), 5000);\n        };\n\n        const handleMessagesRead = (data) => {\n            if (data.by === friendId) {\n                console.log('Messages read by friend:', data);\n                \n                // Ensure readAt is properly formatted as a Date\n                let readAtDate;\n                try {\n                    // If readAt exists, try to convert it to a Date\n                    readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n                    \n                    // Check if it's a valid date\n                    if (isNaN(readAtDate.getTime())) {\n                        console.warn('Invalid readAt date received:', data.readAt);\n                        readAtDate = new Date();\n                    }\n                } catch (error) {\n                    console.error('Error parsing readAt date:', error);\n                    readAtDate = new Date();\n                }\n                \n                // Update read status of messages in state\n                setMessages((prevMessages) => {\n                    // Create a map of updated messages for quick lookup\n                    const updatedMsgs = new Map();\n                    \n                    // If we have detailed message data from the server, use it\n                    if (data.messages && Array.isArray(data.messages)) {\n                        data.messages.forEach(serverMsg => {\n                            try {\n                                // Parse the timestamps safely\n                                let msgTimestamp = new Date();\n                                let msgReadAt = readAtDate;\n                                \n                                if (serverMsg.timestamp) {\n                                    try {\n                                        msgTimestamp = new Date(serverMsg.timestamp);\n                                        if (isNaN(msgTimestamp.getTime())) msgTimestamp = new Date();\n                                    } catch (e) {\n                                        console.warn('Error parsing timestamp:', e);\n                                    }\n                                }\n                                \n                                if (serverMsg.readAt) {\n                                    try {\n                                        msgReadAt = new Date(serverMsg.readAt);\n                                        if (isNaN(msgReadAt.getTime())) msgReadAt = readAtDate;\n                                    } catch (e) {\n                                        console.warn('Error parsing readAt:', e);\n                                    }\n                                }\n                                \n                                updatedMsgs.set(serverMsg._id, {\n                                    ...serverMsg,\n                                    read: true,\n                                    readAt: msgReadAt,\n                                    timestamp: msgTimestamp\n                                });\n                            } catch (e) {\n                                console.error('Error processing message:', e);\n                            }\n                        });\n                    }\n                    \n                    // Handle resync operations more aggressively\n                    if (data.isResync) {\n                        console.log('Handling resync of read messages');\n                        // For resyncs, force update all sender's messages as read\n                        return prevMessages.map(msg => {\n                            // If we have detailed data for this message, use it\n                            if (msg._id && updatedMsgs.has(msg._id)) {\n                                return updatedMsgs.get(msg._id);\n                            }\n                            \n                            // For resyncs, be more aggressive in marking sender's messages as read\n                            if (msg.sender === user?.id) {\n                                return { \n                                    ...msg, \n                                    read: true, \n                                    readAt: readAtDate\n                                };\n                            }\n                            return msg;\n                        });\n                    }\n                    \n                    // Regular update for normal read receipts\n                    return prevMessages.map(msg => {\n                        // If we have detailed data for this message, use it\n                        if (msg._id && updatedMsgs.has(msg._id)) {\n                            return updatedMsgs.get(msg._id);\n                        }\n                        \n                        // Otherwise use the message ID list or just update based on sender\n                        if ((msg.sender === user?.id && !msg.read) || \n                            (data.messageIds && data.messageIds.includes(msg._id))) {\n                            return { \n                                ...msg, \n                                read: true, \n                                readAt: readAtDate\n                            };\n                        }\n                        return msg;\n                    });\n                });\n                \n                // Force scroll to bottom to show the read status updates\n                scrollToBottom();\n            }\n        };\n        \n        const handleUserTyping = (data) => {\n            if (data.sender === friendId) {\n                setIsTyping(true);\n                \n                // Clear any existing timeout\n                if (typingTimeout) {\n                    clearTimeout(typingTimeout);\n                }\n                \n                // Set a timeout to clear the typing indicator after 3 seconds\n                const timeout = setTimeout(() => {\n                    setIsTyping(false);\n                }, 3000);\n                \n                setTypingTimeout(timeout);\n            }\n        };\n        \n        // Handle read status sync events\n        const handleReadStatusSync = (data) => {\n            console.log('Received read status sync:', data);\n            \n            if (data.messages && data.messages.length > 0) {\n                // Update messages with synced read statuses\n                setMessages(prevMessages => {\n                    // Create a map of message IDs from the sync data\n                    const syncedMessageMap = new Map();\n                    data.messages.forEach(syncedMsg => {\n                        syncedMessageMap.set(syncedMsg._id, {\n                            ...syncedMsg,\n                            timestamp: new Date(syncedMsg.timestamp),\n                            readAt: syncedMsg.readAt ? new Date(syncedMsg.readAt) : null\n                        });\n                    });\n                    \n                    // Update local messages with synced read statuses\n                    return prevMessages.map(msg => {\n                        if (msg._id && syncedMessageMap.has(msg._id)) {\n                            const syncedMsg = syncedMessageMap.get(msg._id);\n                            return {\n                                ...msg,\n                                read: syncedMsg.read,\n                                readAt: syncedMsg.readAt\n                            };\n                        }\n                        return msg;\n                    });\n                });\n            }\n        };\n\n        // Register socket event handlers\n        receiveMessages(handleReceiveMessage);\n        onMessageSent(handleMessageSent);\n        onMessageError(handleMessageError);\n        onMessagesRead(handleMessagesRead);\n        onUserTyping(handleUserTyping);\n        onReadStatusSync(handleReadStatusSync);\n\n        // Notify server that user is online if we have a user ID\n        if (user && user.id) {\n            const socket = getSocket();\n            socket.emit('user_login', user.id);\n        }\n\n        return () => {\n            // Cleanup the socket connection when component unmounts\n            disconnectSocket();\n            \n            // Clear any existing typing timeout to prevent memory leaks\n            if (typingTimeout) {\n                clearTimeout(typingTimeout);\n            }\n        };\n    }, [user, friendId, typingTimeout]);\n    \n    // Load friend details and chat history\n    useEffect(() => {\n        const loadFriendAndChat = async () => {\n            if (!friendId || !user) return;\n            \n            setLoading(true);\n            try {\n                // Import this function at the top of the file\n                const { getFriendById } = await import('../../services/api');\n                \n                // Get friend details\n                const friendData = await getFriendById(friendId);\n                setFriend(friendData);\n                \n                // Get chat history\n                const chatHistory = await getChatHistory(friendId);\n                \n                // Notify server that chat is opened and sync read statuses\n                if (user.id) {\n                    try {\n                        console.log('Notifying chat opened and syncing read statuses');\n                        \n                        // This will trigger the server to mark messages as read AND sync read statuses\n                        notifyChatOpened(user.id, friendId);\n                        \n                        // Also emit the socket event for immediate sync\n                        const socket = getSocket();\n                        if (socket && socket.connected) {\n                            socket.emit('chatOpened', { \n                                conversationId: createConversationId(user.id, friendId),\n                                userId: user.id,\n                                friendId: friendId\n                            });\n                        }\n                        \n                        // Also use the traditional method as backup\n                        markMessagesAsRead({ userId: user.id, friendId });\n                    } catch (err) {\n                        console.error('Error with initial read marking:', err);\n                    }\n                }\n                \n                // Format the timestamps as Date objects with error handling\n                const formattedHistory = chatHistory.map(msg => {\n                    let timestamp, readAt;\n                    \n                    try {\n                        timestamp = msg.timestamp ? new Date(msg.timestamp) : new Date();\n                        if (isNaN(timestamp.getTime())) {\n                            timestamp = new Date();\n                        }\n                    } catch (err) {\n                        console.warn('Invalid timestamp for message:', msg);\n                        timestamp = new Date();\n                    }\n                    \n                    try {\n                        readAt = msg.readAt ? new Date(msg.readAt) : null;\n                        if (readAt && isNaN(readAt.getTime())) {\n                            readAt = null;\n                        }\n                    } catch (err) {\n                        console.warn('Invalid readAt for message:', msg);\n                        readAt = null;\n                    }\n                    \n                    return {\n                        ...msg,\n                        timestamp,\n                        readAt\n                    };\n                });\n                \n                setMessages(formattedHistory);\n                \n                // Mark messages as read when chat is opened\n                if (user.id) {\n                    console.log('Marking messages as read on chat open');\n                    try {\n                        // First update via socket for real-time update to other user\n                        markMessagesAsRead({ userId: user.id, friendId });\n                        \n                        // Then update via API to ensure database is updated\n                        await apiMarkMessagesAsRead(friendId);\n                    } catch (err) {\n                        console.error('Error marking messages as read:', err);\n                    }\n                }\n            } catch (error) {\n                console.error('Error loading chat data:', error);\n                setError('Failed to load chat data. Please try again.');\n                setTimeout(() => setError(null), 5000);\n            } finally {\n                setLoading(false);\n            }\n        };\n        \n        loadFriendAndChat();\n    }, [friendId, user]);\n    \n    // Create scrollToBottom function as a ref so we can call it from multiple places\n    const scrollToBottom = useCallback(() => {\n        // Try both methods to ensure scrolling works properly\n        setTimeout(() => {\n            // Method 1: Use messagesEndRef\n            if (messagesEndRef.current) {\n                messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n            }\n            \n            // Method 2: Use direct container scrolling (as backup)\n            const chatContainer = document.querySelector('.chat-messages');\n            if (chatContainer) {\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n            }\n        }, 100); // Small delay to ensure DOM updates have completed\n    }, []);\n    \n    // Scroll to bottom of messages when they update or typing status changes\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages, isTyping, scrollToBottom]);\n\n    const handleSendMessage = () => {\n        if (newMessage.trim() && user && user.id && friendId) {\n            try {\n                const messageData = {\n                    sender: user.id,\n                    recipient: friendId,\n                    content: newMessage\n                };\n                \n                console.log('Sending message:', messageData);\n                \n                // Send via socket\n                sendMessage(messageData);\n                \n                // Add message to local state with a unique client-side ID\n                const clientMessageId = `temp-${Date.now()}`;\n                const newMsg = {\n                    _id: null, // Will be updated when server confirms\n                    clientMessageId, // Temporary client-side ID to help with matching\n                    sender: user.id,\n                    receiver: friendId,\n                    content: newMessage,\n                    timestamp: new Date(),\n                    read: false,\n                    readAt: null,\n                    isSent: true\n                };\n                \n                // Track this message for behavioral learning\n                try {\n                    trackMessageSent(newMsg, friendId);\n                } catch (error) {\n                    console.error('Error tracking sent message:', error);\n                }\n                \n                setMessages((prevMessages) => [...prevMessages, newMsg]);\n                setNewMessage('');\n                \n                // Scroll to bottom\n                scrollToBottom();\n            } catch (error) {\n                console.error('Error sending message:', error);\n                setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n                setTimeout(() => setError(null), 5000);\n            }\n        }\n    };\n\n    // Handle back button to return to dashboard\n    const handleBack = () => {\n        history.push('/dashboard');\n    };\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading chat...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-header\">\n                <button className=\"back-button\" onClick={handleBack}>\n                    &larr; Back\n                </button>\n                \n                {friend && (\n                    <div className=\"chat-friend-info\">\n                        <img \n                            src={friend.profilePicture || 'https://via.placeholder.com/40'} \n                            alt={friend.username} \n                            className=\"chat-avatar\"\n                        />\n                        <div className=\"chat-name\">\n                            <h3>{friend.username}</h3>\n                            <p>{friend.location}</p>\n                        </div>\n                        \n                        {/* Debug button - only visible in development */}\n                        {process.env.NODE_ENV === 'development' && (\n                            <button \n                                className=\"debug-button\"\n                                onClick={() => {\n                                    if (window.userInterestDebug) {\n                                        window.userInterestDebug.print();\n                                        window.userInterestDebug.save();\n                                        alert('User interest data has been logged to console and saved to file/localStorage.');\n                                    } else {\n                                        alert('Debug utilities not loaded. Are you in development mode?');\n                                    }\n                                }}\n                                style={{ \n                                    marginLeft: '10px', \n                                    background: '#f0f0f0', \n                                    border: '1px solid #ddd',\n                                    borderRadius: '4px',\n                                    padding: '2px 8px',\n                                    fontSize: '10px'\n                                }}\n                            >\n                                Track Interests\n                            </button>\n                        )}\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"chat-messages\">\n                {error && <div className=\"error-message\">{error}</div>}\n                \n                {messages.length === 0 ? (\n                    <div className=\"no-messages\">\n                        <p>No messages yet. Start the conversation!</p>\n                    </div>\n                ) : (\n                    messages.map((msg, index) => (\n                        <div \n                            key={index} \n                            className={`message ${msg.sender === user.id ? 'sent' : 'received'}`}\n                        >\n                            <div className=\"message-content\">{msg.content}</div>\n                            <div className=\"message-info\">\n                                <span className=\"message-time\">\n                                    {formatTime(msg.timestamp)}\n                                </span>\n                                {msg.sender === user.id && (\n                                    <span className=\"message-status\">\n                                        {msg.read ? (\n                                            <span className=\"status-read\" title={`Read at ${formatTime(msg.readAt) || 'unknown time'}`}>\n                                                ✓✓ Read\n                                            </span>\n                                        ) : (\n                                            <span className=\"status-sent\">\n                                                ✓ Sent\n                                            </span>\n                                        )}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                    ))\n                )}\n                {isTyping && (\n                    <div className=\"typing-indicator\">\n                        <span>{friend?.username || 'Friend'} is typing</span>\n                    </div>\n                )}\n                <div ref={messagesEndRef} />\n            </div>\n            \n            <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    value={newMessage}\n                    onChange={(e) => {\n                        setNewMessage(e.target.value);\n                        // Debounce typing indicator to reduce socket traffic\n                        if (user?.id && friendId) {\n                            // Clear existing timeout if any\n                            if (typingTimeout) {\n                                clearTimeout(typingTimeout);\n                            }\n                            \n                            // Only send typing indicator every 1 second at most\n                            const newTimeout = setTimeout(() => {\n                                sendTypingIndicator(user.id, friendId);\n                            }, 300);\n                            \n                            setTypingTimeout(newTimeout);\n                        }\n                    }}\n                    placeholder=\"Type a message...\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                />\n                <button onClick={handleSendMessage} disabled={!newMessage.trim()}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}