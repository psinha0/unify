{"ast":null,"code":"import axios from 'axios';\n// Define API URL without relying on process.env\n// In production, you would use environment variables properly\nconst API_URL = window.REACT_APP_API_URL || 'http://localhost:5000/api';\n// Add axios interceptor to handle 401 responses globally\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Token is expired or invalid, clear it and redirect to login\n    localStorage.removeItem('token');\n    // Redirect to root (login page) if not already there\n    if (window.location.pathname !== '/') {\n      window.location.href = '/';\n    }\n  }\n  return Promise.reject(error);\n});\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw {\n        message: 'Server is not responding. Please try again later.'\n      };\n    } else {\n      // Something happened in setting up the request\n      throw {\n        message: 'Error setting up request. Please try again.'\n      };\n    }\n  }\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw {\n        message: 'Server is not responding. Please try again later.'\n      };\n    } else {\n      // Something happened in setting up the request\n      throw {\n        message: 'Error setting up request. Please try again.'\n      };\n    }\n  }\n};\n// Fetch the user's friends\nexport const fetchFriends = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/friends`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Fetch potential friends for matching\nexport const fetchPotentialFriends = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/potential-friends`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Send a friend request to another user\nexport const sendFriendRequest = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/matching/match`, {\n      friendId\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Get pending friend requests\nexport const getFriendRequests = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/requests`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Accept a friend request\nexport const acceptFriendRequest = async requestId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/matching/requests/${requestId}/accept`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\nexport const sendMessage = async messageData => {\n  try {\n    const response = await axios.post(`${API_URL}/messaging/send`, messageData);\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n// Get current user's profile\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Update user's profile\nexport const updateUserProfile = async profileData => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(`${API_URL}/profile`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Get friend details by ID\nexport const getFriendById = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/friends/${friendId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Get chat history with a friend\nexport const getChatHistory = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/messaging/history/${friendId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n// Mark messages from a friend as read\nexport const markMessagesAsRead = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication token not found');\n    }\n    const response = await axios.put(`${API_URL}/messaging/read/${friendId}`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};","map":{"version":3,"names":["axios","API_URL","window","REACT_APP_API_URL","interceptors","response","use","error","status","localStorage","removeItem","location","pathname","href","Promise","reject","registerUser","userData","post","data","request","message","loginUser","credentials","fetchFriends","token","getItem","get","headers","Authorization","Error","fetchPotentialFriends","sendFriendRequest","friendId","getFriendRequests","acceptFriendRequest","requestId","sendMessage","messageData","getUserProfile","updateUserProfile","profileData","put","getFriendById","getChatHistory","markMessagesAsRead"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n// Define API URL without relying on process.env\n// In production, you would use environment variables properly\nconst API_URL = window.REACT_APP_API_URL || 'http://localhost:5000/api';\n// Add axios interceptor to handle 401 responses globally\naxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response && error.response.status === 401) {\n            // Token is expired or invalid, clear it and redirect to login\n            localStorage.removeItem('token');\n            // Redirect to root (login page) if not already there\n            if (window.location.pathname !== '/') {\n                window.location.href = '/';\n            }\n        }\n        return Promise.reject(error);\n    }\n);\nexport const registerUser = async (userData) => {\n    try {\n        const response = await axios.post(`${API_URL}/auth/register`, userData);\n        return response.data;\n    } catch (error) {\n        if (error.response && error.response.data) {\n            throw error.response.data;\n        } else if (error.request) {\n            // The request was made but no response was received\n            throw { message: 'Server is not responding. Please try again later.' };\n        } else {\n            // Something happened in setting up the request\n            throw { message: 'Error setting up request. Please try again.' };\n        }\n    }\n};\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await axios.post(`${API_URL}/auth/login`, credentials);\n        return response.data;\n    } catch (error) {\n        if (error.response && error.response.data) {\n            throw error.response.data;\n        } else if (error.request) {\n            // The request was made but no response was received\n            throw { message: 'Server is not responding. Please try again later.' };\n        } else {\n            // Something happened in setting up the request\n            throw { message: 'Error setting up request. Please try again.' };\n        }\n    }\n};\n// Fetch the user's friends\nexport const fetchFriends = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/friends`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Fetch potential friends for matching\nexport const fetchPotentialFriends = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/potential-friends`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Send a friend request to another user\nexport const sendFriendRequest = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(`${API_URL}/matching/match`, \n            { friendId },\n            {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Get pending friend requests\nexport const getFriendRequests = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/requests`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Accept a friend request\nexport const acceptFriendRequest = async (requestId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(\n            `${API_URL}/matching/requests/${requestId}/accept`, \n            {},\n            {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\nexport const sendMessage = async (messageData) => {\n    try {\n        const response = await axios.post(`${API_URL}/messaging/send`, messageData);\n        return response.data;\n    } catch (error) {\n        throw error.response.data;\n    }\n};\n// Get current user's profile\nexport const getUserProfile = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/profile`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Update user's profile\nexport const updateUserProfile = async (profileData) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.put(`${API_URL}/profile`, profileData, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Get friend details by ID\nexport const getFriendById = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/friends/${friendId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Get chat history with a friend\nexport const getChatHistory = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/messaging/history/${friendId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n// Mark messages from a friend as read\nexport const markMessagesAsRead = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            throw new Error('Authentication token not found');\n        }\n        const response = await axios.put(`${API_URL}/messaging/read/${friendId}`, {}, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,iBAAiB,IAAI,2BAA2B;AACvE;AACAH,KAAK,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACP,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACjD;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC;IACA,IAAIR,MAAM,CAACS,QAAQ,CAACC,QAAQ,KAAK,GAAG,EAAE;MAClCV,MAAM,CAACS,QAAQ,CAACE,IAAI,GAAG,GAAG;IAC9B;EACJ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAChC,CACJ,CAAC;AACD,OAAO,MAAMS,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,gBAAgB,EAAEgB,QAAQ,CAAC;IACvE,OAAOZ,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACc,IAAI,EAAE;MACvC,MAAMZ,KAAK,CAACF,QAAQ,CAACc,IAAI;IAC7B,CAAC,MAAM,IAAIZ,KAAK,CAACa,OAAO,EAAE;MACtB;MACA,MAAM;QAAEC,OAAO,EAAE;MAAoD,CAAC;IAC1E,CAAC,MAAM;MACH;MACA,MAAM;QAAEA,OAAO,EAAE;MAA8C,CAAC;IACpE;EACJ;AACJ,CAAC;AACD,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC5C,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,aAAa,EAAEsB,WAAW,CAAC;IACvE,OAAOlB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACc,IAAI,EAAE;MACvC,MAAMZ,KAAK,CAACF,QAAQ,CAACc,IAAI;IAC7B,CAAC,MAAM,IAAIZ,KAAK,CAACa,OAAO,EAAE;MACtB;MACA,MAAM;QAAEC,OAAO,EAAE;MAAoD,CAAC;IAC1E,CAAC,MAAM;MACH;MACA,MAAM;QAAEA,OAAO,EAAE;MAA8C,CAAC;IACpE;EACJ;AACJ,CAAC;AACD;AACA,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACA,MAAMC,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,mBAAmB,EAAE;MAC5D2B,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACA,MAAMN,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,6BAA6B,EAAE;MACtE2B,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACA,MAAMR,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,iBAAiB,EACzD;MAAEgC;IAAS,CAAC,EACZ;MACIL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CACJ,CAAC;IACD,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMT,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,oBAAoB,EAAE;MAC7D2B,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMK,mBAAmB,GAAG,MAAOC,SAAS,IAAK;EACpD,IAAI;IACA,MAAMX,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAC7B,GAAGjB,OAAO,sBAAsBmC,SAAS,SAAS,EAClD,CAAC,CAAC,EACF;MACIR,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CACJ,CAAC;IACD,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD,OAAO,MAAMO,WAAW,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACA,MAAMjC,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,iBAAiB,EAAEqC,WAAW,CAAC;IAC3E,OAAOjC,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,CAACc,IAAI;EAC7B;AACJ,CAAC;AACD;AACA,OAAO,MAAMoB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAMd,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,UAAU,EAAE;MACnD2B,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMU,iBAAiB,GAAG,MAAOC,WAAW,IAAK;EACpD,IAAI;IACA,MAAMhB,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC0C,GAAG,CAAC,GAAGzC,OAAO,UAAU,EAAEwC,WAAW,EAAE;MAChEb,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMa,aAAa,GAAG,MAAOV,QAAQ,IAAK;EAC7C,IAAI;IACA,MAAMR,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,qBAAqBgC,QAAQ,EAAE,EAAE;MACxEL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMc,cAAc,GAAG,MAAOX,QAAQ,IAAK;EAC9C,IAAI;IACA,MAAMR,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,GAAG,CAAC,GAAG1B,OAAO,sBAAsBgC,QAAQ,EAAE,EAAE;MACzEL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC;AACD;AACA,OAAO,MAAMe,kBAAkB,GAAG,MAAOZ,QAAQ,IAAK;EAClD,IAAI;IACA,MAAMR,KAAK,GAAGhB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACD,KAAK,EAAE;MACR,MAAM,IAAIK,KAAK,CAAC,gCAAgC,CAAC;IACrD;IACA,MAAMzB,QAAQ,GAAG,MAAML,KAAK,CAAC0C,GAAG,CAAC,GAAGzC,OAAO,mBAAmBgC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE;MAC1EL,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACc,IAAI;EACxB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACc,IAAI,GAAG,IAAIW,KAAK,CAAC,eAAe,CAAC;EAC3E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}