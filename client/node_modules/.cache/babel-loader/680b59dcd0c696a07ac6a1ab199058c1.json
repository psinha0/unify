{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Profile\\\\ProfilePrompts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { updateUserProfile } from '../../services/api';\nimport '../../styles/profile.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProfilePrompts = ({\n  forNewUser\n}) => {\n  _s();\n  const {\n    user,\n    setUser,\n    setIsNewUser\n  } = useAuth();\n  const [currentPrompt, setCurrentPrompt] = useState(null);\n  const [response, setResponse] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [promptIndex, setPromptIndex] = useState(0); // For new users going through all prompts\n\n  // Define a series of prompts that help us learn more about the user\n  const possiblePrompts = [{\n    id: 'communication_style',\n    question: 'How do you prefer to communicate with friends?',\n    options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups'],\n    category: 'socialPreferences',\n    field: 'communicationStyle',\n    frequency: 'weekly' // How often this prompt can appear\n  }, {\n    id: 'weekend_activity',\n    question: 'What\\'s your ideal weekend activity?',\n    options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports'],\n    category: 'lifestyle',\n    field: 'weekendPlans',\n    frequency: 'weekly'\n  }, {\n    id: 'friendship_value',\n    question: 'What do you value most in a friendship?',\n    options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support'],\n    category: 'values',\n    field: 'friendshipValues',\n    frequency: 'monthly'\n  }, {\n    id: 'social_energy',\n    question: 'After socializing, do you typically feel:',\n    options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\n    category: 'socialPreferences',\n    field: 'socialEnergy',\n    mapping: {\n      'Energized and ready for more': 'Extrovert',\n      'It depends on the people': 'Ambivert',\n      'Drained and needing alone time': 'Introvert'\n    },\n    frequency: 'monthly'\n  }];\n  useEffect(() => {\n    if (!user) return;\n\n    // If this is for new users, show all prompts in sequence\n    if (forNewUser) {\n      if (promptIndex < possiblePrompts.length) {\n        setCurrentPrompt(possiblePrompts[promptIndex]);\n        setSubmitted(false);\n      } else {\n        // All prompts completed for new user\n        if (setIsNewUser) {\n          setIsNewUser(false);\n        }\n      }\n      return;\n    }\n\n    // Regular flow for returning users - show occasional prompts\n    const shouldShowPrompt = () => {\n      // Check if user has recently answered a prompt (within last 24 hours)\n      const lastPromptTime = localStorage.getItem('lastPromptTime');\n      if (lastPromptTime) {\n        const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\n        const oneDayInMs = 24 * 60 * 60 * 1000;\n        if (timeSinceLastPrompt < oneDayInMs) {\n          return false;\n        }\n      }\n\n      // Show prompt with 30% probability when user loads profile page\n      return Math.random() < 0.3;\n    };\n    const selectPrompt = () => {\n      // Filter out prompts the user has already answered recently\n      const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      const eligiblePrompts = possiblePrompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\n      if (eligiblePrompts.length === 0) return null;\n\n      // Select a random prompt from eligible ones\n      const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\n      return eligiblePrompts[randomIndex];\n    };\n    if (shouldShowPrompt() && user) {\n      const prompt = selectPrompt();\n      if (prompt) {\n        setCurrentPrompt(prompt);\n        setSubmitted(false);\n      }\n    }\n  }, [user, promptIndex, forNewUser, setIsNewUser]);\n  const handleOptionSelect = option => {\n    setResponse(option);\n  };\n  const handleSubmit = async () => {\n    if (!response || !currentPrompt) return;\n    try {\n      var _user$currentPrompt$c;\n      // Store answer in user profile\n      const updateData = {};\n\n      // Create nested structure if needed\n      if (!user[currentPrompt.category]) {\n        updateData[currentPrompt.category] = {};\n      } else {\n        updateData[currentPrompt.category] = {\n          ...user[currentPrompt.category]\n        };\n      }\n\n      // Handle mapped values (e.g., converting response to a categorical value)\n      if (currentPrompt.mapping && currentPrompt.mapping[response]) {\n        updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[response];\n      }\n      // Handle array fields (e.g., adding to a list of values)\n      else if (Array.isArray((_user$currentPrompt$c = user[currentPrompt.category]) === null || _user$currentPrompt$c === void 0 ? void 0 : _user$currentPrompt$c[currentPrompt.field])) {\n        updateData[currentPrompt.category][currentPrompt.field] = [...(user[currentPrompt.category][currentPrompt.field] || []), response];\n      }\n      // Handle simple field update\n      else {\n        updateData[currentPrompt.category][currentPrompt.field] = response;\n      }\n      await updateUserProfile(updateData);\n\n      // Update the user context\n      if (setUser) {\n        setUser(prev => ({\n          ...prev,\n          [currentPrompt.category]: {\n            ...(prev[currentPrompt.category] || {}),\n            [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\n          }\n        }));\n      }\n\n      // Record that this prompt has been answered\n      const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      answeredPrompts.push(currentPrompt.id);\n      localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\n      localStorage.setItem('lastPromptTime', Date.now().toString());\n      setSubmitted(true);\n\n      // Hide prompt after 2 seconds\n      // For new users, move to next prompt after delay\n      setTimeout(() => {\n        if (forNewUser) {\n          setPromptIndex(prevIndex => prevIndex + 1);\n        } else {\n          setCurrentPrompt(null);\n        }\n        setResponse('');\n      }, 2000);\n    } catch (err) {\n      console.error('Error updating profile with prompt response:', err);\n    }\n  };\n  if (!currentPrompt || !user) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-prompt-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-prompt-card\",\n      children: !submitted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Quick Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentPrompt.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-options\",\n          children: currentPrompt.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `prompt-option ${response === option ? 'selected' : ''}`,\n            onClick: () => handleOptionSelect(option),\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prompt-submit\",\n            onClick: handleSubmit,\n            disabled: !response,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prompt-skip\",\n            onClick: () => setCurrentPrompt(null),\n            children: \"Skip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-note\",\n          children: \"Helps us find better matches for you\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt-success\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Thanks for sharing!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This helps us find better matches for you.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfilePrompts, \"7hEjYoz83Tv+Mm67eO86b7D1uBU=\", false, function () {\n  return [useAuth];\n});\n_c = ProfilePrompts;\nexport default ProfilePrompts;\nvar _c;\n$RefreshReg$(_c, \"ProfilePrompts\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","updateUserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfilePrompts","forNewUser","_s","user","setUser","setIsNewUser","currentPrompt","setCurrentPrompt","response","setResponse","submitted","setSubmitted","promptIndex","setPromptIndex","possiblePrompts","id","question","options","category","field","frequency","mapping","length","shouldShowPrompt","lastPromptTime","localStorage","getItem","timeSinceLastPrompt","Date","now","parseInt","oneDayInMs","Math","random","selectPrompt","answeredPromptIds","JSON","parse","eligiblePrompts","filter","prompt","includes","randomIndex","floor","handleOptionSelect","option","handleSubmit","_user$currentPrompt$c","updateData","Array","isArray","prev","answeredPrompts","push","setItem","stringify","toString","setTimeout","prevIndex","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Profile/ProfilePrompts.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { updateUserProfile } from '../../services/api';\r\nimport '../../styles/profile.css';\r\n\r\nconst ProfilePrompts = ({ forNewUser }) => {\r\n    const { user, setUser, setIsNewUser } = useAuth();\r\n    const [currentPrompt, setCurrentPrompt] = useState(null);\r\n    const [response, setResponse] = useState('');\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [promptIndex, setPromptIndex] = useState(0); // For new users going through all prompts\r\n    \r\n    // Define a series of prompts that help us learn more about the user\r\n    const possiblePrompts = [\r\n        {\r\n            id: 'communication_style',\r\n            question: 'How do you prefer to communicate with friends?',\r\n            options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups'],\r\n            category: 'socialPreferences',\r\n            field: 'communicationStyle',\r\n            frequency: 'weekly', // How often this prompt can appear\r\n        },\r\n        {\r\n            id: 'weekend_activity',\r\n            question: 'What\\'s your ideal weekend activity?',\r\n            options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports'],\r\n            category: 'lifestyle',\r\n            field: 'weekendPlans',\r\n            frequency: 'weekly',\r\n        },\r\n        {\r\n            id: 'friendship_value',\r\n            question: 'What do you value most in a friendship?',\r\n            options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support'],\r\n            category: 'values',\r\n            field: 'friendshipValues',\r\n            frequency: 'monthly',\r\n        },\r\n        {\r\n            id: 'social_energy',\r\n            question: 'After socializing, do you typically feel:',\r\n            options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\r\n            category: 'socialPreferences',\r\n            field: 'socialEnergy',\r\n            mapping: {\r\n                'Energized and ready for more': 'Extrovert',\r\n                'It depends on the people': 'Ambivert',\r\n                'Drained and needing alone time': 'Introvert'\r\n            },\r\n            frequency: 'monthly',\r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        \r\n        // If this is for new users, show all prompts in sequence\r\n        if (forNewUser) {\r\n            if (promptIndex < possiblePrompts.length) {\r\n                setCurrentPrompt(possiblePrompts[promptIndex]);\r\n                setSubmitted(false);\r\n            } else {\r\n                // All prompts completed for new user\r\n                if (setIsNewUser) {\r\n                    setIsNewUser(false);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Regular flow for returning users - show occasional prompts\r\n        const shouldShowPrompt = () => {\r\n            // Check if user has recently answered a prompt (within last 24 hours)\r\n            const lastPromptTime = localStorage.getItem('lastPromptTime');\r\n            if (lastPromptTime) {\r\n                const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\r\n                const oneDayInMs = 24 * 60 * 60 * 1000;\r\n                if (timeSinceLastPrompt < oneDayInMs) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            // Show prompt with 30% probability when user loads profile page\r\n            return Math.random() < 0.3;\r\n        };\r\n        \r\n        const selectPrompt = () => {\r\n            // Filter out prompts the user has already answered recently\r\n            const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            const eligiblePrompts = possiblePrompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\r\n            \r\n            if (eligiblePrompts.length === 0) return null;\r\n            \r\n            // Select a random prompt from eligible ones\r\n            const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\r\n            return eligiblePrompts[randomIndex];\r\n        };\r\n        \r\n        if (shouldShowPrompt() && user) {\r\n            const prompt = selectPrompt();\r\n            if (prompt) {\r\n                setCurrentPrompt(prompt);\r\n                setSubmitted(false);\r\n            }\r\n        }\r\n    }, [user, promptIndex, forNewUser, setIsNewUser]);\r\n    \r\n    const handleOptionSelect = (option) => {\r\n        setResponse(option);\r\n    };\r\n    \r\n    const handleSubmit = async () => {\r\n        if (!response || !currentPrompt) return;\r\n        \r\n        try {\r\n            // Store answer in user profile\r\n            const updateData = {};\r\n            \r\n            // Create nested structure if needed\r\n            if (!user[currentPrompt.category]) {\r\n                updateData[currentPrompt.category] = {};\r\n            } else {\r\n                updateData[currentPrompt.category] = { ...user[currentPrompt.category] };\r\n            }\r\n            \r\n            // Handle mapped values (e.g., converting response to a categorical value)\r\n            if (currentPrompt.mapping && currentPrompt.mapping[response]) {\r\n                updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[response];\r\n            } \r\n            // Handle array fields (e.g., adding to a list of values)\r\n            else if (Array.isArray(user[currentPrompt.category]?.[currentPrompt.field])) {\r\n                updateData[currentPrompt.category][currentPrompt.field] = [\r\n                    ...(user[currentPrompt.category][currentPrompt.field] || []),\r\n                    response\r\n                ];\r\n            } \r\n            // Handle simple field update\r\n            else {\r\n                updateData[currentPrompt.category][currentPrompt.field] = response;\r\n            }\r\n            \r\n            await updateUserProfile(updateData);\r\n            \r\n            // Update the user context\r\n            if (setUser) {\r\n                setUser(prev => ({\r\n                    ...prev,\r\n                    [currentPrompt.category]: {\r\n                        ...(prev[currentPrompt.category] || {}),\r\n                        [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\r\n                    }\r\n                }));\r\n            }\r\n            \r\n            // Record that this prompt has been answered\r\n            const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            answeredPrompts.push(currentPrompt.id);\r\n            localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\r\n            localStorage.setItem('lastPromptTime', Date.now().toString());\r\n            \r\n            setSubmitted(true);\r\n            \r\n            // Hide prompt after 2 seconds\r\n            // For new users, move to next prompt after delay\r\n            setTimeout(() => {\r\n                if (forNewUser) {\r\n                    setPromptIndex(prevIndex => prevIndex + 1);\r\n                } else {\r\n                    setCurrentPrompt(null);\r\n                }\r\n                setResponse('');\r\n            }, 2000);\r\n            \r\n        } catch (err) {\r\n            console.error('Error updating profile with prompt response:', err);\r\n        }\r\n    };\r\n    \r\n    if (!currentPrompt || !user) return null;\r\n    \r\n    return (\r\n        <div className=\"profile-prompt-container\">\r\n            <div className=\"profile-prompt-card\">\r\n                {!submitted ? (\r\n                    <>\r\n                        <h3>Quick Question</h3>\r\n                        <p>{currentPrompt.question}</p>\r\n                        \r\n                        <div className=\"prompt-options\">\r\n                            {currentPrompt.options.map((option, index) => (\r\n                                <button\r\n                                    key={index}\r\n                                    className={`prompt-option ${response === option ? 'selected' : ''}`}\r\n                                    onClick={() => handleOptionSelect(option)}\r\n                                >\r\n                                    {option}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                        \r\n                        <div className=\"prompt-actions\">\r\n                            <button \r\n                                className=\"prompt-submit\"\r\n                                onClick={handleSubmit}\r\n                                disabled={!response}\r\n                            >\r\n                                Save\r\n                            </button>\r\n                            <button \r\n                                className=\"prompt-skip\"\r\n                                onClick={() => setCurrentPrompt(null)}\r\n                            >\r\n                                Skip\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"prompt-note\">Helps us find better matches for you</p>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"prompt-success\">\r\n                        <h3>Thanks for sharing!</h3>\r\n                        <p>This helps us find better matches for you.</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePrompts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}