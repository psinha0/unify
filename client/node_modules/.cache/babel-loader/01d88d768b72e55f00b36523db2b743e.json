{"ast":null,"code":"/**\r\n * Helper utility to inspect behavior tracking data in development mode\r\n */\n\nconst inspectTrackingData = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    console.warn('This function is meant to be used only in development mode');\n    return null;\n  }\n  try {\n    var _data$interactions;\n    // Try to get data from localStorage\n    const localData = localStorage.getItem('devUserTracking');\n    if (!localData) {\n      console.log('No tracking data found in localStorage');\n      return null;\n    }\n    const data = JSON.parse(localData);\n\n    // Display summary\n    console.log('--- BEHAVIOR TRACKING DATA SUMMARY ---');\n    console.log(`Total interactions tracked: ${((_data$interactions = data.interactions) === null || _data$interactions === void 0 ? void 0 : _data$interactions.length) || 0}`);\n    console.log(`Last updated: ${data.lastUpdated}`);\n\n    // Topic analysis\n    if (data.interactions && data.interactions.length > 0) {\n      const topics = {\n        'music': 0,\n        'movies': 0,\n        'travel': 0,\n        'food': 0,\n        'tech': 0,\n        'sports': 0\n      };\n\n      // Simple keyword matching to count topic mentions\n      data.interactions.forEach(interaction => {\n        if (interaction.message && interaction.message.content) {\n          const content = interaction.message.content.toLowerCase();\n          if (/music|song|band|concert|playlist|album/.test(content)) topics.music++;\n          if (/movie|film|cinema|watch|actor|actress|director/.test(content)) topics.movies++;\n          if (/travel|trip|vacation|visit|flight|hotel|destination/.test(content)) topics.travel++;\n          if (/food|restaurant|eat|dinner|lunch|recipe|cook|meal/.test(content)) topics.food++;\n          if (/tech|technology|computer|phone|app|software|device/.test(content)) topics.tech++;\n          if (/sport|game|team|play|match|win|workout|exercise/.test(content)) topics.sports++;\n        }\n      });\n      console.log('\\n--- TOPIC ANALYSIS ---');\n      Object.entries(topics).sort((a, b) => b[1] - a[1]).forEach(([topic, count]) => {\n        console.log(`${topic}: ${count} mentions`);\n      });\n    }\n\n    // Return the full data for further inspection\n    return data;\n  } catch (error) {\n    console.error('Error inspecting tracking data:', error);\n    return null;\n  }\n};\nwindow.inspectTrackingData = inspectTrackingData;\nconsole.log('%c Behavior Tracking Debug Utilities Loaded ', 'background: #222; color: #bada55; font-size: 16px;');\nconsole.log('%c Call window.inspectTrackingData() to analyze tracking data ', 'background: #222; color: #bada55; font-size: 14px;');\nexport default inspectTrackingData;","map":{"version":3,"names":["inspectTrackingData","process","env","NODE_ENV","console","warn","_data$interactions","localData","localStorage","getItem","log","data","JSON","parse","interactions","length","lastUpdated","topics","forEach","interaction","message","content","toLowerCase","test","music","movies","travel","food","tech","sports","Object","entries","sort","a","b","topic","count","error","window"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/behaviorTrackingDebug.js"],"sourcesContent":["/**\r\n * Helper utility to inspect behavior tracking data in development mode\r\n */\r\n\r\nconst inspectTrackingData = () => {\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    console.warn('This function is meant to be used only in development mode');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    // Try to get data from localStorage\r\n    const localData = localStorage.getItem('devUserTracking');\r\n    if (!localData) {\r\n      console.log('No tracking data found in localStorage');\r\n      return null;\r\n    }\r\n    \r\n    const data = JSON.parse(localData);\r\n    \r\n    // Display summary\r\n    console.log('--- BEHAVIOR TRACKING DATA SUMMARY ---');\r\n    console.log(`Total interactions tracked: ${data.interactions?.length || 0}`);\r\n    console.log(`Last updated: ${data.lastUpdated}`);\r\n    \r\n    // Topic analysis\r\n    if (data.interactions && data.interactions.length > 0) {\r\n      const topics = {\r\n        'music': 0,\r\n        'movies': 0,\r\n        'travel': 0,\r\n        'food': 0,\r\n        'tech': 0,\r\n        'sports': 0\r\n      };\r\n      \r\n      // Simple keyword matching to count topic mentions\r\n      data.interactions.forEach(interaction => {\r\n        if (interaction.message && interaction.message.content) {\r\n          const content = interaction.message.content.toLowerCase();\r\n          \r\n          if (/music|song|band|concert|playlist|album/.test(content)) topics.music++;\r\n          if (/movie|film|cinema|watch|actor|actress|director/.test(content)) topics.movies++;\r\n          if (/travel|trip|vacation|visit|flight|hotel|destination/.test(content)) topics.travel++;\r\n          if (/food|restaurant|eat|dinner|lunch|recipe|cook|meal/.test(content)) topics.food++;\r\n          if (/tech|technology|computer|phone|app|software|device/.test(content)) topics.tech++;\r\n          if (/sport|game|team|play|match|win|workout|exercise/.test(content)) topics.sports++;\r\n        }\r\n      });\r\n      \r\n      console.log('\\n--- TOPIC ANALYSIS ---');\r\n      Object.entries(topics)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .forEach(([topic, count]) => {\r\n          console.log(`${topic}: ${count} mentions`);\r\n        });\r\n    }\r\n    \r\n    // Return the full data for further inspection\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error inspecting tracking data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nwindow.inspectTrackingData = inspectTrackingData;\r\n\r\nconsole.log(\r\n  '%c Behavior Tracking Debug Utilities Loaded ',\r\n  'background: #222; color: #bada55; font-size: 16px;'\r\n);\r\nconsole.log(\r\n  '%c Call window.inspectTrackingData() to analyze tracking data ',\r\n  'background: #222; color: #bada55; font-size: 14px;'\r\n);\r\n\r\nexport default inspectTrackingData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}