{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Profile\\\\ProfilePromptsEnhanced.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { updateUserProfile } from '../../services/api';\nimport '../../styles/profile.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProfilePrompts = ({\n  forNewUser,\n  onComplete\n}) => {\n  _s();\n  const {\n    user,\n    setUser,\n    setIsNewUser\n  } = useAuth();\n  const [currentPrompt, setCurrentPrompt] = useState(null);\n  const [response, setResponse] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [promptIndex, setPromptIndex] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [matchImprovementData, setMatchImprovementData] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // Comprehensive questionnaire for new users (8-10 questions)\n  const newUserPrompts = useMemo(() => [{\n    id: 'communication_style',\n    question: 'How do you prefer to communicate with friends?',\n    options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups', 'Social media'],\n    category: 'socialPreferences',\n    field: 'communicationStyle',\n    mapping: {\n      'Text messaging': 'Text-heavy',\n      'Voice calls': 'Voice calls',\n      'Video chats': 'Video calls',\n      'In-person meetups': 'In-person meetups',\n      'Social media': 'Text-heavy'\n    },\n    importance: 'high',\n    explanation: 'This helps us match you with friends who communicate in similar ways.'\n  }, {\n    id: 'social_energy',\n    question: 'After socializing, do you typically feel:',\n    options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\n    category: 'socialPreferences',\n    field: 'socialEnergy',\n    mapping: {\n      'Energized and ready for more': 'Extrovert',\n      'It depends on the people': 'Ambivert',\n      'Drained and needing alone time': 'Introvert'\n    },\n    importance: 'high',\n    explanation: 'Understanding your social energy helps us find compatible friends.'\n  }, {\n    id: 'weekend_activity',\n    question: 'What\\'s your ideal weekend activity?',\n    options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports', 'Creative projects'],\n    category: 'lifestyle',\n    field: 'weekendPlans',\n    importance: 'high',\n    explanation: 'Shared weekend preferences lead to better friendships.'\n  }, {\n    id: 'friendship_value',\n    question: 'What do you value most in a friendship?',\n    options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support', 'Fun and humor'],\n    category: 'values',\n    field: null,\n    // Special handling for values array\n    importance: 'high',\n    explanation: 'Core values alignment is crucial for lasting friendships.'\n  }, {\n    id: 'activity_level',\n    question: 'How would you describe your activity level?',\n    options: ['Very active (daily exercise)', 'Moderately active (few times a week)', 'Occasionally active', 'Prefer low-activity'],\n    category: 'lifestyle',\n    field: 'activityLevel',\n    mapping: {\n      'Very active (daily exercise)': 'Very active',\n      'Moderately active (few times a week)': 'Moderately active',\n      'Occasionally active': 'Low activity',\n      'Prefer low-activity': 'Low activity'\n    },\n    importance: 'medium',\n    explanation: 'Activity level compatibility helps with shared activities.'\n  }, {\n    id: 'time_availability',\n    question: 'When are you usually available to hang out?',\n    options: ['Weekday evenings', 'Weekend days', 'Weekend evenings', 'Flexible schedule', 'Lunch breaks'],\n    category: 'lifestyle',\n    field: 'availability',\n    importance: 'medium',\n    explanation: 'Matching schedules makes it easier to spend time together.'\n  }, {\n    id: 'group_size_preference',\n    question: 'Do you prefer hanging out:',\n    options: ['One-on-one', 'Small groups (2-4 people)', 'Medium groups (5-8 people)', 'Large groups (9+ people)', 'No preference'],\n    category: 'socialPreferences',\n    field: 'groupSizePreference',\n    importance: 'medium',\n    explanation: 'Group size preferences help us suggest the right social settings.'\n  }, {\n    id: 'conversation_topics',\n    question: 'What topics do you enjoy discussing most?',\n    options: ['Current events', 'Personal growth', 'Hobbies & interests', 'Work & career', 'Pop culture', 'Deep philosophical topics'],\n    category: 'socialPreferences',\n    field: 'conversationTopics',\n    importance: 'medium',\n    explanation: 'Shared conversation interests lead to more engaging interactions.'\n  }], []);\n\n  // Shorter questionnaire for existing users (2-3 questions)\n  const existingUserPrompts = useMemo(() => [{\n    id: 'recent_interests',\n    question: 'What new interests have you developed lately?',\n    options: ['Fitness & wellness', 'Creative arts', 'Technology', 'Travel planning', 'Cooking', 'Gaming', 'Reading', 'None recently'],\n    category: 'interests',\n    field: 'recentInterests',\n    importance: 'medium',\n    explanation: 'New interests help us find fresh connections.'\n  }, {\n    id: 'friendship_goals',\n    question: 'What are you looking for in new friendships right now?',\n    options: ['Activity partners', 'Deep conversations', 'Casual hangouts', 'Professional networking', 'Study/work buddies'],\n    category: 'socialPreferences',\n    field: 'friendshipGoals',\n    importance: 'high',\n    explanation: 'Understanding your current friendship goals helps us make better matches.'\n  }, {\n    id: 'communication_frequency',\n    question: 'How often do you like to stay in touch with friends?',\n    options: ['Daily check-ins', 'Few times a week', 'Weekly catch-ups', 'Bi-weekly', 'Monthly or less'],\n    category: 'socialPreferences',\n    field: 'communicationFrequency',\n    importance: 'medium',\n    explanation: 'Communication frequency preferences prevent mismatched expectations.'\n  }], []);\n\n  // Memoize the prompts array based on user type\n  const prompts = useMemo(() => {\n    return forNewUser ? newUserPrompts : existingUserPrompts;\n  }, [forNewUser, newUserPrompts, existingUserPrompts]);\n\n  // Calculate progress for new users\n  useEffect(() => {\n    if (forNewUser) {\n      setProgress(Math.round(promptIndex / prompts.length * 100));\n    }\n  }, [promptIndex, prompts.length, forNewUser]);\n\n  // Define handleComplete before it's used in useEffect\n  const handleComplete = useCallback(() => {\n    if (setIsNewUser) {\n      setIsNewUser(false);\n    }\n    // Also update user context to reflect questionnaire completion\n    if (setUser) {\n      setUser(prev => ({\n        ...prev,\n        lastQuestionnaireDate: new Date()\n      }));\n    }\n    if (onComplete) {\n      onComplete();\n    }\n\n    // Show match improvement data\n    const improvementData = {\n      questionsAnswered: forNewUser ? prompts.length : 1,\n      matchQualityIncrease: forNewUser ? 45 : 15,\n      newPotentialMatches: forNewUser ? 12 : 3,\n      profileCompleteness: forNewUser ? 85 : (user.profileCompleteness || 60) + 10\n    };\n    setMatchImprovementData(improvementData);\n  }, [setIsNewUser, onComplete, forNewUser, prompts.length, user]);\n\n  // Initialize prompt for user\n  useEffect(() => {\n    if (!user) return;\n    if (forNewUser) {\n      if (promptIndex < prompts.length) {\n        setCurrentPrompt(prompts[promptIndex]);\n        setResponse('');\n      } else {\n        // All prompts completed for new user\n        handleComplete();\n      }\n      return;\n    }\n\n    // For existing users, show prompts occasionally\n    const shouldShowPrompt = () => {\n      const lastPromptTime = localStorage.getItem('lastPromptTime');\n      if (lastPromptTime) {\n        const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\n        const oneDayInMs = 24 * 60 * 60 * 1000;\n        if (timeSinceLastPrompt < oneDayInMs) {\n          return false;\n        }\n      }\n      return Math.random() < 0.3;\n    };\n    if (shouldShowPrompt()) {\n      const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      const eligiblePrompts = prompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\n      if (eligiblePrompts.length > 0) {\n        const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\n        setCurrentPrompt(eligiblePrompts[randomIndex]);\n        setResponse('');\n      }\n    }\n  }, [user, promptIndex, forNewUser, prompts, handleComplete]);\n  const handleSubmit = useCallback(async (selectedOption = null) => {\n    const responseToUse = selectedOption || response;\n    if (!responseToUse || !currentPrompt) return;\n    try {\n      const updateData = {};\n\n      // Special handling for values array (when field is null)\n      if (currentPrompt.category === 'values' && currentPrompt.field === null) {\n        // Add to values array if not already present\n        const currentValues = user.values || [];\n        if (!currentValues.includes(responseToUse)) {\n          updateData.values = [...currentValues, responseToUse];\n        } else {\n          updateData.values = currentValues; // No change needed\n        }\n      } else {\n        var _user$currentPrompt$c;\n        // Create nested structure if needed\n        if (!user[currentPrompt.category]) {\n          updateData[currentPrompt.category] = {};\n        } else {\n          updateData[currentPrompt.category] = {\n            ...user[currentPrompt.category]\n          };\n        }\n\n        // Handle mapped values\n        if (currentPrompt.mapping && currentPrompt.mapping[responseToUse]) {\n          updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[responseToUse];\n        } else if (Array.isArray((_user$currentPrompt$c = user[currentPrompt.category]) === null || _user$currentPrompt$c === void 0 ? void 0 : _user$currentPrompt$c[currentPrompt.field])) {\n          updateData[currentPrompt.category][currentPrompt.field] = [...(user[currentPrompt.category][currentPrompt.field] || []), responseToUse];\n        } else {\n          updateData[currentPrompt.category][currentPrompt.field] = responseToUse;\n        }\n      }\n\n      // Update user context immediately for responsiveness\n      if (setUser) {\n        if (currentPrompt.category === 'values' && currentPrompt.field === null) {\n          setUser(prev => ({\n            ...prev,\n            values: updateData.values\n          }));\n        } else {\n          setUser(prev => ({\n            ...prev,\n            [currentPrompt.category]: {\n              ...(prev[currentPrompt.category] || {}),\n              [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\n            }\n          }));\n        }\n      }\n\n      // API call happens in background\n      const updatedUserData = await updateUserProfile(updateData);\n\n      // Update user context with the full response to include lastQuestionnaireDate\n      if (setUser && updatedUserData) {\n        setUser(updatedUserData);\n      }\n\n      // Record answered prompt\n      const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\n      answeredPrompts.push(currentPrompt.id);\n      localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\n      localStorage.setItem('lastPromptTime', Date.now().toString());\n\n      // Short delay before moving to next question for smooth transition\n      setTimeout(() => {\n        if (forNewUser) {\n          setPromptIndex(prev => prev + 1);\n        } else {\n          handleComplete();\n        }\n        // Reset states for next question\n        setIsProcessing(false);\n        setResponse('');\n      }, 300);\n    } catch (err) {\n      console.error('Error updating profile with prompt response:', err);\n      // Reset processing state on error with a delay to prevent flashing\n      setTimeout(() => {\n        setIsProcessing(false);\n      }, 200);\n    }\n  }, [response, currentPrompt, user, setUser, forNewUser, handleComplete]);\n  const handleOptionSelect = useCallback(option => {\n    if (isProcessing) return; // Prevent multiple selections\n\n    setResponse(option);\n    setIsProcessing(true);\n\n    // Add a smooth visual feedback delay before processing\n    setTimeout(() => {\n      handleSubmit(option); // Pass the option directly\n    }, 500); // Visual feedback for 0.5 seconds\n  }, [isProcessing, handleSubmit]);\n  const handleSkip = useCallback(() => {\n    if (forNewUser) {\n      setPromptIndex(prev => prev + 1);\n    } else {\n      setCurrentPrompt(null);\n    }\n  }, [forNewUser]);\n\n  // Show match improvement results\n  if (matchImprovementData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-improvement-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83C\\uDF89 Great! Your profile just got better!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Here's how your responses are helping us find better matches:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [\"+\", matchImprovementData.matchQualityIncrease, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Match Quality Increase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [\"+\", matchImprovementData.newPotentialMatches]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"New Potential Matches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-number\",\n            children: [matchImprovementData.profileCompleteness, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Profile Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"improvement-explanation\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCCA Your answers help our algorithm understand your preferences better. The more you tell us, the better matches we can find!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"continue-button\",\n        onClick: () => setMatchImprovementData(null),\n        children: \"Continue to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this);\n  }\n  if (!currentPrompt || !user) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-prompt-container enhanced\",\n    children: [forNewUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionnaire-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", promptIndex + 1, \" of \", prompts.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [progress, \"% complete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-prompt-card enhanced\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: forNewUser ? '👋 Let\\'s get to know you!' : '💡 Quick Question'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"importance-indicator\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `importance-badge ${currentPrompt.importance}`,\n              children: currentPrompt.importance === 'high' ? '⭐ Important' : '📈 Helpful'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-question\",\n          children: currentPrompt.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }, this), currentPrompt.explanation && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-explanation\",\n          children: currentPrompt.explanation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-options enhanced\",\n          children: currentPrompt.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `prompt-option enhanced \n                                    ${response === option ? 'selected' : ''} \n                                    ${isProcessing ? 'processing' : ''}\n                                    ${isProcessing && response !== option ? 'disabled' : ''}\n                                `,\n            onClick: () => handleOptionSelect(option),\n            disabled: isProcessing,\n            children: [option, response === option && isProcessing && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-check\",\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-actions enhanced\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prompt-skip enhanced\",\n            onClick: handleSkip,\n            disabled: isProcessing,\n            children: \"Skip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this), forNewUser && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"prompt-note enhanced\",\n          children: \"\\uD83D\\uDCA1 Each answer helps us find friends who truly match your personality and preferences.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 9\n  }, this);\n};\n_s(ProfilePrompts, \"jvSutP8khQ9U2Q84YM/w9xUcA2M=\", false, function () {\n  return [useAuth];\n});\n_c = ProfilePrompts;\nexport default ProfilePrompts;\nvar _c;\n$RefreshReg$(_c, \"ProfilePrompts\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useAuth","updateUserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfilePrompts","forNewUser","onComplete","_s","user","setUser","setIsNewUser","currentPrompt","setCurrentPrompt","response","setResponse","submitted","setSubmitted","promptIndex","setPromptIndex","loading","setLoading","progress","setProgress","matchImprovementData","setMatchImprovementData","isProcessing","setIsProcessing","isTransitioning","setIsTransitioning","newUserPrompts","id","question","options","category","field","mapping","importance","explanation","existingUserPrompts","prompts","Math","round","length","handleComplete","prev","lastQuestionnaireDate","Date","improvementData","questionsAnswered","matchQualityIncrease","newPotentialMatches","profileCompleteness","shouldShowPrompt","lastPromptTime","localStorage","getItem","timeSinceLastPrompt","now","parseInt","oneDayInMs","random","answeredPromptIds","JSON","parse","eligiblePrompts","filter","prompt","includes","randomIndex","floor","handleSubmit","selectedOption","responseToUse","updateData","currentValues","values","_user$currentPrompt$c","Array","isArray","updatedUserData","answeredPrompts","push","setItem","stringify","toString","setTimeout","err","console","error","handleOptionSelect","option","handleSkip","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","map","index","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Profile/ProfilePromptsEnhanced.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { updateUserProfile } from '../../services/api';\r\nimport '../../styles/profile.css';\r\n\r\nconst ProfilePrompts = ({ forNewUser, onComplete }) => {\r\n    const { user, setUser, setIsNewUser } = useAuth();\r\n    const [currentPrompt, setCurrentPrompt] = useState(null);\r\n    const [response, setResponse] = useState('');\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [promptIndex, setPromptIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [matchImprovementData, setMatchImprovementData] = useState(null);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isTransitioning, setIsTransitioning] = useState(false);\r\n\r\n    // Comprehensive questionnaire for new users (8-10 questions)\r\n    const newUserPrompts = useMemo(() => [\r\n        {\r\n            id: 'communication_style',\r\n            question: 'How do you prefer to communicate with friends?',\r\n            options: ['Text messaging', 'Voice calls', 'Video chats', 'In-person meetups', 'Social media'],\r\n            category: 'socialPreferences',\r\n            field: 'communicationStyle',\r\n            mapping: {\r\n                'Text messaging': 'Text-heavy',\r\n                'Voice calls': 'Voice calls',\r\n                'Video chats': 'Video calls',\r\n                'In-person meetups': 'In-person meetups',\r\n                'Social media': 'Text-heavy'\r\n            },\r\n            importance: 'high',\r\n            explanation: 'This helps us match you with friends who communicate in similar ways.'\r\n        },\r\n        {\r\n            id: 'social_energy',\r\n            question: 'After socializing, do you typically feel:',\r\n            options: ['Energized and ready for more', 'It depends on the people', 'Drained and needing alone time'],\r\n            category: 'socialPreferences',\r\n            field: 'socialEnergy',\r\n            mapping: {\r\n                'Energized and ready for more': 'Extrovert',\r\n                'It depends on the people': 'Ambivert',\r\n                'Drained and needing alone time': 'Introvert'\r\n            },\r\n            importance: 'high',\r\n            explanation: 'Understanding your social energy helps us find compatible friends.'\r\n        },\r\n        {\r\n            id: 'weekend_activity',\r\n            question: 'What\\'s your ideal weekend activity?',\r\n            options: ['Outdoor adventures', 'Cultural events', 'Relaxing at home', 'Social gatherings', 'Sports', 'Creative projects'],\r\n            category: 'lifestyle',\r\n            field: 'weekendPlans',\r\n            importance: 'high',\r\n            explanation: 'Shared weekend preferences lead to better friendships.'\r\n        },\r\n        {\r\n            id: 'friendship_value',\r\n            question: 'What do you value most in a friendship?',\r\n            options: ['Loyalty', 'Honesty', 'Similar interests', 'Good conversation', 'Emotional support', 'Fun and humor'],\r\n            category: 'values',\r\n            field: null, // Special handling for values array\r\n            importance: 'high',\r\n            explanation: 'Core values alignment is crucial for lasting friendships.'\r\n        },\r\n        {\r\n            id: 'activity_level',\r\n            question: 'How would you describe your activity level?',\r\n            options: ['Very active (daily exercise)', 'Moderately active (few times a week)', 'Occasionally active', 'Prefer low-activity'],\r\n            category: 'lifestyle',\r\n            field: 'activityLevel',\r\n            mapping: {\r\n                'Very active (daily exercise)': 'Very active',\r\n                'Moderately active (few times a week)': 'Moderately active',\r\n                'Occasionally active': 'Low activity',\r\n                'Prefer low-activity': 'Low activity'\r\n            },\r\n            importance: 'medium',\r\n            explanation: 'Activity level compatibility helps with shared activities.'\r\n        },\r\n        {\r\n            id: 'time_availability',\r\n            question: 'When are you usually available to hang out?',\r\n            options: ['Weekday evenings', 'Weekend days', 'Weekend evenings', 'Flexible schedule', 'Lunch breaks'],\r\n            category: 'lifestyle',\r\n            field: 'availability',\r\n            importance: 'medium',\r\n            explanation: 'Matching schedules makes it easier to spend time together.'\r\n        },\r\n        {\r\n            id: 'group_size_preference',\r\n            question: 'Do you prefer hanging out:',\r\n            options: ['One-on-one', 'Small groups (2-4 people)', 'Medium groups (5-8 people)', 'Large groups (9+ people)', 'No preference'],\r\n            category: 'socialPreferences',\r\n            field: 'groupSizePreference',\r\n            importance: 'medium',\r\n            explanation: 'Group size preferences help us suggest the right social settings.'\r\n        },\r\n        {\r\n            id: 'conversation_topics',\r\n            question: 'What topics do you enjoy discussing most?',\r\n            options: ['Current events', 'Personal growth', 'Hobbies & interests', 'Work & career', 'Pop culture', 'Deep philosophical topics'],\r\n            category: 'socialPreferences',\r\n            field: 'conversationTopics',\r\n            importance: 'medium',\r\n            explanation: 'Shared conversation interests lead to more engaging interactions.'\r\n        }\r\n    ], []);\r\n\r\n    // Shorter questionnaire for existing users (2-3 questions)\r\n    const existingUserPrompts = useMemo(() => [\r\n        {\r\n            id: 'recent_interests',\r\n            question: 'What new interests have you developed lately?',\r\n            options: ['Fitness & wellness', 'Creative arts', 'Technology', 'Travel planning', 'Cooking', 'Gaming', 'Reading', 'None recently'],\r\n            category: 'interests',\r\n            field: 'recentInterests',\r\n            importance: 'medium',\r\n            explanation: 'New interests help us find fresh connections.'\r\n        },\r\n        {\r\n            id: 'friendship_goals',\r\n            question: 'What are you looking for in new friendships right now?',\r\n            options: ['Activity partners', 'Deep conversations', 'Casual hangouts', 'Professional networking', 'Study/work buddies'],\r\n            category: 'socialPreferences',\r\n            field: 'friendshipGoals',\r\n            importance: 'high',\r\n            explanation: 'Understanding your current friendship goals helps us make better matches.'\r\n        },\r\n        {\r\n            id: 'communication_frequency',\r\n            question: 'How often do you like to stay in touch with friends?',\r\n            options: ['Daily check-ins', 'Few times a week', 'Weekly catch-ups', 'Bi-weekly', 'Monthly or less'],\r\n            category: 'socialPreferences',\r\n            field: 'communicationFrequency',\r\n            importance: 'medium',\r\n            explanation: 'Communication frequency preferences prevent mismatched expectations.'\r\n        }\r\n    ], []);\r\n\r\n    // Memoize the prompts array based on user type\r\n    const prompts = useMemo(() => {\r\n        return forNewUser ? newUserPrompts : existingUserPrompts;\r\n    }, [forNewUser, newUserPrompts, existingUserPrompts]);\r\n\r\n    // Calculate progress for new users\r\n    useEffect(() => {\r\n        if (forNewUser) {\r\n            setProgress(Math.round((promptIndex / prompts.length) * 100));\r\n        }\r\n    }, [promptIndex, prompts.length, forNewUser]);\r\n\r\n    // Define handleComplete before it's used in useEffect\r\n    const handleComplete = useCallback(() => {\r\n        if (setIsNewUser) {\r\n            setIsNewUser(false);\r\n        }\r\n        // Also update user context to reflect questionnaire completion\r\n        if (setUser) {\r\n            setUser(prev => ({\r\n                ...prev,\r\n                lastQuestionnaireDate: new Date()\r\n            }));\r\n        }\r\n        if (onComplete) {\r\n            onComplete();\r\n        }\r\n        \r\n        // Show match improvement data\r\n        const improvementData = {\r\n            questionsAnswered: forNewUser ? prompts.length : 1,\r\n            matchQualityIncrease: forNewUser ? 45 : 15,\r\n            newPotentialMatches: forNewUser ? 12 : 3,\r\n            profileCompleteness: forNewUser ? 85 : (user.profileCompleteness || 60) + 10\r\n        };\r\n        setMatchImprovementData(improvementData);\r\n    }, [setIsNewUser, onComplete, forNewUser, prompts.length, user]);\r\n\r\n    // Initialize prompt for user\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        \r\n        if (forNewUser) {\r\n            if (promptIndex < prompts.length) {\r\n                setCurrentPrompt(prompts[promptIndex]);\r\n                setResponse('');\r\n            } else {\r\n                // All prompts completed for new user\r\n                handleComplete();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // For existing users, show prompts occasionally\r\n        const shouldShowPrompt = () => {\r\n            const lastPromptTime = localStorage.getItem('lastPromptTime');\r\n            if (lastPromptTime) {\r\n                const timeSinceLastPrompt = Date.now() - parseInt(lastPromptTime);\r\n                const oneDayInMs = 24 * 60 * 60 * 1000;\r\n                if (timeSinceLastPrompt < oneDayInMs) {\r\n                    return false;\r\n                }\r\n            }\r\n            return Math.random() < 0.3;\r\n        };\r\n\r\n        if (shouldShowPrompt()) {\r\n            const answeredPromptIds = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            const eligiblePrompts = prompts.filter(prompt => !answeredPromptIds.includes(prompt.id));\r\n            \r\n            if (eligiblePrompts.length > 0) {\r\n                const randomIndex = Math.floor(Math.random() * eligiblePrompts.length);\r\n                setCurrentPrompt(eligiblePrompts[randomIndex]);\r\n                setResponse('');\r\n            }\r\n        }\r\n    }, [user, promptIndex, forNewUser, prompts, handleComplete]);\r\n\r\n    const handleSubmit = useCallback(async (selectedOption = null) => {\r\n        const responseToUse = selectedOption || response;\r\n        if (!responseToUse || !currentPrompt) return;\r\n        \r\n        try {\r\n            const updateData = {};\r\n            \r\n            // Special handling for values array (when field is null)\r\n            if (currentPrompt.category === 'values' && currentPrompt.field === null) {\r\n                // Add to values array if not already present\r\n                const currentValues = user.values || [];\r\n                if (!currentValues.includes(responseToUse)) {\r\n                    updateData.values = [...currentValues, responseToUse];\r\n                } else {\r\n                    updateData.values = currentValues; // No change needed\r\n                }\r\n            } else {\r\n                // Create nested structure if needed\r\n                if (!user[currentPrompt.category]) {\r\n                    updateData[currentPrompt.category] = {};\r\n                } else {\r\n                    updateData[currentPrompt.category] = { ...user[currentPrompt.category] };\r\n                }\r\n                \r\n                // Handle mapped values\r\n                if (currentPrompt.mapping && currentPrompt.mapping[responseToUse]) {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = currentPrompt.mapping[responseToUse];\r\n                } else if (Array.isArray(user[currentPrompt.category]?.[currentPrompt.field])) {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = [\r\n                        ...(user[currentPrompt.category][currentPrompt.field] || []),\r\n                        responseToUse\r\n                    ];\r\n                } else {\r\n                    updateData[currentPrompt.category][currentPrompt.field] = responseToUse;\r\n                }\r\n            }\r\n            \r\n            // Update user context immediately for responsiveness\r\n            if (setUser) {\r\n                if (currentPrompt.category === 'values' && currentPrompt.field === null) {\r\n                    setUser(prev => ({\r\n                        ...prev,\r\n                        values: updateData.values\r\n                    }));\r\n                } else {\r\n                    setUser(prev => ({\r\n                        ...prev,\r\n                        [currentPrompt.category]: {\r\n                            ...(prev[currentPrompt.category] || {}),\r\n                            [currentPrompt.field]: updateData[currentPrompt.category][currentPrompt.field]\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n            \r\n            // API call happens in background\r\n            const updatedUserData = await updateUserProfile(updateData);\r\n            \r\n            // Update user context with the full response to include lastQuestionnaireDate\r\n            if (setUser && updatedUserData) {\r\n                setUser(updatedUserData);\r\n            }\r\n            \r\n            // Record answered prompt\r\n            const answeredPrompts = JSON.parse(localStorage.getItem('answeredPrompts') || '[]');\r\n            answeredPrompts.push(currentPrompt.id);\r\n            localStorage.setItem('answeredPrompts', JSON.stringify(answeredPrompts));\r\n            localStorage.setItem('lastPromptTime', Date.now().toString());\r\n            \r\n            // Short delay before moving to next question for smooth transition\r\n            setTimeout(() => {\r\n                if (forNewUser) {\r\n                    setPromptIndex(prev => prev + 1);\r\n                } else {\r\n                    handleComplete();\r\n                }\r\n                // Reset states for next question\r\n                setIsProcessing(false);\r\n                setResponse('');\r\n            }, 300);\r\n            \r\n        } catch (err) {\r\n            console.error('Error updating profile with prompt response:', err);\r\n            // Reset processing state on error with a delay to prevent flashing\r\n            setTimeout(() => {\r\n                setIsProcessing(false);\r\n            }, 200);\r\n        }\r\n    }, [response, currentPrompt, user, setUser, forNewUser, handleComplete]);\r\n\r\n    const handleOptionSelect = useCallback((option) => {\r\n        if (isProcessing) return; // Prevent multiple selections\r\n        \r\n        setResponse(option);\r\n        setIsProcessing(true);\r\n        \r\n        // Add a smooth visual feedback delay before processing\r\n        setTimeout(() => {\r\n            handleSubmit(option); // Pass the option directly\r\n        }, 500); // Visual feedback for 0.5 seconds\r\n    }, [isProcessing, handleSubmit]);\r\n\r\n    const handleSkip = useCallback(() => {\r\n        if (forNewUser) {\r\n            setPromptIndex(prev => prev + 1);\r\n        } else {\r\n            setCurrentPrompt(null);\r\n        }\r\n    }, [forNewUser]);\r\n\r\n    // Show match improvement results\r\n    if (matchImprovementData) {\r\n        return (\r\n            <div className=\"match-improvement-results\">\r\n                <div className=\"improvement-header\">\r\n                    <h3>🎉 Great! Your profile just got better!</h3>\r\n                    <p>Here's how your responses are helping us find better matches:</p>\r\n                </div>\r\n                \r\n                <div className=\"improvement-stats\">\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">+{matchImprovementData.matchQualityIncrease}%</div>\r\n                        <div className=\"stat-label\">Match Quality Increase</div>\r\n                    </div>\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">+{matchImprovementData.newPotentialMatches}</div>\r\n                        <div className=\"stat-label\">New Potential Matches</div>\r\n                    </div>\r\n                    <div className=\"stat-item\">\r\n                        <div className=\"stat-number\">{matchImprovementData.profileCompleteness}%</div>\r\n                        <div className=\"stat-label\">Profile Complete</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"improvement-explanation\">\r\n                    <p>\r\n                        📊 Your answers help our algorithm understand your preferences better. \r\n                        The more you tell us, the better matches we can find!\r\n                    </p>\r\n                </div>\r\n                \r\n                <button \r\n                    className=\"continue-button\"\r\n                    onClick={() => setMatchImprovementData(null)}\r\n                >\r\n                    Continue to Dashboard\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!currentPrompt || !user) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"profile-prompt-container enhanced\">\r\n            {/* Progress bar for new users */}\r\n            {forNewUser && (\r\n                <div className=\"questionnaire-progress\">\r\n                    <div className=\"progress-header\">\r\n                        <span>Question {promptIndex + 1} of {prompts.length}</span>\r\n                        <span>{progress}% complete</span>\r\n                    </div>\r\n                    <div className=\"progress-bar\">\r\n                        <div \r\n                            className=\"progress-fill\" \r\n                            style={{ width: `${progress}%` }}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            \r\n            <div className=\"profile-prompt-card enhanced\">\r\n                <>\r\n                    <div className=\"prompt-header\">\r\n                        <h3>{forNewUser ? '👋 Let\\'s get to know you!' : '💡 Quick Question'}</h3>\r\n                        <div className=\"importance-indicator\">\r\n                            <span className={`importance-badge ${currentPrompt.importance}`}>\r\n                                {currentPrompt.importance === 'high' ? '⭐ Important' : '📈 Helpful'}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p className=\"prompt-question\">{currentPrompt.question}</p>\r\n                    \r\n                    {currentPrompt.explanation && (\r\n                        <p className=\"prompt-explanation\">{currentPrompt.explanation}</p>\r\n                    )}\r\n                    \r\n                    <div className=\"prompt-options enhanced\">\r\n                        {currentPrompt.options.map((option, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className={`prompt-option enhanced \r\n                                    ${response === option ? 'selected' : ''} \r\n                                    ${isProcessing ? 'processing' : ''}\r\n                                    ${isProcessing && response !== option ? 'disabled' : ''}\r\n                                `}\r\n                                onClick={() => handleOptionSelect(option)}\r\n                                disabled={isProcessing}\r\n                            >\r\n                                {option}\r\n                                {response === option && isProcessing && (\r\n                                    <span className=\"option-check\">✓</span>\r\n                                )}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    \r\n                    <div className=\"prompt-actions enhanced\">\r\n                        <button \r\n                            className=\"prompt-skip enhanced\"\r\n                            onClick={handleSkip}\r\n                            disabled={isProcessing}\r\n                        >\r\n                            Skip\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    {forNewUser && (\r\n                        <p className=\"prompt-note enhanced\">\r\n                            💡 Each answer helps us find friends who truly match your personality and preferences.\r\n                        </p>\r\n                    )}\r\n                </>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePrompts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}