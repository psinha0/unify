{"ast":null,"code":"import { io } from 'socket.io-client';\n\n// Create a singleton socket instance\nlet socket;\nconst getSocket = () => {\n  if (!socket) {\n    socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: 5,\n      autoConnect: false\n    });\n  }\n  return socket;\n};\nconst connectSocket = () => {\n  const socket = getSocket();\n  if (!socket.connected) {\n    socket.connect();\n    console.log('Socket connected');\n  }\n};\nconst disconnectSocket = () => {\n  if (socket && socket.connected) {\n    socket.disconnect();\n    console.log('Socket disconnected');\n  }\n};\nconst onMessageReceived = callback => {\n  const socket = getSocket();\n  socket.off('message').on('message', callback);\n};\nconst receiveMessages = callback => {\n  const socket = getSocket();\n  socket.off('receive_message').on('receive_message', callback);\n};\nconst sendMessage = message => {\n  const socket = getSocket();\n  socket.emit('private_message', message);\n};\nconst markMessagesAsRead = ({\n  userId,\n  friendId\n}) => {\n  const socket = getSocket();\n  socket.emit('mark_messages_read', {\n    userId,\n    friendId\n  });\n};\nconst onMessagesRead = callback => {\n  const socket = getSocket();\n  socket.off('messages_read').on('messages_read', callback);\n};\nconst onMessagesMarkedRead = callback => {\n  const socket = getSocket();\n  socket.off('messages_marked_read').on('messages_marked_read', callback);\n};\nconst onMessageSent = callback => {\n  const socket = getSocket();\n  socket.off('message_sent').on('message_sent', callback);\n};\nconst onMessageError = callback => {\n  const socket = getSocket();\n  socket.off('message_error').on('message_error', callback);\n};\nconst sendTypingIndicator = (sender, recipient) => {\n  const socket = getSocket();\n  socket.emit('typing', {\n    sender,\n    recipient\n  });\n};\nconst onUserTyping = callback => {\n  const socket = getSocket();\n  socket.off('user_typing').on('user_typing', callback);\n};\nexport { connectSocket, disconnectSocket, onMessageReceived, sendMessage, receiveMessages, markMessagesAsRead, onMessagesRead, onMessagesMarkedRead, onMessageSent, onMessageError, sendTypingIndicator, onUserTyping, getSocket };","map":{"version":3,"names":["io","socket","getSocket","process","env","REACT_APP_SOCKET_URL","reconnection","reconnectionDelay","reconnectionAttempts","autoConnect","connectSocket","connected","connect","console","log","disconnectSocket","disconnect","onMessageReceived","callback","off","on","receiveMessages","sendMessage","message","emit","markMessagesAsRead","userId","friendId","onMessagesRead","onMessagesMarkedRead","onMessageSent","onMessageError","sendTypingIndicator","sender","recipient","onUserTyping"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\n// Create a singleton socket instance\nlet socket;\n\nconst getSocket = () => {\n    if (!socket) {\n        socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {\n            reconnection: true,\n            reconnectionDelay: 1000,\n            reconnectionAttempts: 5,\n            autoConnect: false\n        });\n    }\n    return socket;\n};\n\nconst connectSocket = () => {\n    const socket = getSocket();\n    if (!socket.connected) {\n        socket.connect();\n        console.log('Socket connected');\n    }\n};\n\nconst disconnectSocket = () => {\n    if (socket && socket.connected) {\n        socket.disconnect();\n        console.log('Socket disconnected');\n    }\n};\n\nconst onMessageReceived = (callback) => {\n    const socket = getSocket();\n    socket.off('message').on('message', callback);\n};\n\nconst receiveMessages = (callback) => {\n    const socket = getSocket();\n    socket.off('receive_message').on('receive_message', callback);\n};\n\nconst sendMessage = (message) => {\n    const socket = getSocket();\n    socket.emit('private_message', message);\n};\n\nconst markMessagesAsRead = ({ userId, friendId }) => {\n    const socket = getSocket();\n    socket.emit('mark_messages_read', { userId, friendId });\n};\n\nconst onMessagesRead = (callback) => {\n    const socket = getSocket();\n    socket.off('messages_read').on('messages_read', callback);\n};\n\nconst onMessagesMarkedRead = (callback) => {\n    const socket = getSocket();\n    socket.off('messages_marked_read').on('messages_marked_read', callback);\n};\n\nconst onMessageSent = (callback) => {\n    const socket = getSocket();\n    socket.off('message_sent').on('message_sent', callback);\n};\n\nconst onMessageError = (callback) => {\n    const socket = getSocket();\n    socket.off('message_error').on('message_error', callback);\n};\n\nconst sendTypingIndicator = (sender, recipient) => {\n    const socket = getSocket();\n    socket.emit('typing', { sender, recipient });\n};\n\nconst onUserTyping = (callback) => {\n    const socket = getSocket();\n    socket.off('user_typing').on('user_typing', callback);\n};\n\nexport { \n    connectSocket, \n    disconnectSocket, \n    onMessageReceived, \n    sendMessage, \n    receiveMessages, \n    markMessagesAsRead, \n    onMessagesRead, \n    onMessagesMarkedRead,\n    onMessageSent,\n    onMessageError,\n    sendTypingIndicator,\n    onUserTyping,\n    getSocket\n};"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;;AAErC;AACA,IAAIC,MAAM;AAEV,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,IAAI,CAACD,MAAM,EAAE;IACTA,MAAM,GAAGD,EAAE,CAACG,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB,EAAE;MACrEC,YAAY,EAAE,IAAI;MAClBC,iBAAiB,EAAE,IAAI;MACvBC,oBAAoB,EAAE,CAAC;MACvBC,WAAW,EAAE;IACjB,CAAC,CAAC;EACN;EACA,OAAOR,MAAM;AACjB,CAAC;AAED,MAAMS,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMT,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1B,IAAI,CAACD,MAAM,CAACU,SAAS,EAAE;IACnBV,MAAM,CAACW,OAAO,CAAC,CAAC;IAChBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EACnC;AACJ,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC3B,IAAId,MAAM,IAAIA,MAAM,CAACU,SAAS,EAAE;IAC5BV,MAAM,CAACe,UAAU,CAAC,CAAC;IACnBH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EACtC;AACJ,CAAC;AAED,MAAMG,iBAAiB,GAAIC,QAAQ,IAAK;EACpC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,SAAS,CAAC,CAACC,EAAE,CAAC,SAAS,EAAEF,QAAQ,CAAC;AACjD,CAAC;AAED,MAAMG,eAAe,GAAIH,QAAQ,IAAK;EAClC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;AACjE,CAAC;AAED,MAAMI,WAAW,GAAIC,OAAO,IAAK;EAC7B,MAAMtB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACuB,IAAI,CAAC,iBAAiB,EAAED,OAAO,CAAC;AAC3C,CAAC;AAED,MAAME,kBAAkB,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EACjD,MAAM1B,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACuB,IAAI,CAAC,oBAAoB,EAAE;IAAEE,MAAM;IAAEC;EAAS,CAAC,CAAC;AAC3D,CAAC;AAED,MAAMC,cAAc,GAAIV,QAAQ,IAAK;EACjC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,eAAe,CAAC,CAACC,EAAE,CAAC,eAAe,EAAEF,QAAQ,CAAC;AAC7D,CAAC;AAED,MAAMW,oBAAoB,GAAIX,QAAQ,IAAK;EACvC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,sBAAsB,CAAC,CAACC,EAAE,CAAC,sBAAsB,EAAEF,QAAQ,CAAC;AAC3E,CAAC;AAED,MAAMY,aAAa,GAAIZ,QAAQ,IAAK;EAChC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,cAAc,CAAC,CAACC,EAAE,CAAC,cAAc,EAAEF,QAAQ,CAAC;AAC3D,CAAC;AAED,MAAMa,cAAc,GAAIb,QAAQ,IAAK;EACjC,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,eAAe,CAAC,CAACC,EAAE,CAAC,eAAe,EAAEF,QAAQ,CAAC;AAC7D,CAAC;AAED,MAAMc,mBAAmB,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;EAC/C,MAAMjC,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACuB,IAAI,CAAC,QAAQ,EAAE;IAAES,MAAM;IAAEC;EAAU,CAAC,CAAC;AAChD,CAAC;AAED,MAAMC,YAAY,GAAIjB,QAAQ,IAAK;EAC/B,MAAMjB,MAAM,GAAGC,SAAS,CAAC,CAAC;EAC1BD,MAAM,CAACkB,GAAG,CAAC,aAAa,CAAC,CAACC,EAAE,CAAC,aAAa,EAAEF,QAAQ,CAAC;AACzD,CAAC;AAED,SACIR,aAAa,EACbK,gBAAgB,EAChBE,iBAAiB,EACjBK,WAAW,EACXD,eAAe,EACfI,kBAAkB,EAClBG,cAAc,EACdC,oBAAoB,EACpBC,aAAa,EACbC,cAAc,EACdC,mBAAmB,EACnBG,YAAY,EACZjC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}