{"ast":null,"code":"/**\r\n * Helper utility to inspect behavior tracking data in development mode\r\n */\n\nconst inspectTrackingData = () => {\n  if (process.env.NODE_ENV !== 'development') {\n    console.warn('This function is meant to be used only in development mode');\n    return null;\n  }\n  try {\n    var _data$interactions;\n    // Try to get data from localStorage\n    const localData = localStorage.getItem('devUserTracking');\n    if (!localData) {\n      console.log('No tracking data found in localStorage');\n      return null;\n    }\n    const data = JSON.parse(localData);\n\n    // Display summary\n    console.log('%c--- BEHAVIOR TRACKING DATA SUMMARY ---', 'font-size: 16px; font-weight: bold; color: #4CAF50;');\n    console.log(`Total interactions tracked: ${((_data$interactions = data.interactions) === null || _data$interactions === void 0 ? void 0 : _data$interactions.length) || 0}`);\n    console.log(`Last updated: ${data.lastUpdated}`);\n\n    // Topic analysis from conversationTopics object\n    console.log('\\n%c--- CONVERSATION TOPICS ---', 'font-size: 14px; font-weight: bold; color: #2196F3;');\n    if (data.conversationTopics && Object.keys(data.conversationTopics).length > 0) {\n      // Sort topics by count\n      const sortedTopics = Object.entries(data.conversationTopics).sort((a, b) => b[1].count - a[1].count);\n      sortedTopics.forEach(([topic, details]) => {\n        if (details.count > 0) {\n          console.log(`%c${topic}: ${details.count} mentions`, 'color: #2196F3; font-weight: bold;');\n          if (details.examples && details.examples.length > 0) {\n            console.log('  Examples:');\n            details.examples.forEach((example, i) => {\n              console.log(`    ${i + 1}. \"${example.snippet}\" (${new Date(example.timestamp).toLocaleString()})`);\n            });\n          }\n          if (details.lastDetected) {\n            console.log(`  Last detected: ${new Date(details.lastDetected).toLocaleString()}`);\n          }\n          console.log(''); // empty line for spacing\n        }\n      });\n    } else {\n      console.log('No conversation topics detected yet.');\n\n      // Fallback to manual analysis if conversationTopics is empty\n      console.log('\\n%c--- MANUAL TOPIC ANALYSIS (FALLBACK) ---', 'font-size: 14px; font-weight: bold; color: #FF9800;');\n      if (data.interactions && data.interactions.length > 0) {\n        const topics = {\n          'music': 0,\n          'movies': 0,\n          'travel': 0,\n          'food': 0,\n          'tech': 0,\n          'sports': 0,\n          'education': 0,\n          'work': 0,\n          'art': 0,\n          'health': 0\n        };\n\n        // Simple keyword matching to count topic mentions\n        data.interactions.forEach(interaction => {\n          if (interaction.message && interaction.message.content) {\n            const content = interaction.message.content.toLowerCase();\n            if (/music|song|band|concert|playlist|album/.test(content)) topics.music++;\n            if (/movie|film|cinema|watch|actor|actress|director/.test(content)) topics.movies++;\n            if (/travel|trip|vacation|visit|flight|hotel|destination/.test(content)) topics.travel++;\n            if (/food|restaurant|eat|dinner|lunch|recipe|cook|meal/.test(content)) topics.food++;\n            if (/tech|technology|computer|phone|app|software|device/.test(content)) topics.tech++;\n            if (/sport|game|team|play|match|win|workout|exercise/.test(content)) topics.sports++;\n            if (/learn|study|school|college|university|degree|class|course/.test(content)) topics.education++;\n            if (/work|job|career|office|business|meeting|project|company/.test(content)) topics.work++;\n            if (/art|painting|drawing|design|creative|artist|gallery|museum/.test(content)) topics.art++;\n            if (/health|doctor|medical|fitness|wellness|diet|exercise|sleep/.test(content)) topics.health++;\n          }\n        });\n        Object.entries(topics).sort((a, b) => b[1] - a[1]).forEach(([topic, count]) => {\n          if (count > 0) {\n            console.log(`${topic}: ${count} mentions`);\n          }\n        });\n      } else {\n        console.log('No messages to analyze.');\n      }\n    }\n\n    // Message patterns analysis\n    console.log('\\n%c--- MESSAGE PATTERNS ---', 'font-size: 14px; font-weight: bold; color: #9C27B0;');\n    if (data.interactions && data.interactions.length > 0) {\n      const messagesByType = {\n        sent: data.interactions.filter(i => i.action === 'message_sent').length,\n        received: data.interactions.filter(i => i.action === 'message_received').length\n      };\n      console.log(`Messages sent: ${messagesByType.sent}`);\n      console.log(`Messages received: ${messagesByType.received}`);\n      console.log(`Ratio (sent:received): ${messagesByType.sent}:${messagesByType.received}`);\n\n      // Calculate average message length\n      const sentMsgs = data.interactions.filter(i => {\n        var _i$message;\n        return i.action === 'message_sent' && ((_i$message = i.message) === null || _i$message === void 0 ? void 0 : _i$message.content);\n      });\n      if (sentMsgs.length > 0) {\n        const avgLength = sentMsgs.reduce((sum, i) => sum + i.message.content.length, 0) / sentMsgs.length;\n        console.log(`Average sent message length: ${avgLength.toFixed(1)} characters`);\n      }\n\n      // Calculate average response time if available\n      const responseTimes = data.interactions.filter(i => i.action === 'message_received' && i.responseTime).map(i => i.responseTime);\n      if (responseTimes.length > 0) {\n        const avgResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length;\n        console.log(`Average response time: ${(avgResponseTime / 1000).toFixed(1)} seconds`);\n      }\n    } else {\n      console.log('No message pattern data available yet.');\n    }\n\n    // Reset function - add this to window for easy access\n    window.resetTrackingData = () => {\n      localStorage.setItem('devUserTracking', JSON.stringify({\n        users: {},\n        interactions: [],\n        messagePatterns: {},\n        responseTimeAnalysis: {},\n        conversationTopics: {},\n        sentiment: {},\n        userEngagement: {},\n        lastUpdated: new Date().toISOString()\n      }));\n      console.log('%c Tracking data has been reset! ', 'background: #F44336; color: white; font-size: 14px;');\n    };\n    console.log('\\n%c--- DEBUGGING TOOLS ---', 'font-size: 14px; font-weight: bold; color: #FF5722;');\n    console.log('• window.inspectTrackingData() - Show this report');\n    console.log('• window.resetTrackingData() - Reset all tracking data');\n\n    // Return the full data for further inspection\n    return data;\n  } catch (error) {\n    console.error('Error inspecting tracking data:', error);\n    return null;\n  }\n};\nwindow.inspectTrackingData = inspectTrackingData;\nconsole.log('%c Behavior Tracking Debug Utilities Loaded ', 'background: #222; color: #bada55; font-size: 16px;');\nconsole.log('%c Call window.inspectTrackingData() to analyze tracking data ', 'background: #222; color: #bada55; font-size: 14px;');\nexport default inspectTrackingData;","map":{"version":3,"names":["inspectTrackingData","process","env","NODE_ENV","console","warn","_data$interactions","localData","localStorage","getItem","log","data","JSON","parse","interactions","length","lastUpdated","conversationTopics","Object","keys","sortedTopics","entries","sort","a","b","count","forEach","topic","details","examples","example","i","snippet","Date","timestamp","toLocaleString","lastDetected","topics","interaction","message","content","toLowerCase","test","music","movies","travel","food","tech","sports","education","work","art","health","messagesByType","sent","filter","action","received","sentMsgs","_i$message","avgLength","reduce","sum","toFixed","responseTimes","responseTime","map","avgResponseTime","time","window","resetTrackingData","setItem","stringify","users","messagePatterns","responseTimeAnalysis","sentiment","userEngagement","toISOString","error"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/behaviorTrackingDebug.js"],"sourcesContent":["/**\r\n * Helper utility to inspect behavior tracking data in development mode\r\n */\r\n\r\nconst inspectTrackingData = () => {\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    console.warn('This function is meant to be used only in development mode');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    // Try to get data from localStorage\r\n    const localData = localStorage.getItem('devUserTracking');\r\n    if (!localData) {\r\n      console.log('No tracking data found in localStorage');\r\n      return null;\r\n    }\r\n    \r\n    const data = JSON.parse(localData);\r\n    \r\n    // Display summary\r\n    console.log('%c--- BEHAVIOR TRACKING DATA SUMMARY ---', 'font-size: 16px; font-weight: bold; color: #4CAF50;');\r\n    console.log(`Total interactions tracked: ${data.interactions?.length || 0}`);\r\n    console.log(`Last updated: ${data.lastUpdated}`);\r\n    \r\n    // Topic analysis from conversationTopics object\r\n    console.log('\\n%c--- CONVERSATION TOPICS ---', 'font-size: 14px; font-weight: bold; color: #2196F3;');\r\n    if (data.conversationTopics && Object.keys(data.conversationTopics).length > 0) {\r\n      // Sort topics by count\r\n      const sortedTopics = Object.entries(data.conversationTopics)\r\n        .sort((a, b) => b[1].count - a[1].count);\r\n      \r\n      sortedTopics.forEach(([topic, details]) => {\r\n        if (details.count > 0) {\r\n          console.log(`%c${topic}: ${details.count} mentions`, 'color: #2196F3; font-weight: bold;');\r\n          \r\n          if (details.examples && details.examples.length > 0) {\r\n            console.log('  Examples:');\r\n            details.examples.forEach((example, i) => {\r\n              console.log(`    ${i+1}. \"${example.snippet}\" (${new Date(example.timestamp).toLocaleString()})`);\r\n            });\r\n          }\r\n          \r\n          if (details.lastDetected) {\r\n            console.log(`  Last detected: ${new Date(details.lastDetected).toLocaleString()}`);\r\n          }\r\n          console.log(''); // empty line for spacing\r\n        }\r\n      });\r\n    } else {\r\n      console.log('No conversation topics detected yet.');\r\n      \r\n      // Fallback to manual analysis if conversationTopics is empty\r\n      console.log('\\n%c--- MANUAL TOPIC ANALYSIS (FALLBACK) ---', 'font-size: 14px; font-weight: bold; color: #FF9800;');\r\n      \r\n      if (data.interactions && data.interactions.length > 0) {\r\n        const topics = {\r\n          'music': 0,\r\n          'movies': 0,\r\n          'travel': 0,\r\n          'food': 0,\r\n          'tech': 0,\r\n          'sports': 0,\r\n          'education': 0,\r\n          'work': 0,\r\n          'art': 0,\r\n          'health': 0\r\n        };\r\n        \r\n        // Simple keyword matching to count topic mentions\r\n        data.interactions.forEach(interaction => {\r\n          if (interaction.message && interaction.message.content) {\r\n            const content = interaction.message.content.toLowerCase();\r\n            \r\n            if (/music|song|band|concert|playlist|album/.test(content)) topics.music++;\r\n            if (/movie|film|cinema|watch|actor|actress|director/.test(content)) topics.movies++;\r\n            if (/travel|trip|vacation|visit|flight|hotel|destination/.test(content)) topics.travel++;\r\n            if (/food|restaurant|eat|dinner|lunch|recipe|cook|meal/.test(content)) topics.food++;\r\n            if (/tech|technology|computer|phone|app|software|device/.test(content)) topics.tech++;\r\n            if (/sport|game|team|play|match|win|workout|exercise/.test(content)) topics.sports++;\r\n            if (/learn|study|school|college|university|degree|class|course/.test(content)) topics.education++;\r\n            if (/work|job|career|office|business|meeting|project|company/.test(content)) topics.work++;\r\n            if (/art|painting|drawing|design|creative|artist|gallery|museum/.test(content)) topics.art++;\r\n            if (/health|doctor|medical|fitness|wellness|diet|exercise|sleep/.test(content)) topics.health++;\r\n          }\r\n        });\r\n        \r\n        Object.entries(topics)\r\n          .sort((a, b) => b[1] - a[1])\r\n          .forEach(([topic, count]) => {\r\n            if (count > 0) {\r\n              console.log(`${topic}: ${count} mentions`);\r\n            }\r\n          });\r\n      } else {\r\n        console.log('No messages to analyze.');\r\n      }\r\n    }\r\n    \r\n    // Message patterns analysis\r\n    console.log('\\n%c--- MESSAGE PATTERNS ---', 'font-size: 14px; font-weight: bold; color: #9C27B0;');\r\n    \r\n    if (data.interactions && data.interactions.length > 0) {\r\n      const messagesByType = {\r\n        sent: data.interactions.filter(i => i.action === 'message_sent').length,\r\n        received: data.interactions.filter(i => i.action === 'message_received').length\r\n      };\r\n      \r\n      console.log(`Messages sent: ${messagesByType.sent}`);\r\n      console.log(`Messages received: ${messagesByType.received}`);\r\n      console.log(`Ratio (sent:received): ${messagesByType.sent}:${messagesByType.received}`);\r\n      \r\n      // Calculate average message length\r\n      const sentMsgs = data.interactions.filter(i => i.action === 'message_sent' && i.message?.content);\r\n      if (sentMsgs.length > 0) {\r\n        const avgLength = sentMsgs.reduce((sum, i) => sum + i.message.content.length, 0) / sentMsgs.length;\r\n        console.log(`Average sent message length: ${avgLength.toFixed(1)} characters`);\r\n      }\r\n      \r\n      // Calculate average response time if available\r\n      const responseTimes = data.interactions\r\n        .filter(i => i.action === 'message_received' && i.responseTime)\r\n        .map(i => i.responseTime);\r\n        \r\n      if (responseTimes.length > 0) {\r\n        const avgResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length;\r\n        console.log(`Average response time: ${(avgResponseTime / 1000).toFixed(1)} seconds`);\r\n      }\r\n    } else {\r\n      console.log('No message pattern data available yet.');\r\n    }\r\n    \r\n    // Reset function - add this to window for easy access\r\n    window.resetTrackingData = () => {\r\n      localStorage.setItem('devUserTracking', JSON.stringify({\r\n        users: {},\r\n        interactions: [],\r\n        messagePatterns: {},\r\n        responseTimeAnalysis: {},\r\n        conversationTopics: {},\r\n        sentiment: {},\r\n        userEngagement: {},\r\n        lastUpdated: new Date().toISOString()\r\n      }));\r\n      console.log('%c Tracking data has been reset! ', 'background: #F44336; color: white; font-size: 14px;');\r\n    };\r\n    \r\n    console.log('\\n%c--- DEBUGGING TOOLS ---', 'font-size: 14px; font-weight: bold; color: #FF5722;');\r\n    console.log('• window.inspectTrackingData() - Show this report');\r\n    console.log('• window.resetTrackingData() - Reset all tracking data');\r\n    \r\n    // Return the full data for further inspection\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error inspecting tracking data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nwindow.inspectTrackingData = inspectTrackingData;\r\n\r\nconsole.log(\r\n  '%c Behavior Tracking Debug Utilities Loaded ',\r\n  'background: #222; color: #bada55; font-size: 16px;'\r\n);\r\nconsole.log(\r\n  '%c Call window.inspectTrackingData() to analyze tracking data ',\r\n  'background: #222; color: #bada55; font-size: 14px;'\r\n);\r\n\r\nexport default inspectTrackingData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}