{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Messaging\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sendMessage, receiveMessages, connectSocket, disconnectSocket, markMessagesAsRead, onMessagesRead, onMessageSent, onMessageError, sendTypingIndicator, onUserTyping, getSocket } from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport '../../styles/chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    friendId\n  } = useParams();\n  const history = useHistory();\n  const [friend, setFriend] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Setup socket connection and handlers\n  useEffect(() => {\n    // Connect to socket when component mounts\n    connectSocket();\n    const handleReceiveMessage = message => {\n      console.log('Received message:', message);\n\n      // Format the timestamp correctly with error handling\n      let formattedMessage = {\n        ...message\n      };\n      try {\n        // Try to format timestamp as Date\n        if (message.timestamp) {\n          formattedMessage.timestamp = new Date(message.timestamp);\n          if (isNaN(formattedMessage.timestamp.getTime())) {\n            console.warn('Invalid timestamp, using current time instead');\n            formattedMessage.timestamp = new Date();\n          }\n        } else {\n          formattedMessage.timestamp = new Date();\n        }\n\n        // Try to format readAt as Date if it exists\n        if (message.readAt) {\n          formattedMessage.readAt = new Date(message.readAt);\n          if (isNaN(formattedMessage.readAt.getTime())) {\n            formattedMessage.readAt = null;\n          }\n        } else {\n          formattedMessage.readAt = null;\n        }\n      } catch (error) {\n        console.error('Error formatting message dates:', error);\n        formattedMessage.timestamp = new Date();\n        formattedMessage.readAt = null;\n      }\n      setMessages(prevMessages => [...prevMessages, formattedMessage]);\n\n      // If we receive a message from the friend we're chatting with, mark it as read\n      if (message.sender === friendId && user !== null && user !== void 0 && user.id) {\n        console.log('Marking message as read');\n        markMessagesAsRead({\n          userId: user.id,\n          friendId\n        });\n      }\n    };\n    const handleMessageSent = confirmation => {\n      console.log('Message sent confirmation:', confirmation);\n      // Update the message in our state with the server-generated ID\n      setMessages(prevMessages => prevMessages.map(msg => {\n        // Match by timestamp if no _id, using getTime for accurate comparison\n        const msgTime = msg.timestamp.getTime();\n        const confTime = new Date(confirmation.timestamp).getTime();\n        // Allow for small time differences (within 1 second)\n        const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n        if (msg.isSent && !msg._id && isTimeMatch) {\n          return {\n            ...msg,\n            _id: confirmation._id,\n            timestamp: new Date(confirmation.timestamp),\n            read: confirmation.read || false,\n            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n          };\n        }\n        return msg;\n      }));\n    };\n    const handleMessageError = error => {\n      setError(`Error sending message: ${error.message}`);\n      setTimeout(() => setError(null), 5000);\n    };\n    const handleMessagesRead = data => {\n      if (data.by === friendId) {\n        console.log('Messages read by friend:', data);\n\n        // Ensure readAt is properly formatted as a Date\n        let readAtDate;\n        try {\n          // If readAt exists, try to convert it to a Date\n          readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n\n          // Check if it's a valid date\n          if (isNaN(readAtDate.getTime())) {\n            console.warn('Invalid readAt date received:', data.readAt);\n            readAtDate = new Date();\n          }\n        } catch (error) {\n          console.error('Error parsing readAt date:', error);\n          readAtDate = new Date();\n        }\n\n        // Update read status of messages in state\n        setMessages(prevMessages => prevMessages.map(msg => {\n          if (msg.sender === (user === null || user === void 0 ? void 0 : user.id) && !msg.read || data.messageIds && data.messageIds.includes(msg._id)) {\n            return {\n              ...msg,\n              read: true,\n              readAt: readAtDate\n            };\n          }\n          return msg;\n        }));\n      }\n    };\n    const handleUserTyping = data => {\n      if (data.sender === friendId) {\n        setIsTyping(true);\n\n        // Clear any existing timeout\n        if (typingTimeout) {\n          clearTimeout(typingTimeout);\n        }\n\n        // Set a timeout to clear the typing indicator after 3 seconds\n        const timeout = setTimeout(() => {\n          setIsTyping(false);\n        }, 3000);\n        setTypingTimeout(timeout);\n      }\n    };\n\n    // Register socket event handlers\n    receiveMessages(handleReceiveMessage);\n    onMessageSent(handleMessageSent);\n    onMessageError(handleMessageError);\n    onMessagesRead(handleMessagesRead);\n    onUserTyping(handleUserTyping);\n\n    // Notify server that user is online if we have a user ID\n    if (user && user.id) {\n      const socket = getSocket();\n      socket.emit('user_login', user.id);\n    }\n    return () => {\n      // Cleanup the socket connection when component unmounts\n      disconnectSocket();\n\n      // Clear any existing typing timeout to prevent memory leaks\n      if (typingTimeout) {\n        clearTimeout(typingTimeout);\n      }\n    };\n  }, [user, friendId, typingTimeout]);\n\n  // Load friend details and chat history\n  useEffect(() => {\n    const loadFriendAndChat = async () => {\n      if (!friendId || !user) return;\n      setLoading(true);\n      try {\n        // Import this function at the top of the file\n        const {\n          getFriendById\n        } = await import('../../services/api');\n\n        // Get friend details\n        const friendData = await getFriendById(friendId);\n        setFriend(friendData);\n\n        // Get chat history\n        const chatHistory = await getChatHistory(friendId);\n\n        // Format the timestamps as Date objects\n        const formattedHistory = chatHistory.map(msg => ({\n          ...msg,\n          timestamp: new Date(msg.timestamp),\n          readAt: msg.readAt ? new Date(msg.readAt) : null\n        }));\n        setMessages(formattedHistory);\n\n        // Mark messages as read when chat is opened\n        if (user.id) {\n          console.log('Marking messages as read on chat open');\n          try {\n            // First update via socket for real-time update to other user\n            markMessagesAsRead({\n              userId: user.id,\n              friendId\n            });\n\n            // Then update via API to ensure database is updated\n            await apiMarkMessagesAsRead(friendId);\n          } catch (err) {\n            console.error('Error marking messages as read:', err);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading chat data:', error);\n        setError('Failed to load chat data. Please try again.');\n        setTimeout(() => setError(null), 5000);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadFriendAndChat();\n  }, [friendId, user]);\n\n  // Scroll to bottom of messages when they update\n  useEffect(() => {\n    const scrollToBottom = () => {\n      const chatContainer = document.querySelector('.chat-messages');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    };\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() && user && user.id && friendId) {\n      try {\n        const messageData = {\n          sender: user.id,\n          recipient: friendId,\n          content: newMessage\n        };\n        console.log('Sending message:', messageData);\n\n        // Send via socket\n        sendMessage(messageData);\n\n        // Add message to local state with a unique client-side ID\n        const clientMessageId = `temp-${Date.now()}`;\n        const newMsg = {\n          _id: null,\n          // Will be updated when server confirms\n          clientMessageId,\n          // Temporary client-side ID to help with matching\n          sender: user.id,\n          receiver: friendId,\n          content: newMessage,\n          timestamp: new Date(),\n          read: false,\n          readAt: null,\n          isSent: true\n        };\n        setMessages(prevMessages => [...prevMessages, newMsg]);\n        setNewMessage('');\n\n        // Scroll to bottom\n        setTimeout(() => {\n          if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({\n              behavior: 'smooth'\n            });\n          }\n        }, 100);\n      } catch (error) {\n        console.error('Error sending message:', error);\n        setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n        setTimeout(() => setError(null), 5000);\n      }\n    }\n  };\n\n  // Handle back button to return to dashboard\n  const handleBack = () => {\n    history.push('/dashboard');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chat...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), friend && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-friend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: friend.profilePicture || 'https://via.placeholder.com/40',\n          alt: friend.username,\n          className: \"chat-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: friend.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: friend.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 27\n      }, this), messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Start the conversation!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 21\n      }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === user.id ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: msg.timestamp && msg.timestamp instanceof Date ? msg.timestamp.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            }) : new Date(msg.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 33\n          }, this), msg.sender === user.id && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-status\",\n            children: msg.read ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-read\",\n              title: `Read at ${msg.readAt && msg.readAt instanceof Date ? msg.readAt.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              }) : 'unknown time'}`,\n              children: \"\\u2713\\u2713 Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-sent\",\n              children: \"\\u2713 Sent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 25\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(friend === null || friend === void 0 ? void 0 : friend.username) || 'Friend', \" is typing\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => {\n          setNewMessage(e.target.value);\n          // Debounce typing indicator to reduce socket traffic\n          if (user !== null && user !== void 0 && user.id && friendId) {\n            // Clear existing timeout if any\n            if (typingTimeout) {\n              clearTimeout(typingTimeout);\n            }\n\n            // Only send typing indicator every 1 second at most\n            const newTimeout = setTimeout(() => {\n              sendTypingIndicator(user.id, friendId);\n            }, 300);\n            setTypingTimeout(newTimeout);\n          }\n        },\n        placeholder: \"Type a message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !newMessage.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatInterface, \"H5c0RjUYecH3ESrwdt5InasqBAM=\", false, function () {\n  return [useAuth, useParams, useHistory];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useAuth","useParams","useHistory","sendMessage","receiveMessages","connectSocket","disconnectSocket","markMessagesAsRead","onMessagesRead","onMessageSent","onMessageError","sendTypingIndicator","onUserTyping","getSocket","getChatHistory","apiMarkMessagesAsRead","jsxDEV","_jsxDEV","ChatInterface","_s","user","friendId","history","friend","setFriend","messages","setMessages","newMessage","setNewMessage","loading","setLoading","error","setError","isTyping","setIsTyping","typingTimeout","setTypingTimeout","messagesEndRef","handleReceiveMessage","message","console","log","formattedMessage","timestamp","Date","isNaN","getTime","warn","readAt","prevMessages","sender","id","userId","handleMessageSent","confirmation","map","msg","msgTime","confTime","isTimeMatch","Math","abs","isSent","_id","read","handleMessageError","setTimeout","handleMessagesRead","data","by","readAtDate","messageIds","includes","handleUserTyping","clearTimeout","timeout","socket","emit","loadFriendAndChat","getFriendById","friendData","chatHistory","formattedHistory","err","scrollToBottom","chatContainer","document","querySelector","scrollTop","scrollHeight","handleSendMessage","trim","messageData","recipient","content","clientMessageId","now","newMsg","receiver","current","scrollIntoView","behavior","handleBack","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","profilePicture","alt","username","location","length","index","toLocaleTimeString","hour","minute","title","ref","type","value","onChange","e","target","newTimeout","placeholder","onKeyPress","key","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Messaging/ChatInterface.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { \n    sendMessage, \n    receiveMessages, \n    connectSocket, \n    disconnectSocket, \n    markMessagesAsRead,\n    onMessagesRead,\n    onMessageSent,\n    onMessageError,\n    sendTypingIndicator,\n    onUserTyping,\n    getSocket\n} from '../../services/socket';\nimport { getChatHistory, markMessagesAsRead as apiMarkMessagesAsRead } from '../../services/api';\nimport '../../styles/chat.css';\n\nconst ChatInterface = () => {\n    const { user } = useAuth();\n    const { friendId } = useParams();\n    const history = useHistory();\n    const [friend, setFriend] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingTimeout, setTypingTimeout] = useState(null);\n    const messagesEndRef = useRef(null);\n\n    // Setup socket connection and handlers\n    useEffect(() => {\n        // Connect to socket when component mounts\n        connectSocket();\n        \n        const handleReceiveMessage = (message) => {\n            console.log('Received message:', message);\n            \n            // Format the timestamp correctly with error handling\n            let formattedMessage = { ...message };\n            \n            try {\n                // Try to format timestamp as Date\n                if (message.timestamp) {\n                    formattedMessage.timestamp = new Date(message.timestamp);\n                    if (isNaN(formattedMessage.timestamp.getTime())) {\n                        console.warn('Invalid timestamp, using current time instead');\n                        formattedMessage.timestamp = new Date();\n                    }\n                } else {\n                    formattedMessage.timestamp = new Date();\n                }\n                \n                // Try to format readAt as Date if it exists\n                if (message.readAt) {\n                    formattedMessage.readAt = new Date(message.readAt);\n                    if (isNaN(formattedMessage.readAt.getTime())) {\n                        formattedMessage.readAt = null;\n                    }\n                } else {\n                    formattedMessage.readAt = null;\n                }\n            } catch (error) {\n                console.error('Error formatting message dates:', error);\n                formattedMessage.timestamp = new Date();\n                formattedMessage.readAt = null;\n            }\n            \n            setMessages((prevMessages) => [...prevMessages, formattedMessage]);\n            \n            // If we receive a message from the friend we're chatting with, mark it as read\n            if (message.sender === friendId && user?.id) {\n                console.log('Marking message as read');\n                markMessagesAsRead({ userId: user.id, friendId });\n            }\n        };\n\n        const handleMessageSent = (confirmation) => {\n            console.log('Message sent confirmation:', confirmation);\n            // Update the message in our state with the server-generated ID\n            setMessages((prevMessages) => \n                prevMessages.map(msg => {\n                    // Match by timestamp if no _id, using getTime for accurate comparison\n                    const msgTime = msg.timestamp.getTime();\n                    const confTime = new Date(confirmation.timestamp).getTime();\n                    // Allow for small time differences (within 1 second)\n                    const isTimeMatch = Math.abs(msgTime - confTime) < 1000;\n                    \n                    if (msg.isSent && !msg._id && isTimeMatch) {\n                        return { \n                            ...msg, \n                            _id: confirmation._id, \n                            timestamp: new Date(confirmation.timestamp),\n                            read: confirmation.read || false,\n                            readAt: confirmation.readAt ? new Date(confirmation.readAt) : null\n                        };\n                    }\n                    return msg;\n                })\n            );\n        };\n\n        const handleMessageError = (error) => {\n            setError(`Error sending message: ${error.message}`);\n            setTimeout(() => setError(null), 5000);\n        };\n\n        const handleMessagesRead = (data) => {\n            if (data.by === friendId) {\n                console.log('Messages read by friend:', data);\n                \n                // Ensure readAt is properly formatted as a Date\n                let readAtDate;\n                try {\n                    // If readAt exists, try to convert it to a Date\n                    readAtDate = data.readAt ? new Date(data.readAt) : new Date();\n                    \n                    // Check if it's a valid date\n                    if (isNaN(readAtDate.getTime())) {\n                        console.warn('Invalid readAt date received:', data.readAt);\n                        readAtDate = new Date();\n                    }\n                } catch (error) {\n                    console.error('Error parsing readAt date:', error);\n                    readAtDate = new Date();\n                }\n                \n                // Update read status of messages in state\n                setMessages((prevMessages) => \n                    prevMessages.map(msg => {\n                        if ((msg.sender === user?.id && !msg.read) || \n                            (data.messageIds && data.messageIds.includes(msg._id))) {\n                            return { \n                                ...msg, \n                                read: true, \n                                readAt: readAtDate\n                            };\n                        }\n                        return msg;\n                    })\n                );\n            }\n        };\n        \n        const handleUserTyping = (data) => {\n            if (data.sender === friendId) {\n                setIsTyping(true);\n                \n                // Clear any existing timeout\n                if (typingTimeout) {\n                    clearTimeout(typingTimeout);\n                }\n                \n                // Set a timeout to clear the typing indicator after 3 seconds\n                const timeout = setTimeout(() => {\n                    setIsTyping(false);\n                }, 3000);\n                \n                setTypingTimeout(timeout);\n            }\n        };\n\n        // Register socket event handlers\n        receiveMessages(handleReceiveMessage);\n        onMessageSent(handleMessageSent);\n        onMessageError(handleMessageError);\n        onMessagesRead(handleMessagesRead);\n        onUserTyping(handleUserTyping);\n\n        // Notify server that user is online if we have a user ID\n        if (user && user.id) {\n            const socket = getSocket();\n            socket.emit('user_login', user.id);\n        }\n\n        return () => {\n            // Cleanup the socket connection when component unmounts\n            disconnectSocket();\n            \n            // Clear any existing typing timeout to prevent memory leaks\n            if (typingTimeout) {\n                clearTimeout(typingTimeout);\n            }\n        };\n    }, [user, friendId, typingTimeout]);\n    \n    // Load friend details and chat history\n    useEffect(() => {\n        const loadFriendAndChat = async () => {\n            if (!friendId || !user) return;\n            \n            setLoading(true);\n            try {\n                // Import this function at the top of the file\n                const { getFriendById } = await import('../../services/api');\n                \n                // Get friend details\n                const friendData = await getFriendById(friendId);\n                setFriend(friendData);\n                \n                // Get chat history\n                const chatHistory = await getChatHistory(friendId);\n                \n                // Format the timestamps as Date objects\n                const formattedHistory = chatHistory.map(msg => ({\n                    ...msg,\n                    timestamp: new Date(msg.timestamp),\n                    readAt: msg.readAt ? new Date(msg.readAt) : null\n                }));\n                \n                setMessages(formattedHistory);\n                \n                // Mark messages as read when chat is opened\n                if (user.id) {\n                    console.log('Marking messages as read on chat open');\n                    try {\n                        // First update via socket for real-time update to other user\n                        markMessagesAsRead({ userId: user.id, friendId });\n                        \n                        // Then update via API to ensure database is updated\n                        await apiMarkMessagesAsRead(friendId);\n                    } catch (err) {\n                        console.error('Error marking messages as read:', err);\n                    }\n                }\n            } catch (error) {\n                console.error('Error loading chat data:', error);\n                setError('Failed to load chat data. Please try again.');\n                setTimeout(() => setError(null), 5000);\n            } finally {\n                setLoading(false);\n            }\n        };\n        \n        loadFriendAndChat();\n    }, [friendId, user]);\n    \n    // Scroll to bottom of messages when they update\n    useEffect(() => {\n        const scrollToBottom = () => {\n            const chatContainer = document.querySelector('.chat-messages');\n            if (chatContainer) {\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n            }\n        };\n        \n        scrollToBottom();\n    }, [messages]);\n\n    const handleSendMessage = () => {\n        if (newMessage.trim() && user && user.id && friendId) {\n            try {\n                const messageData = {\n                    sender: user.id,\n                    recipient: friendId,\n                    content: newMessage\n                };\n                \n                console.log('Sending message:', messageData);\n                \n                // Send via socket\n                sendMessage(messageData);\n                \n                // Add message to local state with a unique client-side ID\n                const clientMessageId = `temp-${Date.now()}`;\n                const newMsg = {\n                    _id: null, // Will be updated when server confirms\n                    clientMessageId, // Temporary client-side ID to help with matching\n                    sender: user.id,\n                    receiver: friendId,\n                    content: newMessage,\n                    timestamp: new Date(),\n                    read: false,\n                    readAt: null,\n                    isSent: true\n                };\n                \n                setMessages((prevMessages) => [...prevMessages, newMsg]);\n                setNewMessage('');\n                \n                // Scroll to bottom\n                setTimeout(() => {\n                    if (messagesEndRef.current) {\n                        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n                    }\n                }, 100);\n            } catch (error) {\n                console.error('Error sending message:', error);\n                setError(`Failed to send message: ${error.message || 'Unknown error'}`);\n                setTimeout(() => setError(null), 5000);\n            }\n        }\n    };\n\n    // Handle back button to return to dashboard\n    const handleBack = () => {\n        history.push('/dashboard');\n    };\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading chat...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"chat-header\">\n                <button className=\"back-button\" onClick={handleBack}>\n                    &larr; Back\n                </button>\n                \n                {friend && (\n                    <div className=\"chat-friend-info\">\n                        <img \n                            src={friend.profilePicture || 'https://via.placeholder.com/40'} \n                            alt={friend.username} \n                            className=\"chat-avatar\"\n                        />\n                        <div className=\"chat-name\">\n                            <h3>{friend.username}</h3>\n                            <p>{friend.location}</p>\n                        </div>\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"chat-messages\">\n                {error && <div className=\"error-message\">{error}</div>}\n                \n                {messages.length === 0 ? (\n                    <div className=\"no-messages\">\n                        <p>No messages yet. Start the conversation!</p>\n                    </div>\n                ) : (\n                    messages.map((msg, index) => (\n                        <div \n                            key={index} \n                            className={`message ${msg.sender === user.id ? 'sent' : 'received'}`}\n                        >\n                            <div className=\"message-content\">{msg.content}</div>\n                            <div className=\"message-info\">\n                                <span className=\"message-time\">\n                                    {msg.timestamp && msg.timestamp instanceof Date \n                                        ? msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n                                        : new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n                                    }\n                                </span>\n                                {msg.sender === user.id && (\n                                    <span className=\"message-status\">\n                                        {msg.read ? (\n                                            <span className=\"status-read\" title={`Read at ${msg.readAt && msg.readAt instanceof Date ? msg.readAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'unknown time'}`}>\n                                                ✓✓ Read\n                                            </span>\n                                        ) : (\n                                            <span className=\"status-sent\">\n                                                ✓ Sent\n                                            </span>\n                                        )}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                    ))\n                )}\n                {isTyping && (\n                    <div className=\"typing-indicator\">\n                        <span>{friend?.username || 'Friend'} is typing</span>\n                    </div>\n                )}\n                <div ref={messagesEndRef} />\n            </div>\n            \n            <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    value={newMessage}\n                    onChange={(e) => {\n                        setNewMessage(e.target.value);\n                        // Debounce typing indicator to reduce socket traffic\n                        if (user?.id && friendId) {\n                            // Clear existing timeout if any\n                            if (typingTimeout) {\n                                clearTimeout(typingTimeout);\n                            }\n                            \n                            // Only send typing indicator every 1 second at most\n                            const newTimeout = setTimeout(() => {\n                                sendTypingIndicator(user.id, friendId);\n                            }, 300);\n                            \n                            setTypingTimeout(newTimeout);\n                        }\n                    }}\n                    placeholder=\"Type a message...\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                />\n                <button onClick={handleSendMessage} disabled={!newMessage.trim()}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}