{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sinha\\\\Desktop\\\\Computing Projects\\\\INFS3059\\\\friend-finder\\\\client\\\\src\\\\components\\\\Messaging\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sendMessage, receiveMessages, connectSocket, disconnectSocket } from '../../services/socket';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const {\n    friendId\n  } = useParams();\n  const history = useHistory();\n  const [friend, setFriend] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000');\n  useEffect(() => {\n    // Connect to socket when component mounts\n    connectSocket();\n    const handleReceiveMessage = message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    };\n    receiveMessages(handleReceiveMessage);\n\n    // Notify server that user is online if we have a user ID\n    if (user && user.id) {\n      socket.emit('user_login', user.id);\n    }\n    return () => {\n      // Cleanup the socket connection when component unmounts\n      disconnectSocket();\n    };\n  }, [user]);\n  const handleSendMessage = () => {\n    if (newMessage.trim() && user && user.id) {\n      // In a real app, you would get the recipient ID from props or state\n      const recipientId = \"recipientId\"; // Replace with actual recipient ID\n\n      const messageData = {\n        sender: user.id,\n        recipient: recipientId,\n        content: newMessage\n      };\n      sendMessage(messageData);\n\n      // Add message to local state\n      setMessages(prevMessages => [...prevMessages, {\n        sender: user.id,\n        content: newMessage,\n        timestamp: new Date(),\n        isSent: true\n      }]);\n      setNewMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.sender === user.id ? 'message sent' : 'message received',\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatInterface, \"BVX3qFrX4lUBCeDWKE86hhHUPJA=\", false, function () {\n  return [useAuth, useParams, useHistory];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useEffect","useState","useAuth","useParams","useHistory","sendMessage","receiveMessages","connectSocket","disconnectSocket","io","jsxDEV","_jsxDEV","ChatInterface","_s","user","friendId","history","friend","setFriend","messages","setMessages","newMessage","setNewMessage","loading","setLoading","socket","process","env","REACT_APP_SOCKET_URL","handleReceiveMessage","message","prevMessages","id","emit","handleSendMessage","trim","recipientId","messageData","sender","recipient","content","timestamp","Date","isSent","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/components/Messaging/ChatInterface.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sendMessage, receiveMessages, connectSocket, disconnectSocket } from '../../services/socket';\nimport { io } from 'socket.io-client';\n\nconst ChatInterface = () => {\n    const { user } = useAuth();\n    const { friendId } = useParams();\n    const history = useHistory();\n    const [friend, setFriend] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [loading, setLoading] = useState(true);\n    const socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000');\n\n    useEffect(() => {\n        // Connect to socket when component mounts\n        connectSocket();\n        \n        const handleReceiveMessage = (message) => {\n            setMessages((prevMessages) => [...prevMessages, message]);\n        };\n\n        receiveMessages(handleReceiveMessage);\n\n        // Notify server that user is online if we have a user ID\n        if (user && user.id) {\n            socket.emit('user_login', user.id);\n        }\n\n        return () => {\n            // Cleanup the socket connection when component unmounts\n            disconnectSocket();\n        };\n    }, [user]);\n\n    const handleSendMessage = () => {\n        if (newMessage.trim() && user && user.id) {\n            // In a real app, you would get the recipient ID from props or state\n            const recipientId = \"recipientId\"; // Replace with actual recipient ID\n            \n            const messageData = {\n                sender: user.id,\n                recipient: recipientId,\n                content: newMessage\n            };\n            \n            sendMessage(messageData);\n            \n            // Add message to local state\n            setMessages((prevMessages) => [\n                ...prevMessages, \n                {\n                    sender: user.id,\n                    content: newMessage,\n                    timestamp: new Date(),\n                    isSent: true\n                }\n            ]);\n            \n            setNewMessage('');\n        }\n    };\n\n    return (\n        <div className=\"chat-interface\">\n            <div className=\"messages\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={msg.sender === user.id ? 'message sent' : 'message received'}>\n                        <span>{msg.content}</span>\n                    </div>\n                ))}\n            </div>\n            <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                placeholder=\"Type a message...\"\n            />\n            <button onClick={handleSendMessage}>Send</button>\n        </div>\n    );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}