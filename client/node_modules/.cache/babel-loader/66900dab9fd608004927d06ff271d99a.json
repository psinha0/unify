{"ast":null,"code":"import axios from 'axios';\n\n// Define API URL without relying on process.env\n// In production, you would use environment variables properly\nconst API_URL = window.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Registration API error:', error);\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw {\n        message: 'Server is not responding. Please try again later.'\n      };\n    } else {\n      // Something happened in setting up the request\n      throw {\n        message: 'Error setting up request. Please try again.'\n      };\n    }\n  }\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    return response.data;\n  } catch (error) {\n    console.error('Login API error:', error);\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw {\n        message: 'Server is not responding. Please try again later.'\n      };\n    } else {\n      // Something happened in setting up the request\n      throw {\n        message: 'Error setting up request. Please try again.'\n      };\n    }\n  }\n};\n\n// Fetch the user's friends\nexport const fetchFriends = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/friends`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Fetch potential friends for matching\nexport const fetchPotentialFriends = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/potential-friends`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Send a friend request to another user\nexport const sendFriendRequest = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/matching/match`, {\n      friendId\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Get pending friend requests\nexport const getFriendRequests = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/requests`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Accept a friend request\nexport const acceptFriendRequest = async requestId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.post(`${API_URL}/matching/requests/${requestId}/accept`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\nexport const sendMessage = async messageData => {\n  try {\n    const response = await axios.post(`${API_URL}/messaging/send`, messageData);\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Get current user's profile\nexport const getUserProfile = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Update user's profile\nexport const updateUserProfile = async profileData => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(`${API_URL}/profile`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Get friend details by ID\nexport const getFriendById = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/matching/friends/${friendId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Get chat history with a friend\nexport const getChatHistory = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/messaging/history/${friendId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};\n\n// Mark messages from a friend as read\nexport const markMessagesAsRead = async friendId => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Authentication token not found');\n    }\n    console.log(`Marking messages from ${friendId} as read via API`);\n    const response = await axios.put(`${API_URL}/messaging/read/${friendId}`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('API response for marking messages as read:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking messages as read via API:', error);\n    throw error.response ? error.response.data : new Error('Network error');\n  }\n};","map":{"version":3,"names":["axios","API_URL","window","REACT_APP_API_URL","registerUser","userData","response","post","data","error","console","request","message","loginUser","credentials","fetchFriends","token","localStorage","getItem","get","headers","Authorization","Error","fetchPotentialFriends","sendFriendRequest","friendId","getFriendRequests","acceptFriendRequest","requestId","sendMessage","messageData","getUserProfile","updateUserProfile","profileData","put","getFriendById","getChatHistory","markMessagesAsRead","log"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Define API URL without relying on process.env\n// In production, you would use environment variables properly\nconst API_URL = window.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const registerUser = async (userData) => {\n    try {\n        const response = await axios.post(`${API_URL}/auth/register`, userData);\n        return response.data;\n    } catch (error) {\n        console.error('Registration API error:', error);\n        if (error.response && error.response.data) {\n            throw error.response.data;\n        } else if (error.request) {\n            // The request was made but no response was received\n            throw { message: 'Server is not responding. Please try again later.' };\n        } else {\n            // Something happened in setting up the request\n            throw { message: 'Error setting up request. Please try again.' };\n        }\n    }\n};\n\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await axios.post(`${API_URL}/auth/login`, credentials);\n        return response.data;\n    } catch (error) {\n        console.error('Login API error:', error);\n        if (error.response && error.response.data) {\n            throw error.response.data;\n        } else if (error.request) {\n            // The request was made but no response was received\n            throw { message: 'Server is not responding. Please try again later.' };\n        } else {\n            // Something happened in setting up the request\n            throw { message: 'Error setting up request. Please try again.' };\n        }\n    }\n};\n\n// Fetch the user's friends\nexport const fetchFriends = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/friends`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Fetch potential friends for matching\nexport const fetchPotentialFriends = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/potential-friends`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Send a friend request to another user\nexport const sendFriendRequest = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(`${API_URL}/matching/match`, \n            { friendId },\n            {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Get pending friend requests\nexport const getFriendRequests = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/requests`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n\n\n// Accept a friend request\nexport const acceptFriendRequest = async (requestId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.post(\n            `${API_URL}/matching/requests/${requestId}/accept`, \n            {},\n            {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            }\n        );\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\nexport const sendMessage = async (messageData) => {\n    try {\n        const response = await axios.post(`${API_URL}/messaging/send`, messageData);\n        return response.data;\n    } catch (error) {\n        throw error.response.data;\n    }\n};\n\n// Get current user's profile\nexport const getUserProfile = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/profile`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Update user's profile\nexport const updateUserProfile = async (profileData) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.put(`${API_URL}/profile`, profileData, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Get friend details by ID\nexport const getFriendById = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/matching/friends/${friendId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Get chat history with a friend\nexport const getChatHistory = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${API_URL}/messaging/history/${friendId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};\n\n// Mark messages from a friend as read\nexport const markMessagesAsRead = async (friendId) => {\n    try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            throw new Error('Authentication token not found');\n        }\n        \n        console.log(`Marking messages from ${friendId} as read via API`);\n        const response = await axios.put(`${API_URL}/messaging/read/${friendId}`, {}, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        console.log('API response for marking messages as read:', response.data);\n        return response.data;\n    } catch (error) {\n        console.error('Error marking messages as read via API:', error);\n        throw error.response ? error.response.data : new Error('Network error');\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}