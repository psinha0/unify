{"ast":null,"code":"// A service for tracking user behavior and generating insights\nimport { getSocket } from './socket';\nimport { updateUserProfile } from './api';\n\n// Initialize the storage for tracking behavioral data\nlet behaviorsToTrack = {\n  messageFrequency: [],\n  responseTime: [],\n  interactionPatterns: {},\n  activeHours: {},\n  friendPreferences: {},\n  topicInterests: {}\n};\n\n// Reset the tracking data\nconst resetTracking = () => {\n  behaviorsToTrack = {\n    messageFrequency: [],\n    responseTime: [],\n    interactionPatterns: {},\n    activeHours: {},\n    friendPreferences: {},\n    topicInterests: {}\n  };\n};\n\n// Track a message being sent\nconst trackMessageSent = (message, recipientId) => {\n  // Track timestamp for active hours analysis\n  const hour = new Date().getHours();\n  if (!behaviorsToTrack.activeHours[hour]) {\n    behaviorsToTrack.activeHours[hour] = 0;\n  }\n  behaviorsToTrack.activeHours[hour]++;\n\n  // Track friend interactions frequency\n  if (!behaviorsToTrack.friendPreferences[recipientId]) {\n    behaviorsToTrack.friendPreferences[recipientId] = {\n      messageCount: 0,\n      lastMessageTime: Date.now(),\n      totalResponseTime: 0,\n      responseCount: 0\n    };\n  }\n  behaviorsToTrack.friendPreferences[recipientId].messageCount++;\n  behaviorsToTrack.friendPreferences[recipientId].lastMessageTime = Date.now();\n\n  // Track message content for topic interests\n  const messageText = message.content.toLowerCase();\n  const topics = [{\n    name: 'music',\n    keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album']\n  }, {\n    name: 'movies',\n    keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director']\n  }, {\n    name: 'travel',\n    keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination']\n  }, {\n    name: 'food',\n    keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal']\n  }, {\n    name: 'tech',\n    keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device']\n  }, {\n    name: 'sports',\n    keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise']\n  }];\n  topics.forEach(topic => {\n    if (!behaviorsToTrack.topicInterests[topic.name]) {\n      behaviorsToTrack.topicInterests[topic.name] = 0;\n    }\n    if (topic.keywords.some(keyword => messageText.includes(keyword))) {\n      behaviorsToTrack.topicInterests[topic.name]++;\n    }\n  });\n\n  // Save the updated tracking data after each interaction\n  saveTrackingData();\n};\n\n// Track a message being received\nconst trackMessageReceived = (message, senderId) => {\n  var _behaviorsToTrack$fri;\n  // Calculate response time if it's a reply\n  if ((_behaviorsToTrack$fri = behaviorsToTrack.friendPreferences[senderId]) !== null && _behaviorsToTrack$fri !== void 0 && _behaviorsToTrack$fri.lastMessageTime) {\n    const responseTime = Date.now() - behaviorsToTrack.friendPreferences[senderId].lastMessageTime;\n    behaviorsToTrack.friendPreferences[senderId].totalResponseTime += responseTime;\n    behaviorsToTrack.friendPreferences[senderId].responseCount++;\n  }\n\n  // Track the same topics as in sent messages\n  const messageText = message.content.toLowerCase();\n  const topics = [{\n    name: 'music',\n    keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album']\n  }, {\n    name: 'movies',\n    keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director']\n  }, {\n    name: 'travel',\n    keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination']\n  }, {\n    name: 'food',\n    keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal']\n  }, {\n    name: 'tech',\n    keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device']\n  }, {\n    name: 'sports',\n    keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise']\n  }];\n  topics.forEach(topic => {\n    if (!behaviorsToTrack.topicInterests[topic.name]) {\n      behaviorsToTrack.topicInterests[topic.name] = 0;\n    }\n    if (topic.keywords.some(keyword => messageText.includes(keyword))) {\n      behaviorsToTrack.topicInterests[topic.name]++;\n    }\n  });\n};\n\n// Save the tracking data to localStorage for persistence\nconst saveTrackingData = () => {\n  try {\n    localStorage.setItem('userBehaviorData', JSON.stringify(behaviorsToTrack));\n  } catch (error) {\n    console.error('Error saving behavior tracking data:', error);\n  }\n};\n\n// Load the tracking data from localStorage\nconst loadTrackingData = () => {\n  try {\n    const savedData = localStorage.getItem('userBehaviorData');\n    if (savedData) {\n      behaviorsToTrack = JSON.parse(savedData);\n    }\n  } catch (error) {\n    console.error('Error loading behavior tracking data:', error);\n  }\n};\n\n// Generate insights from collected behavioral data\nconst generateInsights = () => {\n  const insights = {\n    activeHours: getMostActiveHours(),\n    favoriteContacts: getFavoriteContacts(),\n    topicInterests: getTopTopics(),\n    communicationStyle: getCommunicationStyle()\n  };\n  return insights;\n};\n\n// Get the hours when the user is most active\nconst getMostActiveHours = () => {\n  const hours = Object.keys(behaviorsToTrack.activeHours).map(hour => ({\n    hour: parseInt(hour),\n    count: behaviorsToTrack.activeHours[hour]\n  })).sort((a, b) => b.count - a.count).slice(0, 3);\n  return hours.map(h => h.hour);\n};\n\n// Get the contacts the user interacts with most frequently\nconst getFavoriteContacts = () => {\n  return Object.keys(behaviorsToTrack.friendPreferences).map(friendId => ({\n    friendId,\n    messageCount: behaviorsToTrack.friendPreferences[friendId].messageCount\n  })).sort((a, b) => b.messageCount - a.messageCount).slice(0, 5).map(f => f.friendId);\n};\n\n// Get the topics the user discusses most frequently\nconst getTopTopics = () => {\n  return Object.keys(behaviorsToTrack.topicInterests).map(topic => ({\n    topic,\n    count: behaviorsToTrack.topicInterests[topic]\n  })).sort((a, b) => b.count - a.count).slice(0, 3).map(t => t.topic);\n};\n\n// Infer the user's communication style based on message patterns\nconst getCommunicationStyle = () => {\n  // Analyze average message length, response time, and message frequency\n  let totalMessages = 0;\n  let totalResponseTime = 0;\n  let responseCount = 0;\n  Object.values(behaviorsToTrack.friendPreferences).forEach(friend => {\n    totalMessages += friend.messageCount;\n    totalResponseTime += friend.totalResponseTime;\n    responseCount += friend.responseCount;\n  });\n\n  // Quick responder: average response time under 5 minutes\n  if (responseCount > 0 && totalResponseTime / responseCount < 5 * 60 * 1000) {\n    return 'Quick responder';\n  }\n\n  // Frequent communicator: more than 10 messages per friend on average\n  if (Object.keys(behaviorsToTrack.friendPreferences).length > 0 && totalMessages / Object.keys(behaviorsToTrack.friendPreferences).length > 10) {\n    return 'Frequent communicator';\n  }\n\n  // Default style\n  return 'Regular communicator';\n};\n\n// Sync insights with user profile periodically\nconst syncInsightsWithProfile = async userId => {\n  try {\n    // Only sync if we have enough data\n    if (Object.keys(behaviorsToTrack.activeHours).length === 0 && Object.keys(behaviorsToTrack.friendPreferences).length === 0) {\n      return;\n    }\n    const insights = generateInsights();\n\n    // Update the user profile with new insights\n    await updateUserProfile({\n      inferred: {\n        activeHours: insights.activeHours,\n        topicInterests: insights.topicInterests,\n        communicationStyle: insights.communicationStyle\n      }\n    });\n\n    // Track when we last synced insights\n    localStorage.setItem('lastInsightSync', Date.now().toString());\n  } catch (error) {\n    console.error('Error syncing insights with profile:', error);\n  }\n};\n\n// Initialize the behavior tracking\nconst initializeBehaviorTracking = userId => {\n  loadTrackingData();\n\n  // Setup periodic syncing (every week)\n  const checkAndSync = () => {\n    const lastSync = parseInt(localStorage.getItem('lastInsightSync') || '0');\n    const oneWeekMs = 7 * 24 * 60 * 60 * 1000;\n    if (Date.now() - lastSync > oneWeekMs) {\n      syncInsightsWithProfile(userId);\n    }\n  };\n\n  // Check if sync is needed when user opens app\n  checkAndSync();\n\n  // Also schedule regular checks\n  setInterval(checkAndSync, 24 * 60 * 60 * 1000); // Daily check\n\n  return {\n    trackMessageSent,\n    trackMessageReceived,\n    generateInsights,\n    resetTracking\n  };\n};\nexport { initializeBehaviorTracking, trackMessageSent, trackMessageReceived, generateInsights, resetTracking };","map":{"version":3,"names":["getSocket","updateUserProfile","behaviorsToTrack","messageFrequency","responseTime","interactionPatterns","activeHours","friendPreferences","topicInterests","resetTracking","trackMessageSent","message","recipientId","hour","Date","getHours","messageCount","lastMessageTime","now","totalResponseTime","responseCount","messageText","content","toLowerCase","topics","name","keywords","forEach","topic","some","keyword","includes","saveTrackingData","trackMessageReceived","senderId","_behaviorsToTrack$fri","localStorage","setItem","JSON","stringify","error","console","loadTrackingData","savedData","getItem","parse","generateInsights","insights","getMostActiveHours","favoriteContacts","getFavoriteContacts","getTopTopics","communicationStyle","getCommunicationStyle","hours","Object","keys","map","parseInt","count","sort","a","b","slice","h","friendId","f","t","totalMessages","values","friend","length","syncInsightsWithProfile","userId","inferred","toString","initializeBehaviorTracking","checkAndSync","lastSync","oneWeekMs","setInterval"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/behaviorTracking.js"],"sourcesContent":["// A service for tracking user behavior and generating insights\r\nimport { getSocket } from './socket';\r\nimport { updateUserProfile } from './api';\r\n\r\n// Initialize the storage for tracking behavioral data\r\nlet behaviorsToTrack = {\r\n    messageFrequency: [],\r\n    responseTime: [],\r\n    interactionPatterns: {},\r\n    activeHours: {},\r\n    friendPreferences: {},\r\n    topicInterests: {}\r\n};\r\n\r\n// Reset the tracking data\r\nconst resetTracking = () => {\r\n    behaviorsToTrack = {\r\n        messageFrequency: [],\r\n        responseTime: [],\r\n        interactionPatterns: {},\r\n        activeHours: {},\r\n        friendPreferences: {},\r\n        topicInterests: {}\r\n    };\r\n};\r\n\r\n// Track a message being sent\r\nconst trackMessageSent = (message, recipientId) => {\r\n    // Track timestamp for active hours analysis\r\n    const hour = new Date().getHours();\r\n    if (!behaviorsToTrack.activeHours[hour]) {\r\n        behaviorsToTrack.activeHours[hour] = 0;\r\n    }\r\n    behaviorsToTrack.activeHours[hour]++;\r\n    \r\n    // Track friend interactions frequency\r\n    if (!behaviorsToTrack.friendPreferences[recipientId]) {\r\n        behaviorsToTrack.friendPreferences[recipientId] = {\r\n            messageCount: 0,\r\n            lastMessageTime: Date.now(),\r\n            totalResponseTime: 0,\r\n            responseCount: 0\r\n        };\r\n    }\r\n    \r\n    behaviorsToTrack.friendPreferences[recipientId].messageCount++;\r\n    behaviorsToTrack.friendPreferences[recipientId].lastMessageTime = Date.now();\r\n    \r\n    // Track message content for topic interests\r\n    const messageText = message.content.toLowerCase();\r\n    const topics = [\r\n        { name: 'music', keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album'] },\r\n        { name: 'movies', keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director'] },\r\n        { name: 'travel', keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination'] },\r\n        { name: 'food', keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal'] },\r\n        { name: 'tech', keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device'] },\r\n        { name: 'sports', keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise'] }\r\n    ];\r\n    \r\n    topics.forEach(topic => {\r\n        if (!behaviorsToTrack.topicInterests[topic.name]) {\r\n            behaviorsToTrack.topicInterests[topic.name] = 0;\r\n        }\r\n        \r\n        if (topic.keywords.some(keyword => messageText.includes(keyword))) {\r\n            behaviorsToTrack.topicInterests[topic.name]++;\r\n        }\r\n    });\r\n    \r\n    // Save the updated tracking data after each interaction\r\n    saveTrackingData();\r\n};\r\n\r\n// Track a message being received\r\nconst trackMessageReceived = (message, senderId) => {\r\n    // Calculate response time if it's a reply\r\n    if (behaviorsToTrack.friendPreferences[senderId]?.lastMessageTime) {\r\n        const responseTime = Date.now() - behaviorsToTrack.friendPreferences[senderId].lastMessageTime;\r\n        behaviorsToTrack.friendPreferences[senderId].totalResponseTime += responseTime;\r\n        behaviorsToTrack.friendPreferences[senderId].responseCount++;\r\n    }\r\n    \r\n    // Track the same topics as in sent messages\r\n    const messageText = message.content.toLowerCase();\r\n    const topics = [\r\n        { name: 'music', keywords: ['music', 'song', 'band', 'concert', 'playlist', 'album'] },\r\n        { name: 'movies', keywords: ['movie', 'film', 'cinema', 'watch', 'actor', 'actress', 'director'] },\r\n        { name: 'travel', keywords: ['travel', 'trip', 'vacation', 'visit', 'flight', 'hotel', 'destination'] },\r\n        { name: 'food', keywords: ['food', 'restaurant', 'eat', 'dinner', 'lunch', 'recipe', 'cook', 'meal'] },\r\n        { name: 'tech', keywords: ['tech', 'technology', 'computer', 'phone', 'app', 'software', 'device'] },\r\n        { name: 'sports', keywords: ['sport', 'game', 'team', 'play', 'match', 'win', 'workout', 'exercise'] }\r\n    ];\r\n    \r\n    topics.forEach(topic => {\r\n        if (!behaviorsToTrack.topicInterests[topic.name]) {\r\n            behaviorsToTrack.topicInterests[topic.name] = 0;\r\n        }\r\n        \r\n        if (topic.keywords.some(keyword => messageText.includes(keyword))) {\r\n            behaviorsToTrack.topicInterests[topic.name]++;\r\n        }\r\n    });\r\n};\r\n\r\n// Save the tracking data to localStorage for persistence\r\nconst saveTrackingData = () => {\r\n    try {\r\n        localStorage.setItem('userBehaviorData', JSON.stringify(behaviorsToTrack));\r\n    } catch (error) {\r\n        console.error('Error saving behavior tracking data:', error);\r\n    }\r\n};\r\n\r\n// Load the tracking data from localStorage\r\nconst loadTrackingData = () => {\r\n    try {\r\n        const savedData = localStorage.getItem('userBehaviorData');\r\n        if (savedData) {\r\n            behaviorsToTrack = JSON.parse(savedData);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error loading behavior tracking data:', error);\r\n    }\r\n};\r\n\r\n// Generate insights from collected behavioral data\r\nconst generateInsights = () => {\r\n    const insights = {\r\n        activeHours: getMostActiveHours(),\r\n        favoriteContacts: getFavoriteContacts(),\r\n        topicInterests: getTopTopics(),\r\n        communicationStyle: getCommunicationStyle()\r\n    };\r\n    \r\n    return insights;\r\n};\r\n\r\n// Get the hours when the user is most active\r\nconst getMostActiveHours = () => {\r\n    const hours = Object.keys(behaviorsToTrack.activeHours)\r\n        .map(hour => ({\r\n            hour: parseInt(hour),\r\n            count: behaviorsToTrack.activeHours[hour]\r\n        }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, 3);\r\n    \r\n    return hours.map(h => h.hour);\r\n};\r\n\r\n// Get the contacts the user interacts with most frequently\r\nconst getFavoriteContacts = () => {\r\n    return Object.keys(behaviorsToTrack.friendPreferences)\r\n        .map(friendId => ({\r\n            friendId,\r\n            messageCount: behaviorsToTrack.friendPreferences[friendId].messageCount\r\n        }))\r\n        .sort((a, b) => b.messageCount - a.messageCount)\r\n        .slice(0, 5)\r\n        .map(f => f.friendId);\r\n};\r\n\r\n// Get the topics the user discusses most frequently\r\nconst getTopTopics = () => {\r\n    return Object.keys(behaviorsToTrack.topicInterests)\r\n        .map(topic => ({\r\n            topic,\r\n            count: behaviorsToTrack.topicInterests[topic]\r\n        }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, 3)\r\n        .map(t => t.topic);\r\n};\r\n\r\n// Infer the user's communication style based on message patterns\r\nconst getCommunicationStyle = () => {\r\n    // Analyze average message length, response time, and message frequency\r\n    let totalMessages = 0;\r\n    let totalResponseTime = 0;\r\n    let responseCount = 0;\r\n    \r\n    Object.values(behaviorsToTrack.friendPreferences).forEach(friend => {\r\n        totalMessages += friend.messageCount;\r\n        totalResponseTime += friend.totalResponseTime;\r\n        responseCount += friend.responseCount;\r\n    });\r\n    \r\n    // Quick responder: average response time under 5 minutes\r\n    if (responseCount > 0 && (totalResponseTime / responseCount) < 5 * 60 * 1000) {\r\n        return 'Quick responder';\r\n    }\r\n    \r\n    // Frequent communicator: more than 10 messages per friend on average\r\n    if (Object.keys(behaviorsToTrack.friendPreferences).length > 0 && \r\n        (totalMessages / Object.keys(behaviorsToTrack.friendPreferences).length) > 10) {\r\n        return 'Frequent communicator';\r\n    }\r\n    \r\n    // Default style\r\n    return 'Regular communicator';\r\n};\r\n\r\n// Sync insights with user profile periodically\r\nconst syncInsightsWithProfile = async (userId) => {\r\n    try {\r\n        // Only sync if we have enough data\r\n        if (Object.keys(behaviorsToTrack.activeHours).length === 0 && \r\n            Object.keys(behaviorsToTrack.friendPreferences).length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const insights = generateInsights();\r\n        \r\n        // Update the user profile with new insights\r\n        await updateUserProfile({\r\n            inferred: {\r\n                activeHours: insights.activeHours,\r\n                topicInterests: insights.topicInterests,\r\n                communicationStyle: insights.communicationStyle\r\n            }\r\n        });\r\n        \r\n        // Track when we last synced insights\r\n        localStorage.setItem('lastInsightSync', Date.now().toString());\r\n        \r\n    } catch (error) {\r\n        console.error('Error syncing insights with profile:', error);\r\n    }\r\n};\r\n\r\n// Initialize the behavior tracking\r\nconst initializeBehaviorTracking = (userId) => {\r\n    loadTrackingData();\r\n    \r\n    // Setup periodic syncing (every week)\r\n    const checkAndSync = () => {\r\n        const lastSync = parseInt(localStorage.getItem('lastInsightSync') || '0');\r\n        const oneWeekMs = 7 * 24 * 60 * 60 * 1000;\r\n        \r\n        if (Date.now() - lastSync > oneWeekMs) {\r\n            syncInsightsWithProfile(userId);\r\n        }\r\n    };\r\n    \r\n    // Check if sync is needed when user opens app\r\n    checkAndSync();\r\n    \r\n    // Also schedule regular checks\r\n    setInterval(checkAndSync, 24 * 60 * 60 * 1000); // Daily check\r\n    \r\n    return {\r\n        trackMessageSent,\r\n        trackMessageReceived,\r\n        generateInsights,\r\n        resetTracking\r\n    };\r\n};\r\n\r\nexport { \r\n    initializeBehaviorTracking,\r\n    trackMessageSent,\r\n    trackMessageReceived,\r\n    generateInsights,\r\n    resetTracking\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}