{"ast":null,"code":"import { io } from 'socket.io-client';\n// Create a singleton socket instance\nlet socket;\n// Helper function to create consistent conversation IDs\nconst createConversationId = (userId1, userId2) => {\n  // Sort the IDs to ensure the conversation ID is the same regardless of who initiates\n  const sortedIds = [userId1, userId2].sort();\n  return `${sortedIds[0]}_${sortedIds[1]}`;\n};\n// Safe way to get environment variables in browser\nconst getEnvVar = (name, defaultValue) => {\n  try {\n    return typeof process !== 'undefined' && process.env && process.env[name] ? process.env[name] : defaultValue;\n  } catch (e) {\n    return defaultValue;\n  }\n};\n// Get socket URL safely\nconst SOCKET_URL = getEnvVar('REACT_APP_SOCKET_URL', 'http://localhost:5000');\nconst getSocket = () => {\n  if (!socket) {\n    socket = io(SOCKET_URL, {\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: 5,\n      autoConnect: false\n    });\n  }\n  return socket;\n};\nconst connectSocket = () => {\n  const socket = getSocket();\n  if (!socket.connected) {\n    socket.connect();\n  }\n};\nconst disconnectSocket = () => {\n  if (socket && socket.connected) {\n    socket.disconnect();\n  }\n};\nconst onMessageReceived = callback => {\n  const socket = getSocket();\n  socket.off('message').on('message', callback);\n};\nconst receiveMessages = callback => {\n  const socket = getSocket();\n  socket.off('receive_message').on('receive_message', callback);\n};\nconst sendMessage = message => {\n  try {\n    const socket = getSocket();\n    socket.emit('private_message', message);\n  } catch (error) {}\n};\nconst markMessagesAsRead = ({\n  userId,\n  friendId\n}) => {\n  try {\n    const socket = getSocket();\n    socket.emit('mark_messages_read', {\n      userId,\n      friendId\n    });\n  } catch (error) {}\n};\nconst onMessagesRead = callback => {\n  const socket = getSocket();\n  socket.off('messages_read').on('messages_read', callback);\n};\nconst onMessagesMarkedRead = callback => {\n  const socket = getSocket();\n  socket.off('messages_marked_read').on('messages_marked_read', callback);\n};\nconst onMessageSent = callback => {\n  const socket = getSocket();\n  socket.off('message_sent').on('message_sent', callback);\n};\nconst onMessageError = callback => {\n  const socket = getSocket();\n  socket.off('message_error').on('message_error', callback);\n};\nconst sendTypingIndicator = (sender, recipient) => {\n  try {\n    const socket = getSocket();\n    socket.emit('typing', {\n      sender,\n      recipient\n    });\n  } catch (error) {}\n};\nconst onUserTyping = callback => {\n  const socket = getSocket();\n  socket.off('user_typing').on('user_typing', callback);\n};\n// New function to notify server when a chat is opened\nconst notifyChatOpened = (userId, friendId) => {\n  try {\n    const socket = getSocket();\n    const conversationId = createConversationId(userId, friendId);\n    socket.emit('chatOpened', {\n      conversationId,\n      userId,\n      friendId\n    });\n  } catch (error) {}\n};\n// Handle read status sync events\nconst onReadStatusSync = callback => {\n  const socket = getSocket();\n  socket.off('read_status_sync').on('read_status_sync', callback);\n};\nexport { connectSocket, disconnectSocket, onMessageReceived, sendMessage, receiveMessages, markMessagesAsRead, onMessagesRead, onMessagesMarkedRead, onMessageSent, onMessageError, sendTypingIndicator, onUserTyping, notifyChatOpened, onReadStatusSync, getSocket, createConversationId };","map":{"version":3,"names":["io","socket","createConversationId","userId1","userId2","sortedIds","sort","getEnvVar","name","defaultValue","process","env","e","SOCKET_URL","getSocket","reconnection","reconnectionDelay","reconnectionAttempts","autoConnect","connectSocket","connected","connect","disconnectSocket","disconnect","onMessageReceived","callback","off","on","receiveMessages","sendMessage","message","emit","error","markMessagesAsRead","userId","friendId","onMessagesRead","onMessagesMarkedRead","onMessageSent","onMessageError","sendTypingIndicator","sender","recipient","onUserTyping","notifyChatOpened","conversationId","onReadStatusSync"],"sources":["C:/Users/sinha/Desktop/Computing Projects/INFS3059/friend-finder/client/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\n// Create a singleton socket instance\nlet socket;\n// Helper function to create consistent conversation IDs\nconst createConversationId = (userId1, userId2) => {\n    // Sort the IDs to ensure the conversation ID is the same regardless of who initiates\n    const sortedIds = [userId1, userId2].sort();\n    return `${sortedIds[0]}_${sortedIds[1]}`;\n};\n// Safe way to get environment variables in browser\nconst getEnvVar = (name, defaultValue) => {\n    try {\n        return typeof process !== 'undefined' && \n               process.env && \n               process.env[name] ? \n               process.env[name] : defaultValue;\n    } catch (e) {\n        return defaultValue;\n    }\n};\n// Get socket URL safely\nconst SOCKET_URL = getEnvVar('REACT_APP_SOCKET_URL', 'http://localhost:5000');\nconst getSocket = () => {\n    if (!socket) {\n        socket = io(SOCKET_URL, {\n            reconnection: true,\n            reconnectionDelay: 1000,\n            reconnectionAttempts: 5,\n            autoConnect: false\n        });\n    }\n    return socket;\n};\nconst connectSocket = () => {\n    const socket = getSocket();\n    if (!socket.connected) {\n        socket.connect();\n    }\n};\nconst disconnectSocket = () => {\n    if (socket && socket.connected) {\n        socket.disconnect();\n    }\n};\nconst onMessageReceived = (callback) => {\n    const socket = getSocket();\n    socket.off('message').on('message', callback);\n};\nconst receiveMessages = (callback) => {\n    const socket = getSocket();\n    socket.off('receive_message').on('receive_message', callback);\n};\nconst sendMessage = (message) => {\n    try {\n        const socket = getSocket();\n        socket.emit('private_message', message);\n    } catch (error) {\n    }\n};\nconst markMessagesAsRead = ({ userId, friendId }) => {\n    try {\n        const socket = getSocket();\n        socket.emit('mark_messages_read', { userId, friendId });\n    } catch (error) {\n    }\n};\nconst onMessagesRead = (callback) => {\n    const socket = getSocket();\n    socket.off('messages_read').on('messages_read', callback);\n};\nconst onMessagesMarkedRead = (callback) => {\n    const socket = getSocket();\n    socket.off('messages_marked_read').on('messages_marked_read', callback);\n};\nconst onMessageSent = (callback) => {\n    const socket = getSocket();\n    socket.off('message_sent').on('message_sent', callback);\n};\nconst onMessageError = (callback) => {\n    const socket = getSocket();\n    socket.off('message_error').on('message_error', callback);\n};\nconst sendTypingIndicator = (sender, recipient) => {\n    try {\n        const socket = getSocket();\n        socket.emit('typing', { sender, recipient });\n    } catch (error) {\n    }\n};\nconst onUserTyping = (callback) => {\n    const socket = getSocket();\n    socket.off('user_typing').on('user_typing', callback);\n};\n// New function to notify server when a chat is opened\nconst notifyChatOpened = (userId, friendId) => {\n    try {\n        const socket = getSocket();\n        const conversationId = createConversationId(userId, friendId);\n        socket.emit('chatOpened', { conversationId, userId, friendId });\n    } catch (error) {\n    }\n};\n// Handle read status sync events\nconst onReadStatusSync = (callback) => {\n    const socket = getSocket();\n    socket.off('read_status_sync').on('read_status_sync', callback);\n};\nexport { \n    connectSocket, \n    disconnectSocket, \n    onMessageReceived, \n    sendMessage, \n    receiveMessages, \n    markMessagesAsRead, \n    onMessagesRead, \n    onMessagesMarkedRead,\n    onMessageSent,\n    onMessageError,\n    sendTypingIndicator,\n    onUserTyping,\n    notifyChatOpened,\n    onReadStatusSync,\n    getSocket,\n    createConversationId\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}